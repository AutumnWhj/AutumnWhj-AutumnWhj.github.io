<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://autumnwhj.github.io/</id>
  <title>Jin's Blog</title>
  <subtitle>Jin's Blog</subtitle>
  <updated>2022-12-05T00:49:39.849Z</updated>
  <generator>vuepress-plugin-feed2</generator>
  <link rel="self" href="https://autumnwhj.github.io/atom.xml"/>
  <link rel="alternate" href="https://autumnwhj.github.io/"/>
  <category term="技术文章"/>
  <category term="构建工具"/>
  <category term="CI/CD"/>
  <category term="CSS"/>
  <category term="Node"/>
  <category term="Vue"/>
  <category term="使用指南"/>
  <category term="PDF"/>
  <category term="我的项目整合"/>
  <category term="实用分享"/>
  <category term="FrontEnd"/>
  <category term="Markdown"/>
  <category term="Tools"/>
  <category term="JavaScript"/>
  <category term="Base64"/>
  <category term="Vuepress"/>
  <category term="我的学习笔记"/>
  <category term="Vue2"/>
  <category term="Vue3"/>
  <category term="Axios"/>
  <contributor>
    <name>Ms.Hope</name>
  </contributor>
  <entry>
    <title type="html">初识Vite</title>
    <id>https://autumnwhj.github.io/posts/technology/built-tool/what-is-vite.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/built-tool/what-is-vite.html"/>
    <updated>2022-12-04T15:00:08.000Z</updated>
    <summary type="html">一个基于浏览器原生 ES Modules 的开发服务器。利用浏览器去解析模块，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="vite是什么" tabindex="-1"> vite是什么？</h2>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f6009e76565b47e59826183525369d88~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<blockquote>
<p>作者尤大: <a href="https://github.com/vitejs/vite" target="_blank" rel="noopener noreferrer">Vite</a>，一个基于浏览器原生 ES Modules 的开发服务器。利用浏览器去解析模块，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。</p>
</blockquote>
<p>有以下特点：<i>Content not supported</i>1、闪电般冷服务启动（就是输入启动command，如npm run dev 启动会很快）<i>Content not supported</i>2、即时热更新HRM （如<a href="https://webpack.docschina.org/guides/hot-module-replacement/" target="_blank" rel="noopener noreferrer">webpack-dev-server</a> 实现的模块热更新）<i>Content not supported</i>3、真正的按需编译<i>Content not supported</i></p>
<h2 id="vite与webpack-有什么不同" tabindex="-1"> vite与webpack 有什么不同？</h2>
<h3 id="webpack" tabindex="-1"> webpack</h3>
<p>Webpack会把所有资源（包括Javascript，图像，字体和CSS等）打包后置于依赖关系中，如：<i>Content not supported</i>在<code>main.js</code>中引入 <code>a.js</code>和<code>b.js</code></p>
<div><pre><code><span>// a.js</span>
<span>const</span> <span>a</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span> <span>return</span> <span>10</span> <span>}</span>
<span>export</span> <span>{</span> a <span>}</span>

<span>// b.js</span>
<span>const</span> <span>b</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span> <span>return</span> <span>20</span> <span>}</span>
<span>export</span> <span>{</span> b <span>}</span>
<span>// c.js</span>
<span>import</span> <span>{</span> a <span>}</span> <span>from</span> <span>'./a'</span>
<span>import</span> <span>{</span> b <span>}</span> <span>from</span> <span>'./b'</span>

<span>const</span> c <span>=</span> <span>return</span> <span>a</span><span>(</span><span>)</span> <span>+</span> <span>b</span><span>(</span><span>)</span>
<span>export</span> <span>{</span> c <span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>经过webpack处理后打包生成<code>bundle.js</code></p>
<div><pre><code><span>// bundle.js</span>
<span>const</span> a <span>=</span> <span>10</span><span>;</span>
<span>const</span> b <span>=</span> <span>20</span><span>;</span>
<span>const</span> c <span>=</span> <span>return</span> a <span>+</span> b<span>;</span>
<span>export</span> <span>{</span> c <span>}</span><span>;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>可以看到bundle.js里面的c模块依赖a和b模块的返回值来计算正确结果，因此如若a模块代码进行了更改，比如<code>a = 30</code> 那么webpack会对<code>bundle.js</code>所有依赖的模块重新打包生成新的<code>bundle.js</code></p>
<div><pre><code><span>//更改a模块后 生成新的bundle.js</span>
<span>// bundle.js</span>
<span>const</span> a <span>=</span> <span>30</span><span>;</span>
<span>const</span> b <span>=</span> <span>20</span><span>;</span>
<span>const</span> c <span>=</span> <span>return</span> a <span>+</span> b<span>;</span>
<span>export</span> <span>{</span> c <span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>**总结：**修改了 bundle 模块中的一个子模块， 整个 bundle 文件都会重新打包然后输出，随着项目的扩大，整个项目依赖的子模块会越来越多，则需要打包的资源也增多了，打包的时间也会变得越来越长。</p>
<h3 id="vite" tabindex="-1"> vite</h3>
<p><strong>重点：不需要打包，省去打包时间</strong><i>Content not supported</i>vite利用浏览器支持的ES Moudle，遇到代码里的import xx  from &quot;xxxxxxx&quot;,就直接去找对应的资源，找到直接引入就完事了。例如，代码里有</p>
<div><pre><code><span>// a.js</span>
<span>const</span> <span>a</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span> <span>return</span> <span>10</span> <span>}</span>
<span>export</span> <span>{</span> a <span>}</span>

<span>// b.js</span>
<span>const</span> <span>b</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span> <span>return</span> <span>20</span> <span>}</span>
<span>export</span> <span>{</span> b <span>}</span>
<span>// c.js</span>
<span>import</span> <span>{</span> a <span>}</span> <span>from</span> <span>'./a'</span>
<span>import</span> <span>{</span> b <span>}</span> <span>from</span> <span>'./b'</span>

<span>const</span> c <span>=</span> <span>return</span> <span>a</span><span>(</span><span>)</span> <span>+</span> <span>b</span><span>(</span><span>)</span>
<span>export</span> <span>{</span> c <span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>使用：<i>Content not supported</i><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa70a0adfe074352b94eb4eeb9a14e75~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><i>Content not supported</i>打开控制台可以看到，模块 a b c 三个模块都被请求并加载了！<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bda46f82c2e8411d85265b087bb523fb~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><i>Content not supported</i>接下来看看 更改代码的时候，热更新怎样的。<i>Content not supported</i>以下只更改a模块里面的代码<i>Content not supported</i><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21f61ac17918427c846701855bf0a826~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><i>Content not supported</i>可以看到b模块不会更新，只更新了与a依赖的模块c以及vue文件（注意，若是c模块未在代码里使用，尽管更改了模块 a b的代码都是不会在控制台看到加载的，这就是<strong>按需引入</strong>）<i>Content not supported</i></p>
<h2 id="vite热更新原理是什么" tabindex="-1"> vite热更新原理是什么？</h2>
<p><i>Content not supported</i><a href="https://segmentfault.com/a/1190000014318751" target="_blank" rel="noopener noreferrer">ES Moudle原理请戳</a><i>Content not supported</i>ES Modules 是用于处理模块的 ECMAScript 标准。 用法：</p>
<div><pre><code><span>//script导入</span>
<span>&lt;</span>script type<span>=</span><span>"module"</span> src<span>=</span><span>"index.js"</span><span>></span><span>&lt;</span><span>/</span>script<span>></span>

<span>// import导入</span>
<span>import</span> Vue <span>from</span> <span>'vue'</span>

<span>// export导出</span>
<span>export</span> <span>default</span> <span>str</span> <span>=></span> str<span>.</span><span>toUpperCase</span><span>(</span><span>)</span>
<span>export</span> <span>{</span>a<span>,</span> b<span>,</span> c<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如在vite项目中：<i>Content not supported</i>当服务启动时，vite便对当前import的文件进行了监听，热更新其实就是当文件有更改时，vite会判断更改的是什么文件，而采用对应的plugin对文件进行重新编译处理，而后返回给浏览器。并且会在文件加上时间戳，避免浏览器因为缓存而不更新文件。如更改helloworld.vue里面的代码，websocker会发送一个指令给vite，根据指令来执行不同的更新操作。<i>Content not supported</i><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c392062f20d84a27bb297e467c7128c4~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<h2 id="vite更新了什么" tabindex="-1"> vite更新了什么？</h2>
<p>官方中文文档： <a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">https://vitejs.dev/</a><i>Content not supported</i>从V1迁移到新版本，最明显的是vue被当成插件plugin抽离出来了，而vite就真真切切成为了一个编译打包工具，新建的时候可以选择需要支持的框架或者单文件</p>
<div><pre><code><span>// 新建一个project</span>
npm init @vitejs<span>/</span>app
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69686e46bfd64b5eaae0adbbb2a07259~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"><i>Content not supported</i>选择一个vue项目，发现根目录下多了个<code>vite.config.js</code>文件，这也是此次更新的一大块内容，比如对于打包，sourceMap，server都变得易配置。<a href="https://vitejs.dev/config/" target="_blank" rel="noopener noreferrer">详情</a><i>Content not supported</i><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9682879a16004338b60d785d062d2a24~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="构建工具" scheme=""/>
    <published>2021-01-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Github Actions的使用</title>
    <id>https://autumnwhj.github.io/posts/technology/ci-cd/how-to-use-github-actions.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/ci-cd/how-to-use-github-actions.html"/>
    <updated>2022-12-05T00:48:45.000Z</updated>
    <summary type="html">GitHub Actions是github的持续集成服务，简单来讲就是使得你的repository可以执行一些自动化的动作</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="什么是github-actions" tabindex="-1"> 什么是Github Actions？</h2>
<blockquote>
<p>Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.</p>
</blockquote>
<p>GitHub Actions是github的持续集成服务，简单来讲就是使得你的repository可以执行一些自动化的动作，例如：</p>
<ol>
<li>每次repository有新的提交或者pr就自动执行自定义好的操作</li>
<li>在repository中定时执行自定义好的操作</li>
</ol>
<p>如在 master 分支上提交了一段代码， GitHub Action 可以自动的帮我部署到我自己的服务器上去，或者它还可以帮我把代码打成镜像，将镜像自动提交到镜像仓库里</p>
<h3 id="术语和约束" tabindex="-1"> 术语和约束</h3>
<p>在介绍使用方式之前我们先来了解下GithubActions的术语,借此了解下一次执行过程的流程.</p>
<ul>
<li>workflow即工作流,一次执行过程.每个workflow用一个配置文件维护.</li>
<li>Job: workflow的分解,可串行存在依赖;可并行</li>
<li>Step: job的分解,即步骤,比如一个step是要给代码做单元测试,那可能会有三个步骤:下载依赖-&gt;测试-&gt;上传结果</li>
<li>actionworkflow最小执行单元.即每个执行步骤中的具体执行任务,我们可以自己定义action,也可使用Github社区定义好的action</li>
<li>Artifact： workflow运行时产生的中间文件.包括日志,测试结果等</li>
<li>Event: 触发workflow的事件</li>
</ul>
<p>Github Action对workflow设有如下使用限制:</p>
<ul>
<li>一个仓库可最多同时开20个workflows;超过20则排队等待</li>
<li>一个workflow下的每个job最多运行6小时,超过直接结束</li>
<li>所有分支下的job根据github级别不同有不同的并行度限制,超过并行度进入队列等待</li>
<li>1小时内最多1000次执行请求,也就是1.5api/1m</li>
</ul>
<p>需要注意,Github对Github Action服务有最终解释权,也就是说乱用可能会被Github限制账户.Github也会生成相关使用统计情况</p>
<h3 id="workflow的触发" tabindex="-1"> workflow的触发</h3>
<p>每个workflow的配置文件都需要定义on字段,它用来描述在何种情况(Event)下触发执行.我们可以定义on多种事件,这样<strong>只要满足其中一个就会被触发</strong>
我们可以将Event分为3类:</p>
<ul>
<li>定时事件:由定时任务触发的事件</li>
<li>手动触发事件: 在actions页面中手动触发的事件</li>
<li>Webhook事件:由github网站的钩子行为触发的事件,通常Git操作都有钩子可以用于触发</li>
</ul>
<h4 id="定时事件" tabindex="-1"> 定时事件</h4>
<p>最简单的事件就是定时事件其定义方式如下:
<code>on:   schedule: - cron:  '*/15 * * * *' </code>
上面定义了一个每隔15分钟执行依次的任务.Github Avtion目前只支持<a href="https://pubs.opengroup.org/onlinepubs/9699919799/utilities/crontab.html#tag_20_25_07" target="_blank" rel="noopener noreferrer">crontab语法定义定时任务</a>
这个事件只会拉取默认分支(一般是master或者main分支,可以在仓库的settings-&gt;branches-&gt;Default branch下修改)的最近一次提交进行执行.</p>
<h4 id="手动触发事件" tabindex="-1"> 手动触发事件</h4>
<p>手动触发事件分为两种:</p>
<ul>
<li>workflow_dispatch 让用在Actions界面中手动触发workflow 当在workflow中定义了workflow_dispatch后管理页面就会允许指定这个workflow被手动执行,执行时默认需要指定分支,如果我们在配置中定义了参数,则手动执行时也会需要填参数.</li>
<li>一个典型例子如下:</li>
</ul>
<div><pre><code>  <span>on</span><span>:</span>
      <span>workflow_dispatch</span><span>:</span>
          <span>inputs</span><span>:</span>
              <span>name</span><span>:</span>
                  <span>description</span><span>:</span> <span>'Person to greet'</span>
                  <span>required</span><span>:</span> <span>true</span>
                  <span>default</span><span>:</span> <span>'Mona the Octocat'</span>
              <span>home</span><span>:</span>
                  <span>description</span><span>:</span> <span>'location'</span>
                  <span>required</span><span>:</span> <span>false</span>
                  <span>default</span><span>:</span> <span>'The Octoverse'</span>

  <span>jobs</span><span>:</span>
      <span>say_hello</span><span>:</span>
          <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
          <span>steps</span><span>:</span>
          <span>-</span> <span>run</span><span>:</span> <span>|</span><span>
              echo "Hello \$\{\{ github.event.inputs.name \}\}!"
              echo "- in \$\{\{ github.event.inputs.home \}\}!"</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>
<li>上面在workflow_dispatch下通过定义inputs设定参数.在jobs中我们则可以在github.event.inputs中取到对应的参数. <strong>注意</strong>如果不定义手动触发事件那么就无法手动触发.</li>
<li>repository_dispatch让用户通过API批量手动执行这个event的主要作用是让其他的程序通过api调用,通过自定义事件类型来驱动执行.这个event对应的workflow必须在默认分支下定义.比如我们定义:</li>
</ul>
<div><pre><code>  <span>on</span><span>:</span>
      <span>repository_dispatch</span><span>:</span>
          <span>types</span><span>:</span> <span>[</span>opened<span>,</span> deleted<span>]</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>然后执行http请求:</p>
<div><pre><code>  <span>curl</span> <span>\</span>
  -X POST <span>\</span>
  -H <span>"Accept: application/vnd.github.v3+json"</span> <span>\</span>
  https://api.github.com/repos/<span>{</span>namespace<span>}</span>/<span>{</span>repo_name<span>}</span>/dispatches <span>\</span>
  -d <span>'{"event_type":"opened"}'</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p>那么就可以被执行了.其中的opened, deleted是用户自定义的事件.</p>
<h4 id="webhook事件" tabindex="-1"> Webhook事件</h4>
<p>Webhook事件是借由Github的webhook事件触发的事件,具体有哪些可以看<a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows#webhook-events" target="_blank" rel="noopener noreferrer">官方文档</a>,本文将只介绍几个常用的和git操作相关的事件.</p>
<ul>
<li>create分支,tag创建时触发</li>
<li>delete分支,tag删除时触发</li>
<li>gollum仓库的wiki创建或者更新时触发</li>
<li>push/pull_requestpush是当有对仓库的push操作时触发;pull_request则是在执行pull request中触发这两个事件可以额外限制:上面的限制都允许使用通配符做匹配,支持的通配符包括:pull_request默认的行为是在merge完成后处理merge后的那次提交中的代码. 我们还可以通过types: [...]字段指定细分事件类型,包括:
<ul>
<li>branches: [...]指定符合条件的分支触发</li>
<li>branches-ignore:[...]指定除符合条件的分之外都触发</li>
<li>tags:[...]指定符合条件的tag触发</li>
<li>tags-ignore:[...]指定除符合条件的tag外都触发</li>
<li>paths:[...]代码中有符合条件的路径就触发(至少有一个存在)</li>
<li>paths-ignore:[...]代码中不存在指定的路径则都触发(至少有一个不存在)</li>
<li>*: 表示匹配0个或多个非/字符</li>
<li>**: 表示匹配0个或多个字符.</li>
<li>?: 表示匹配0个或者一个字符</li>
<li>+: 表示匹配至少一个字符</li>
<li>[]: 表示匹配一个范围内的字符,比如[0-9a-f]表示数字和a到f间的字符可以匹配</li>
<li>!: 在匹配字符串的开头表示否,其他位置没有特殊含义</li>
<li>assigned被分派到某个issue时触发</li>
<li>unassigned删除分派时触发</li>
<li>labeled打标签时触发</li>
<li>unlabeled取消标签时触发</li>
<li>opened创建pull request时触发</li>
<li>edited编辑pull request时触发</li>
<li>closed关闭pull request时触发</li>
<li>reopened重新打开pull request时触发</li>
<li>synchronize同步pull request代码时触发</li>
<li>ready_for_review,pull request处于ready_for_review状态时触发</li>
<li>locked,锁定时触发</li>
<li>unlocked,解锁时触发</li>
<li>review_requested,code review结束时触发</li>
<li>review_request_removedcode review请求被删除时触发</li>
</ul>
</li>
<li>release当执行Github release时触发,使用的代码时release时打tag的代码,类似于pull_request,也可以通过types:[...]来指定细分事件.
<ul>
<li>published公开后执行</li>
<li>unpublished取消公开后执行</li>
<li>created 创建后执行</li>
<li>edited 编辑后执行</li>
<li>deleted 删除后执行</li>
<li>prereleased预发布后执行</li>
<li>released发布后执行</li>
</ul>
</li>
</ul>
<h3 id="模板语法" tabindex="-1"> 模板语法</h3>
<p>我们可以看到上面例子中会有<code>${{ ... }}</code>这样的文字,这是Github Action定义的模板语法,其中...的部分可以是常数,上下文变量,运算符或者预定义的函数调用.</p>
<h4 id="常数" tabindex="-1"> 常数</h4>
<p>模板语法支持所有json支持的简单数据类型,也就是null,boolean,number,string.</p>
<h4 id="上下文变量" tabindex="-1"> 上下文变量</h4>
<p>每次workflow执行都会带上几个上下文变量用于描述自己和传递参数.具体的可以看<a href="https://docs.github.com/en/free-pro-team@latest/actions/reference/context-and-expression-syntax-for-github-actions#contexts" target="_blank" rel="noopener noreferrer">官方文档</a>.这边只介绍几个常用的</p>
<ul>
<li>matrix,执行策略中定义的变量,每次执行每个key只会有一个取值</li>
<li>env,workflow中env定义的变量</li>
<li>github,通常用于获取仓库和分支的信息,比较值得关注的有:
<ul>
<li>github.repository 执行的仓库名,也就是{namespace}/{repo_name},如果只要repo_name,可以使用<code>${GITHUB_REPOSITORY#*}</code></li>
<li>github.ref工作流的分支或tag,分支为refs/heads/&lt;branch_name&gt;格式,tag是refs/tags/&lt;tag_name&gt;格式,如果只要tag名可以使用<code>${GITHUB_REF/refs/tags/}</code></li>
<li><code>${GITHUB_SHA::8}</code>可以用于获得前8位的commit的id值</li>
<li>github.event.inputs由手动事件触发传入的参数</li>
</ul>
</li>
<li>secrets,项目或命名空间定义的账号密码信息,可以在项目的Settings-&gt;Secrets中设置,一般用于上传package或者docker镜像.</li>
</ul>
<h4 id="运算符" tabindex="-1"> 运算符</h4>
<p>Github Action支持如下运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>()</td>
<td>逻辑分组</td>
</tr>
<tr>
<td>[ ]</td>
<td>索引</td>
</tr>
<tr>
<td>.</td>
<td>属性解除参考</td>
</tr>
<tr>
<td>!</td>
<td>非</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于或等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于或等于</td>
</tr>
<tr>
<td>==</td>
<td>等于</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>和</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
</tr>
</tbody>
</table>
<p>可以看到这些运算符解百纳都是用于做谓词的.因此同擦汗给你都与if字段配合使用</p>
<div><pre><code><span>steps</span><span>:</span>
  <span>...</span>
  <span>-</span> <span>name</span><span>:</span> The job has failed
    <span>if</span><span>:</span> $
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>GitHub Action进行的是宽松的等式比较,其原理是将不同类型的数据转换为数字进行比较: | 类型 | 结果 | | ——– | ——————————————– | | null | 0 | | true | 返回 1 | | false | 返回 0 | | 字符串 | 空字符串为0,符合数字格式的为对应数,否则为NaN | | Array | NaN,在为同一实例时才视为相等 | | Object | NaN,在为同一实例时才视为相等 |
注意,类似SQL中的NULL,一个 NaN 与另一个 NaN 的比较不会产生 true.</p>
<h4 id="函数" tabindex="-1"> 函数</h4>
<p>Github Action支持一些内置函数,比较有用的有:</p>
<ul>
<li>contains( search, item ),用于查看序列中是否存在元素</li>
<li>startsWith( searchString, searchValue)/endsWith( searchString, searchValue),用于查看字符串中是否已特定字符串开头或者结尾</li>
<li>format('Hello {0} {1} {2}', 'Mona', 'the', 'Octocat'),类似python中的string.format(),使用模板字符串拼接字符串结果</li>
<li>join( array, optionalSeparator ),类似python中的join,用于拼接数组内容为字符串.</li>
<li>作业状态检查函数success()/always()/cancelled()/failure(),这类函数返回的是bool型数据,因此一般作为谓词与if联合使用</li>
</ul>
<h3 id="执行策略" tabindex="-1"> 执行策略</h3>
<p>执行策略在一级关键字strategy中定义.它用于规定执行器执行workflow的行为.主要包括</p>
<ul>
<li>matrix,定义执行矩阵,执行器会遍历矩阵执行作业,matrix中定义的值在执行时可以从上下文matrix中获取</li>
<li>max-parallel(int)最大并行度</li>
<li>fail-fast(bool,true)快速失败,任何matrix作业失败,GitHub将取消所有进行中的作业</li>
</ul>
<p>上面的例子中我们定义了python-version: [3.6, 3.7, 3.8, 3.9],这也就意味着执行器会以matrix.python-version为3.6, 3.7, 3.8, 3.9分别执行一次.</p>
<h3 id="使用社区定义好的action" tabindex="-1"> 使用社区定义好的action</h3>
<p>可以将action理解为执行过程的封装,使用的人只需要知道它的用法而不需要知道它具体怎么实现的,我们可以自己定义action也可以使用外面定义好的action就像我们编程调用函数一样.社区的actions可以在<a href="https://github.com/marketplace?type=actions" target="_blank" rel="noopener noreferrer">marketplace</a>找到
上面的例子中我们就使用了一个外部定义好的action:actions/setup-python@v2
使用action用关键字uses来声明,如果action需要参数可以使用with来传入参数</p>
<div><pre><code> <span>-</span> <span>name</span><span>:</span> Set up Python \$\<span>{</span>\<span>{</span> matrix.python<span>-</span>version \<span>}</span>\<span>}</span>
    <span>uses</span><span>:</span> actions/setup<span>-</span>python@v2
    <span>with</span><span>:</span>
        <span>python-version</span><span>:</span> \$\<span>{</span>\<span>{</span> matrix.python<span>-</span>version \<span>}</span>\<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>比较常用的action有:</p>
<ul>
<li><a href="https://github.com/actions/setup-python" target="_blank" rel="noopener noreferrer">actions/setup-python@v2</a>,自动设置python环境</li>
<li><a href="https://github.com/marketplace/actions/setup-node-js-environment" target="_blank" rel="noopener noreferrer">actions/setup-node@v1</a>,设置node环境</li>
<li><a href="https://github.com/marketplace/actions/setup-go-environment" target="_blank" rel="noopener noreferrer">actions/setup-go@v2</a>,设置golang环境</li>
<li><a href="https://github.com/marketplace/actions/docker-build-push-action" target="_blank" rel="noopener noreferrer">docker/build-push-action@v1</a>,登录docker 镜像仓库</li>
<li><a href="https://github.com/marketplace/actions/upload-a-build-artifact" target="_blank" rel="noopener noreferrer">actions/upload-artifact@v2</a>,将Artifact发送到workflow的管理界面用于下载</li>
<li><a href="https://github.com/marketplace/actions/sentry-release" target="_blank" rel="noopener noreferrer">getsentry/action-release@v1</a>,发送消息到sentry</li>
</ul>
<h3 id="jobs间的依赖关系" tabindex="-1"> jobs间的依赖关系</h3>
<p>当我们单纯定义job时这些job会并行执行,而如果希望明确其中的依赖关系,则可以使用关键字needs.needs后的值可以是字符串也可以是字符串为元素的列表</p>
<div><pre><code><span>jobs</span><span>:</span>
  <span>build_and_pub_to_pypi</span><span>:</span>
    <span>...</span>
  <span>docker-build</span><span>:</span>
    <span>needs</span><span>:</span> build_and_pub_to_pypi

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="定时提醒到企业微信" tabindex="-1"> 定时提醒到企业微信</h2>
<p>在项目根目录文件夹<code>.github下面的workflows下创建xx.yml</code>写入如下代码：</p>
<div><pre><code><span>name</span><span>:</span> 3点几啦！喝杯奶茶先啦

<span># 触发条件</span>
<span>on</span><span>:</span> 
  <span># 触发条件1：main分支有提交时候触发</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> main
  <span># 触发条件2：定时任务，每天15点触发</span>
  <span>schedule</span><span>:</span>
    <span>-</span> <span>cron</span><span>:</span> <span>"0 15 * * *"</span>
<span>jobs</span><span>:</span>
  <span>drink_tea</span><span>:</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span>-</span> <span>name</span><span>:</span> 这就给大家发消息
        <span>run</span><span>:</span> <span>|</span><span>
          curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key='yourKey'' \
          -H 'Content-Type: application/json' \
          -d '
          {
                "msgtype": "text",
                "text": {
                    "content": "都别给我愣着，赶紧滴干饭🍚"
                }
          }'</span>


</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>为方便测试，这里有两个触发条件，一个是代码main分支有更新时触发，一个是每天的15点触发。</p>
<div><pre><code>schedule中cron的值 "* * * * <span>*"表示如下</span>
┌───────────── 分钟 (0 <span>-</span> 59)
│ ┌───────────── 小时 (0 <span>-</span> 23)
│ │ ┌───────────── 日 (1 <span>-</span> 31)
│ │ │ ┌───────────── 月 (1 <span>-</span> 12 或 JAN<span>-</span>DEC)
│ │ │ │ ┌───────────── 星期 (0 <span>-</span> 6 或 SUN<span>-</span>SAT)
│ │ │ │ │
│ │ │ │ │
│ │ │ │ │
* * * * *

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>而后打开Actions就会开始运行任务。
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51c9b975f1994302b48b1037f92f6bbc~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png">
怎么看任务执行成功？ 绿了，且运行没报错
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/43ad475bd7aa4bc9b57f6bf1d3b7e3ef~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png">
这时候企业微信就收到了干饭🍚的消息。（还可以帮行政小姐姐设置一些繁琐的每天自动提醒工作哟🐶）
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/501b2c18f29d48f7897e4addc4b7f03d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<h2 id="定时自动提交commit" tabindex="-1"> 定时自动提交commit</h2>
<p>github上很简单的一个自动绿的项目，通过定时任务git方式向repository提交代码，使得 yml代码如下：
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/35f422e471094f2c99cb238b5a075bd0~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<div><pre><code><span>name</span><span>:</span> ci

<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> master
<span>#  schedule:</span>
<span>#    - cron: "0 0 * * *"</span>

<span>jobs</span><span>:</span>
  <span>autogreen</span><span>:</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span>-</span> <span>name</span><span>:</span> Clone repository
        <span>uses</span><span>:</span> actions/checkout@v2
      <span>-</span> <span>name</span><span>:</span> Auto green
        <span>run</span><span>:</span> <span>|</span><span>
          git config --local user.email "xxx@qq.com"
          git config --local user.name "Autumn"
          git remote set-url origin https://`${{ github.actor }}:`${{ secrets.GITHUB_TOKEN }}@github.com/`${{ github.repository }}
          git pull --rebase
          git commit --allow-empty -m "a commit a day keeps your girlfriend away"
          git push</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="前端ci-cd-pipeline" tabindex="-1"> 前端CI/CD pipeline</h2>
<p>持续集成（Continuous Integration）是持续部署CD的第一步，持续集成可以理解为在分支代码更新时，自动运行eslint代码风格检查，单元测试以提前发现代码的错误，防止打包后导致系统崩溃等一系列问题。
这里通过Github Actions建立持续集成工作流workflow来实现前端项目的自动化测试以及发布到COS对象存储。
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/330c589390c5443b8ae4bd84ff88c50b~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<div><pre><code><span>name</span><span>:</span> Lint the code<span>,</span> run tests<span>,</span> build and push OSS
<span>on</span><span>:</span>
  <span>push</span><span>:</span>
    <span>branches</span><span>:</span>
      <span>-</span> develop
<span>jobs</span><span>:</span>
  <span>lint</span><span>:</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span>-</span> <span>uses</span><span>:</span> actions/checkout@v2
      <span>-</span> <span>uses</span><span>:</span> actions/setup<span>-</span>node@v1
        <span>with</span><span>:</span>
          <span>node-version</span><span>:</span> <span>'14.x'</span>

      <span>-</span> <span>name</span><span>:</span> Install dependencies
        <span>uses</span><span>:</span> bahmutov/npm<span>-</span>install@v1

      <span>-</span> <span>name</span><span>:</span> Run linter
        <span>run</span><span>:</span> yarn lint
  <span>test</span><span>:</span>
    <span>needs</span><span>:</span> lint
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span>-</span> <span>uses</span><span>:</span> actions/checkout@v2
      <span>-</span> <span>uses</span><span>:</span> actions/setup<span>-</span>node@v1
        <span>with</span><span>:</span>
          <span>node-version</span><span>:</span> <span>'14.x'</span>

      <span>-</span> <span>name</span><span>:</span> Install dependencies
        <span>uses</span><span>:</span> bahmutov/npm<span>-</span>install@v1

      <span>-</span> <span>name</span><span>:</span> Run test<span>:</span>unit
        <span>run</span><span>:</span> yarn test<span>:</span>unit
  <span>build</span><span>:</span>
    <span>needs</span><span>:</span> <span>[</span>lint<span>,</span> test<span>]</span>
    <span>runs-on</span><span>:</span> ubuntu<span>-</span>latest
    <span>steps</span><span>:</span>
      <span>-</span> <span>uses</span><span>:</span> actions/checkout@master
      <span>-</span> <span>uses</span><span>:</span> actions/setup<span>-</span>node@v2
        <span>with</span><span>:</span>
          <span>node-version</span><span>:</span> <span>'14.18.0'</span>

      <span>-</span> <span>name</span><span>:</span> Install dependencies
        <span>uses</span><span>:</span> bahmutov/npm<span>-</span>install@v1

      <span>-</span> <span>name</span><span>:</span> Build
        <span>run</span><span>:</span> yarn build

      <span>-</span> <span>name</span><span>:</span> Get current time
        <span>uses</span><span>:</span> 1466587594/get<span>-</span>current<span>-</span>time@v2
        <span>id</span><span>:</span> current<span>-</span>time
        <span>with</span><span>:</span>
          <span>format</span><span>:</span> YYYYMMDDHHmmss
          <span>utcOffset</span><span>:</span> <span>'+08:00'</span>
      <span>-</span> <span>name</span><span>:</span> Use current time
        <span>env</span><span>:</span>
          <span>F_TIME</span><span>:</span> <span>'`${{ steps.current-time.outputs.formattedTime }}'</span>
        <span>run</span><span>:</span> echo "NOW=$F_TIME" <span>></span><span>></span> $GITHUB_ENV

      <span>-</span> <span>name</span><span>:</span> Get repository and branch name
        <span>shell</span><span>:</span> bash
        <span>run</span><span>:</span> <span>|</span><span>
          echo "BRANCH=$(echo `${GITHUB_REF#refs/heads/}` | tr / -)" >> $GITHUB_ENV
          echo "REPOSITORY=$(echo `${GITHUB_REPOSITORY#threfo/}` | tr / -)" >> $GITHUB_ENV
          echo "PRBRANCH=$(echo `${GITHUB_HEAD_REF} | tr / -)" >> $GITHUB_ENV</span>

      <span>-</span> <span>name</span><span>:</span> Upload COS
        <span>uses</span><span>:</span> zkqiang/tencent<span>-</span>cos<span>-</span>action@v0.1.0
        <span>with</span><span>:</span>
          <span>args</span><span>:</span> upload <span>-</span>r ./dist/ /`$<span>{</span><span>{</span> env.REPOSITORY <span>}</span><span>}</span>/`$<span>{</span><span>{</span> env.BRANCH <span>}</span><span>}</span>/default
          <span>secret_id</span><span>:</span> `$<span>{</span><span>{</span> env.SECRET_ID <span>}</span><span>}</span>
          <span>secret_key</span><span>:</span> `$<span>{</span><span>{</span> env.SECRET_KEY <span>}</span><span>}</span>
          bucket<span>:</span>`$<span>{</span><span>{</span> env.BUCKET <span>}</span><span>}</span>
          region<span>:</span>`$<span>{</span><span>{</span> env.REGION <span>}</span><span>}</span>

      <span>-</span> <span>name</span><span>:</span> Upload COS Backup release
        <span>uses</span><span>:</span> zkqiang/tencent<span>-</span>cos<span>-</span>action@v0.1.0
        <span>with</span><span>:</span>
          <span>args</span><span>:</span> upload <span>-</span>r ./dist/ /`$<span>{</span><span>{</span> env.REPOSITORY <span>}</span><span>}</span>/`$<span>{</span><span>{</span> env.BRANCH <span>}</span><span>}</span>/`$<span>{</span><span>{</span> env.NOW <span>}</span><span>}</span>
          <span>secret_id</span><span>:</span> `$<span>{</span><span>{</span> env.SECRET_ID <span>}</span><span>}</span>
          <span>secret_key</span><span>:</span> `$<span>{</span><span>{</span> env.SECRET_KEY <span>}</span><span>}</span>
          bucket<span>:</span>`$<span>{</span><span>{</span> env.BUCKET <span>}</span><span>}</span>
          region<span>:</span>`$<span>{</span><span>{</span> env.REGION <span>}</span><span>}</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="总结" tabindex="-1"> 总结</h2>
<p>以上是Github Action初探，其实觉得Github Action在CI/CD上是大有可为的，CI\CD ：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。在公司中我看着文档用Github Action做了一些小尝试，后续也会分享出来给大家。以上有误的欢迎dalao们指正。
本次demo代码地址：<a href="https://github.com/AutumnWhj/GithubAction" target="_blank" rel="noopener noreferrer">https://github.com/AutumnWhj/GithubAction</a></p>
<h2 id="参考" tabindex="-1"> 参考</h2>
<p><a href="https://docs.github.com/en/actions" target="_blank" rel="noopener noreferrer">GitHub Actions文档</a>
<a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener noreferrer">GitHub Actions 入门教程---阮一峰</a>
<a href="https://blog.hszofficial.site/introduce/2020/11/30/%E4%BD%BF%E7%94%A8GithubActions%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E4%BD%9C%E6%B5%81/" target="_blank" rel="noopener noreferrer">使用GithubActions自动化工作流</a>​</p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="CI/CD" scheme=""/>
    <published>2021-09-11T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">CSS动画-实现元素依次淡出</title>
    <id>https://autumnwhj.github.io/posts/technology/css/fade-in-out.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/css/fade-in-out.html"/>
    <updated>2022-12-04T15:00:08.000Z</updated>
    <summary type="html">公司网站动画要求不高，因此不必要上Lottie，用纯css就好，选啥，大伙得视自己公司项目而定</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="背景" tabindex="-1"> 背景</h2>
<p>在查看webpack打包出来的bundle时，发现一个叫Lottie的js占用的体积还挺大,并且有好几个诡异的json文件，于是想着能不能优化，然后去项目里搜，发现好几个弹窗里的动画实现用到了这玩意，而且lottie制作的动画一个json文件就很大了，什么炫酷的动画竟然要引入Lottie来解决？
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c9470ff925a41da8a596ecab1138f15~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png">
咋一看，这不挺简单的吗？ 就淡入加延时的效果，再加上气泡的实现。下面就来实现一波吧。</p>
<blockquote>
<p>公司网站动画要求不高，因此不必要上Lottie，用纯css就好，选啥，大伙得视自己公司项目而定。</p>
</blockquote>
<p>demo：<a href="https://codepen.io/jlin2/pen/mdWGrvP" target="_blank" rel="noopener noreferrer">https://codepen.io/jlin2/pen/mdWGrvP</a></p>
<h2 id="css动画animation" tabindex="-1"> css动画animation</h2>
<p>MDN：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/animation" target="_blank" rel="noopener noreferrer">https://developer.mozilla.org/en-US/docs/Web/CSS/animation</a></p>
<div><pre><code><span>animation</span><span>:</span> 3s ease-in 1s infinite reverse both running slidein<span>;</span>
animation是以下动画属性的简写：
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>可选值</th>
</tr>
</thead>
<tbody>
<tr>
<td>animation-name</td>
<td>指定动画的名称</td>
<td>跟@keyframes [name]相同</td>
</tr>
<tr>
<td>animation-duration</td>
<td>整个动画完成的时间</td>
<td>1s 2s 3s ........</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>动画以怎样的速度从开始到完成</td>
<td>linear：匀速，ease-in：加速，ease-out：减速 cubic-bezier函数：自定义速度模式</td>
</tr>
<tr>
<td>animation-delay</td>
<td>动画开始的延时</td>
<td>1s 2s 3s ........</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>动画重复的次数</td>
<td>infinite：无限播放，1，2，3....</td>
</tr>
<tr>
<td>animation-direction</td>
<td>指定动画播放的方向</td>
<td>normal、alternate、reverse、alternate-reverse</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>指定动画结束播放时的状态</td>
<td>forwards、backwards、both......</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>指定动画在播放过程中的状态，比如暂停、播放</td>
<td>paused：暂停，running：运行</td>
</tr>
</tbody>
</table>
<h2 id="淡入实现fadeinup" tabindex="-1"> 淡入实现fadeInUp</h2>
<p>定义一个动画帧<code>@keyframes fadeInUp</code>，运用到相关页面元素上就可。</p>
<div><pre><code><span>.fadeInUp</span> <span>{</span>
  <span>animation-name</span><span>:</span> fadeInUp<span>;</span>
  <span>animation-duration</span><span>:</span> 1s<span>;</span>
  <span>animation-iteration-count</span><span>:</span>1<span>;</span>
<span>}</span>
<span><span>@keyframes</span> fadeInUp</span> <span>{</span>
  <span>from</span> <span>{</span>
    <span>opacity</span><span>:</span> 0<span>;</span>
    <span>transform</span><span>:</span> <span>translate3d</span><span>(</span>0<span>,</span> 100%<span>,</span> 0<span>)</span><span>;</span>
  <span>}</span>
  <span>to</span> <span>{</span>
    <span>opacity</span><span>:</span> 1<span>;</span>
    <span>transform</span><span>:</span> <span>translate3d</span><span>(</span>0<span>,</span> 0<span>,</span> 0<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="延时delay" tabindex="-1"> 延时delay</h2>
<p>要求页面不同元素执行动画的时序不同，因此用<code>animation-delay</code>进行控制，可具体到毫秒 ,<code>animation-fill-mode</code>设置为<code>backwards</code>让动画回到第一帧状态。</p>
<div><pre><code><span>.delay1000</span> <span>{</span>
  <span>animation-delay</span><span>:</span> 1s<span>;</span>
  <span>animation-fill-mode</span><span>:</span> backwards<span>;</span>
<span>}</span>
<span>.delay2000</span> <span>{</span>
  <span>animation-delay</span><span>:</span> 2s<span>;</span>
  <span>animation-fill-mode</span><span>:</span> backwards<span>;</span>
<span>}</span>
<span>.delay3000</span> <span>{</span>
  <span>animation-delay</span><span>:</span> 3s<span>;</span>
  <span>animation-fill-mode</span><span>:</span> backwards<span>;</span>
<span>}</span>
<span>.delay4000</span> <span>{</span>
  <span>animation-delay</span><span>:</span> 4s<span>;</span>
  <span>animation-fill-mode</span><span>:</span> backwards<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="聊天气泡的实现" tabindex="-1"> 聊天气泡的实现</h2>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/101d698d29a84d698dbf642ba7859f0e~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p>
<h3 id="实现三角小箭头" tabindex="-1"> 实现三角小箭头</h3>
<p>众所周知，实现三角形可以用border的transparent来实现。这里因为要显示边框的颜色，因此得实现两个小三角形，一个三角形用边框颜色填充，另外一个三角形跟矩形气泡同色，再偏移与边框宽度相等的px。</p>
<div><pre><code><span>.bubble</span><span>{</span>
  <span>position</span><span>:</span> relative<span>;</span>
  <span>padding</span><span>:</span> 10px 20px<span>;</span>
  <span>border</span><span>:</span> 1px solid #c83c23<span>;</span>
  <span>border-radius</span><span>:</span> 12px<span>;</span>
  <span>margin-bottom</span><span>:</span> 24px<span>;</span>
  <span>background</span><span>:</span> #fff<span>;</span>
<span>}</span>
<span>.bubble::before</span><span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 20%<span>;</span>
<span>}</span>
<span>.bubble::after</span><span>{</span>
  <span>content</span><span>:</span> <span>''</span><span>;</span>
  <span>position</span><span>:</span> absolute<span>;</span>
  <span>top</span><span>:</span> 20%<span>;</span>
<span>}</span>
<span>.bubble-left::before</span><span>{</span>
  <span>left</span><span>:</span> -12px<span>;</span>
  <span>border-top</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-bottom</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-right</span><span>:</span>12px solid #c83c23<span>;</span>
<span>}</span>
<span>.bubble-left::after</span><span>{</span>
  <span>left</span><span>:</span> -10px<span>;</span>
  <span>border-top</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-bottom</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-right</span><span>:</span>12px solid #fff<span>;</span>
<span>}</span>
<span>.bubble-right::before</span><span>{</span>
  <span>right</span><span>:</span> -12px<span>;</span>
  <span>border-top</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-bottom</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-left</span><span>:</span>12px solid #c83c23<span>;</span>
<span>}</span>
<span>.bubble-right::after</span><span>{</span>
  <span>right</span><span>:</span> -10px<span>;</span>
  <span>border-top</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-bottom</span><span>:</span> 8px solid transparent<span>;</span>
  <span>border-left</span><span>:</span>12px solid #fff<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="x偏移的弹出" tabindex="-1"> X偏移的弹出</h3>
<p>更改keyframes中 to的X偏移量</p>
<div><pre><code><span><span>@keyframes</span> fadeInUp</span> <span>{</span>
  <span>from</span> <span>{</span>
    <span>opacity</span><span>:</span> 0<span>;</span>
    <span>transform</span><span>:</span> <span>translate3d</span><span>(</span>0<span>,</span> 100%<span>,</span> 0<span>)</span><span>;</span>
  <span>}</span>
  <span>to</span> <span>{</span>
    <span>opacity</span><span>:</span> 1<span>;</span>
    <span>transform</span><span>:</span> <span>translate3d</span><span>(</span>150<span>,</span> 0<span>,</span> 0<span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>.offet-left</span> <span>{</span>
  <span>transform</span><span>:</span> <span>translateX</span><span>(</span>-150px<span>)</span>
<span>}</span>
<span>.offet-right</span> <span>{</span>
  <span>transform</span><span>:</span> <span>translateX</span><span>(</span>150px<span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="背景图片也得淡入" tabindex="-1"> 背景图片也得淡入？</h2>
<p>这时要用load事件监听图片加载完之后，再显示气泡的动画就行。</p>
<h2 id="最终效果" tabindex="-1"> 最终效果：</h2>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5a4985839c4c4964b5642a000703f539~tplv-k3u1fbpfcp-watermark.image" alt="2021-06-10 16.51.13.gif"></p>
<h2 id="总结" tabindex="-1"> 总结：</h2>
<p>demo：<a href="https://codepen.io/jlin2/pen/mdWGrvP" target="_blank" rel="noopener noreferrer">https://codepen.io/jlin2/pen/mdWGrvP</a></p>
<p>开发中基本很少要写动画效果，自己趁此机会熟悉了animation属性，其实有些同事一看到动画效果的交互都喜欢直接叫UI设计师用Lottie制作好，前端拿来直接用，省事；但是觉得还是要考虑具体的项目，像本司都是管理后台，基本都没动画，更别说酷炫的动画了。</p>
<p>用css写，把Lottie的json文件删除了足足6MB，感觉轻快了许多。</p>
<p>另外Lottie真的挺好用的，在UI大佬要非常炫酷动画时候，简直前端是不加班利器，附上地址：<a href="https://airbnb.io/lottie/#/" target="_blank" rel="noopener noreferrer">https://airbnb.io/lottie/#/</a></p>
<p>好用的动画实现库：https://animate.style/</p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="CSS" scheme=""/>
    <published>2021-06-20T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">V8的垃圾回收机制♻️</title>
    <id>https://autumnwhj.github.io/posts/technology/node/v8-garbage.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/node/v8-garbage.html"/>
    <updated>2022-12-04T15:00:08.000Z</updated>
    <summary type="html">在内存管理上往往是分为新生代内存空间与老生代内存空间来进行高效的内存管理。</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="v8内存管理" tabindex="-1"> V8内存管理</h2>
<p>在Node中，通过JavaScript只能使用部分内存，64位系统下约为1.5G，32位系统下约为0.7G，因此但凡要做一个读取2G文件的操作，都会导致内存溢出，因此要深入了解V8的内存管理机制，才能避免问题并能更好的管理内存。</p>
<p>V8为何要限制内存大小？表层原因，最初V8为浏览器设计的，不太可能遇到大内存的场景，在此应用上绰绰有余；深层原因是V8的垃圾回收机制。</p>
<p>提一嘴， 在V8中，JavaScript对象是通过堆来存储的，堆的物理结构是数组，而逻辑结构是一颗树。</p>
<h2 id="v8垃圾回收机制" tabindex="-1"> V8垃圾回收机制</h2>
<h3 id="内存分代" tabindex="-1"> 内存分代</h3>
<p>在内存管理上往往是分为新生代内存空间与老生代内存空间来进行高效的内存管理。</p>
<h3 id="新生代——scavenge算法" tabindex="-1"> 新生代——Scavenge算法</h3>
<p>主要采用Cheney算法，一种采用复制复制方式实现的垃圾回收算法，它将内存一分为二，每一部分空间叫semispace。处于使用状态的空间叫From，闲置状态的是TO，核心是通过将存活对象在这两个semispace空间进行复制。类比GC是一个过滤筛，每次GC把From中的存活对象筛出来，扔到TO这个盘子，然后反转，把TO这个盘子当做From，用筛子又筛一遍，看看还剩下哪些存活对象。详细步骤如下：</p>
<ul>
<li><strong>划分内存空间</strong>：将内存分为From（使用状态）、To（闲置状态）两块空间；</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f6e33498ea241b7b62d432de82c14ee~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<ul>
<li><strong>垃圾回收进行时：</strong> 垃圾回收开始时，会先检查From里面的对象是存活状态和还是非存活状态，存活对象会被复制到To空间，To空间保存着这些存活对象，非存活对象就被释放掉；</li>
<li><strong>反复过筛：</strong> 当Scavenge回收完成后，Form和To会进行翻转(即上次的To变成了From，From变成了To)，下一次Scavenge回收仍然是对From空间里面的对象进行检查，重复2步骤，</li>
</ul>

<ul>
<li><strong>晋升：</strong> 若From中的存活对象多次检查仍然未被释放，会被认为是存活周期较长的对象，而晋升到老生代内存中去，或者To空间已被占用超过25%了，那也晋升到老生代中去。</li>
</ul>
<h3 id="老生代——mark-sweep-mark-compact算法" tabindex="-1"> 老生代——Mark-sweep &amp; Mark-compact算法</h3>
<p>老生代即在存储中存活较久以及占用内存比较大的对象，因此<code>Scavenge</code>反复复制的算法就不适用了，一是大部分是存活的对象过筛的效率降低，而是浪费一半的内存空间。</p>
<p>因此老生代使用<code>Mark-sweep</code>标记清除算法对对象进行标记，而未标记📌的就会在GC过程中给清除掉，上面说了堆的物理结构是数组，经过<code>Mark-sweep</code>把对象清除后，空间就会变得不连续，再新的对象进来时不好做内存分配，因此Mark-compack算法就是用来整理堆空间的。详细步骤如下：</p>
<ul>
<li><strong>标记清除：</strong> <code>Mark-sweep</code>标记清除，标记阶段只标记存活的对象，其他未做标记的会在清除阶段给清除掉；</li>
</ul>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/df3510f48cd44e42a5c4583ee1e0aed9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<ul>
<li><strong>空间整理：</strong> 清除掉的对象会在内存形成零零散散分布的内存块，为了后续插入内存大的对象有足够空间，<code>Mark-sweep</code>后会进行<code>Mark-compact</code>把死亡对象的空间都整理在存活对象的右边👉，清理时直接把右边👉的空间都清空就行；</li>
<li><strong>增量清除：</strong> 若碰到内存占用大时，一次垃圾回收会造成全停顿时间较长，因此在标记阶段使用增量标记Incremental Marking，可边标记边执行应用逻辑，尽可能少的阻塞js逻辑的执行。（虽然用增量标记使得垃圾回收的整个过程耗时增加，但是对于程序的执）</li>
</ul>
<h2 id="避免内存泄露" tabindex="-1"> 避免内存泄露</h2>
<h3 id="全局变量" tabindex="-1"> 全局变量</h3>
<p>在全局作用域中定义变量时，会自动挂载到window对象上，垃圾回收时，该对象被认为有被window对象引用，因此不会被标记清楚掉，一直存在内存中。</p>
<div><pre><code>如在控制台输入
var a = 100
function b() { console.log('b') }

window.a = 100
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>解决</strong>：尽可能不用全局变量，实在使用在程序执行完前要把他设为null, 如<code>a=null</code></p>
<h3 id="监听器-计时器" tabindex="-1"> 监听器，计时器</h3>
<div><pre><code>监听某一个事件
window.addEventListener()

计时
const a = 0;
const b = function() {
    a++
};
window.setInterval(b, 1000);
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>解决</strong>：用<code>window.removeEventListener()</code>移除监听器，<code>window.clearInterval()</code>移除计时器，可在程序中手动移除，或在程序执行完前移除，如vue<code>beforeDestroy</code>组件销毁前时把监听，定时器移除。</p>
<h3 id="闭包" tabindex="-1"> 闭包</h3>
<p>内层函数中访问到其外层函数的作用域形成了闭包，少用闭包</p>
<div><pre><code>function a() {
    let b = 'b';
    return function c() {
        console.log(b)
    }
}
c里面会一直对b有引用
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="dom绑定" tabindex="-1"> dom绑定</h3>
<div><pre><code>let btn = $('#btn')
btn.onclick = (event) => { console.log(event.target) }
btn的引用：
1、btn.onclick ——>  btn
2、event.target ——> btn
btn = null 只是清楚 btn.onclick 的引用，但是一直存在引用event.target === btn的dom。
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>解决</strong>：移除dom元素，<code>document.body.removeChild(btn)</code></p>
<h3 id="弱引用weakmap" tabindex="-1"> 弱引用WeakMap</h3>
<p><code>弱引用</code>，它的键名所引用的对象均是弱引用，弱引用是指垃圾回收的过程中不会将键名对该对象的引用考虑进去，只要所引用的对象没有其他的引用了，垃圾回收机制就会释放该对象所占用的内存</p>
<div><pre><code>// Map是强引用，key的值为null,map还是保存着对key的引用，会存在内存泄露问题
let map = new Map()
let key = new Array(1000000).fill(0)
map.set(key, 1)
key = null

// WeapMap是弱引用，key的值为null时，会自动delete掉weak中的key键值
let weak = new WeakMap()
let key = new Array(1000000).fill(0)
weak.set(key, 1)
key = null
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>Map强引用无法清理内存测试：</strong><br>
以下使用Map发现heapUsed执行 <code>key=null</code>时，还是没办法清理掉内存的。</p>
<div><pre><code>node --expose-gc
global.gc() // 手动执行gc垃圾回收
process.memoryUsage() // 查看当前内存使用
let map = new Map()
let key = new Array(1000000).fill(0)
map.set(key, 1)
global.gc()
process.memoryUsage()
// 清理内存 对比发现清不掉
key = null
global.gc()
process.memoryUsage()
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="参考" tabindex="-1"> 参考</h2>
<p>《深入浅出Nodejs》</p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="Node" scheme=""/>
    <published>2021-01-21T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">vue cli项目打包优化，我能做的就这些了</title>
    <id>https://autumnwhj.github.io/posts/technology/vue/vuecli-build.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/vue/vuecli-build.html"/>
    <updated>2022-12-04T15:00:08.000Z</updated>
    <summary type="html">vue cli本地构建打包也大约5min,到线上腾讯云docker构建打包全过程需要16~20min。因此不仅极大影响开发效率，也大大延迟了给测试交付的时间。</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="背景" tabindex="-1"> 背景</h2>
<p>因为公司的前端项目在打包构建方面时间属实长得离谱，冷启动大约5min，本地构建打包也大约5min,到线上腾讯云docker构建打包全过程需要16~20min。因此不仅极大影响开发效率，也大大延迟了给测试交付的时间。</p>
<h2 id="优化思路" tabindex="-1"> 优化思路</h2>
<ul>
<li>了解项目当前webpack配置</li>
<li>构建相关优化</li>
<li>打包体积相关优化</li>
<li>docker相关优化</li>
</ul>
<h2 id="分析工具" tabindex="-1"> 分析工具</h2>
<h3 id="speed-measure-webpack-plugin" tabindex="-1"> speed-measure-webpack-plugin</h3>
<h4 id="介绍" tabindex="-1"> 介绍：</h4>
<p><a href="https://www.npmjs.com/package/speed-measure-webpack-plugin" target="_blank" rel="noopener noreferrer">speed-measure-webpack-plugin npm</a></p>
<blockquote>
<p>The first step to optimising your webpack build speed, is to know where to focus your attention.
This plugin measures your webpack build speed, giving an output like this:</p>
</blockquote>
<p>通过smp输出的分析可以清楚的了解到webpack构建过程中，每一阶段的loader以及plugin的工作花费的时间。</p>
<h4 id="使用方式" tabindex="-1"> 使用方式：</h4>
<div><pre><code># Yarn
yarn add <span>-</span><span>D</span> speed<span>-</span>measure<span>-</span>webpack<span>-</span>plugin

<span>const</span> SpeedMeasurePlugin <span>=</span> <span>require</span><span>(</span><span>'speed-measure-webpack-plugin'</span><span>)</span>
module<span>.</span>exports <span>=</span> <span>{</span>
  <span>chainWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    config
      <span>.</span><span>plugin</span><span>(</span><span>'speed-measure-webpack-plugin'</span><span>)</span>
      <span>.</span><span>use</span><span>(</span>SpeedMeasurePlugin<span>)</span>
      <span>.</span><span>end</span><span>(</span><span>)</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在本项目中使用其他的使用都会报error，但是以上的用法似乎不会区分plugin与loader的使用，甚至没有其他plugin的使用情况信息，迷惑~。</p>
<h3 id="webpack-bundle-analyzer" tabindex="-1"> webpack-bundle-analyzer</h3>
<h4 id="介绍-1" tabindex="-1"> 介绍：</h4>
<p><a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener noreferrer">webpack-bundle-analyzer npm</a>
用来分析webapck构建打包后的文件，如分包情况，占用体积等参数的分析。</p>
<h4 id="使用方式-1" tabindex="-1"> 使用方式：</h4>
<div><pre><code># Yarn
yarn add <span>-</span><span>D</span> webpack<span>-</span>bundle<span>-</span>analyzer

<span>const</span> BundleAnalyzerPlugin <span>=</span> <span>require</span><span>(</span><span>'webpack-bundle-analyzer'</span><span>)</span><span>.</span>BundleAnalyzerPlugin<span>;</span>
module<span>.</span>exports <span>=</span> <span>{</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>new</span> <span>BundleAnalyzerPlugin</span><span>(</span><span>)</span>
  <span>]</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>但是在vue-cli中有report命令可以直接调用，然后去dist打包目录打开report.html。</p>
<div><pre><code>vue<span>-</span>cli<span>-</span>service build <span>--</span>report
or
vue<span>-</span>cli<span>-</span>service build <span>--</span>report<span>-</span>json
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h2 id="查看vue-cli当前webpack配置" tabindex="-1"> 查看vue-cli当前webpack配置</h2>
<h3 id="介绍-2" tabindex="-1"> 介绍</h3>
<p>vue-cli脚手架会有webpack的很多默认行为，因此我们得知道基于vue-cli的项目，当前的webpack都配置了啥，然后才能做针对性的分析与优化。</p>
<blockquote>
<p><code>vue-cli-service</code> 暴露了 <code>inspect</code> 命令用于审查解析好的 webpack 配置。那个全局的 <code>vue</code> 可执行程序同样提供了 <code>inspect</code> 命令，这个命令只是简单的把 <code>vue-cli-service inspect</code> 代理到了你的项目中。</p>
</blockquote>
<h3 id="使用方式-2" tabindex="-1"> 使用方式：</h3>
<div><pre><code>#根据mode，分别生成开发环境、生产环境的配置
vue inspect <span>--</span>mode production <span>></span> output<span>.</span>js
#输入命令后，在根目录会生产一个output<span>.</span>js文件
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>如果<code>vue command not found</code>的错可以全局安装注册一下vue命令<code>npm install -g vue-cli</code></p>
<h2 id="优化尝试" tabindex="-1"> 优化尝试</h2>
<h3 id="hard-source-webpack-plugin加缓存" tabindex="-1"> hard-source-webpack-plugin加缓存</h3>
<h4 id="介绍-3" tabindex="-1"> 介绍</h4>
<p><a href="https://www.npmjs.com/package/hard-source-webpack-plugin" target="_blank" rel="noopener noreferrer">hard-source-webpack-plugin npm</a></p>
<blockquote>
<p>HardSourceWebpackPlugin is a plugin for webpack to provide an intermediate caching step for modules. In order to see results, you'll need to run webpack twice with this plugin: the first build will take the normal amount of time. The second build will be signficantly faster.</p>
</blockquote>
<p>在启动项目时会针对项目生成缓存，若是项目无package或其他变化，下次就不用花费时间重新构建，直接复用缓存。</p>
<h4 id="使用方式-3" tabindex="-1"> 使用方式：</h4>
<div><pre><code>#yarn
yarn add <span>-</span><span>D</span> hard<span>-</span>source<span>-</span>webpack<span>-</span>plugin

<span>const</span> HardSourceWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'hard-source-webpack-plugin'</span><span>)</span>
module<span>.</span>exports <span>=</span> <span>{</span>
	<span>configureWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
  	config<span>.</span>plugin<span>.</span><span>push</span><span>(</span>
    	<span>// 为模块提供中间缓存，缓存路径是：node_modules/.cache/hard-source</span>
      <span>// solve Configuration changes are not being detected</span>
      <span>new</span> <span>HardSourceWebpackPlugin</span><span>(</span><span>{</span>
        <span>root</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>,</span>
        <span>directories</span><span>:</span> <span>[</span><span>]</span><span>,</span>
        <span>environmentHash</span><span>:</span> <span>{</span>
          <span>root</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>,</span>
          <span>directories</span><span>:</span> <span>[</span><span>]</span><span>,</span>
          <span>files</span><span>:</span> <span>[</span><span>'package.json'</span><span>,</span> <span>'yarn.lock'</span><span>]</span>
        <span>}</span>
      <span>}</span><span>)</span>
      <span>// 配置了files的主要原因是解决配置更新，cache不生效了的问题，配置后有包的变化，plugin会重新构建一部分cache</span>
    <span>)</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="注意" tabindex="-1"> 注意：</h4>
<p><code>Could not freeze : Cannot read property 'hash' of undefined</code> 删除node_modules/.cache后，重新启动项目，产生这个问题的原因可能是异步加载模块时编译产生的错误，或者加上这个可解决：</p>
<div><pre><code>new HardSourceWebpackPlugin.ExcludeModulePlugin([
 {
   // HardSource works with mini-css-extract-plugin but due to how
   // mini-css emits assets, assets are not emitted on repeated builds with
   // mini-css and hard-source together. Ignoring the mini-css loader
   // modules, but not the other css loader modules, excludes the modules
   // that mini-css needs rebuilt to output assets every time.
   test: /mini-css-extract-plugin[\\/]dist[\\/]loader/
 }
])

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="缩小文件检索解析范围" tabindex="-1"> 缩小文件检索解析范围</h3>
<p>为避免无用的检索与递归遍历，可以使用alias指定引用时候的模块，noParse，对不依赖本地代码的第三方依赖不进行解析。</p>
<div><pre><code><span>// 定义getAliasPath方法，把相对路径转换成绝对路径</span>
<span>const</span> <span>getAliasPath</span> <span>=</span> <span>dir</span> <span>=></span> <span>join</span><span>(</span>__dirname<span>,</span> dir<span>)</span>
module<span>.</span>exports <span>=</span> <span>{</span>
	<span>configureWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    config<span>.</span>module<span>.</span>noParse <span>=</span> <span><span>/</span><span>^(vu|vue-router|vuex|vuex-router-sync|lodash|echarts|axios|element-ui)$</span><span>/</span></span>
  <span>}</span>
  <span>chainWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    <span>// 添加别名</span>
    config<span>.</span>resolve<span>.</span>alias
      <span>.</span><span>set</span><span>(</span><span>'@'</span><span>,</span> <span>getAliasPath</span><span>(</span><span>'src'</span><span>)</span><span>)</span>
      <span>.</span><span>set</span><span>(</span><span>'assets'</span><span>,</span> <span>getAliasPath</span><span>(</span><span>'src/assets'</span><span>)</span><span>)</span>
      <span>.</span><span>set</span><span>(</span><span>'utils'</span><span>,</span> <span>getAliasPath</span><span>(</span><span>'src/utils'</span><span>)</span><span>)</span>
      <span>.</span><span>set</span><span>(</span><span>'views'</span><span>,</span> <span>getAliasPath</span><span>(</span><span>'src/views'</span><span>)</span><span>)</span>
      <span>.</span><span>set</span><span>(</span><span>'components'</span><span>,</span> <span>getAliasPath</span><span>(</span><span>'src/components'</span><span>)</span><span>)</span>
	<span>}</span>
  <span>// 生产环境禁用eslint</span>
  <span>lintOnSave</span><span>:</span> <span>!</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>!==</span> <span>'production'</span><span>,</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="减少打包体积" tabindex="-1"> 减少打包体积</h3>
<h4 id="image-webpack-plugin-图片压缩" tabindex="-1"> image-webpack-plugin 图片压缩</h4>
<p>对图片像素要求没很极致的，这个压缩还是可以使用的，压缩率肉眼看起来感觉是没太大区别。
这里注意一下，我没有对svg进行压缩，原因是压缩的svg,再通过构建时被打包成base64时，生成的base64会有问题，无法访问。</p>
<div><pre><code>module<span>.</span>exports <span>=</span> <span>{</span>
  <span>chainWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
   <span>// 对图片进行压缩</span>
    config<span>.</span>module
      <span>.</span><span>rule</span><span>(</span><span>'images'</span><span>)</span>
      <span>.</span><span>test</span><span>(</span><span><span>/</span><span>\.(png|jpe?g|gif)(\?.*)?$</span><span>/</span></span><span>)</span>
      <span>.</span><span>use</span><span>(</span><span>'image-webpack-loader'</span><span>)</span>
      <span>.</span><span>loader</span><span>(</span><span>'image-webpack-loader'</span><span>)</span>
      <span>.</span><span>options</span><span>(</span><span>{</span> <span>bypassOnDebug</span><span>:</span> <span>true</span> <span>}</span><span>)</span>
      <span>.</span><span>end</span><span>(</span><span>)</span>
	<span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="uglifyjsplugin删除console-注释-不建议" tabindex="-1"> UglifyJsPlugin删除console 注释（不建议）</h4>
<p>uglifyJsPlugin 用来对js文件进行压缩，减小js文件的大小。其会拖慢webpack的编译速度，建议开发环境时关闭，生产环境再将其打开。
更建议规范团队成员的代码上去解决。</p>
<div><pre><code>#yarn
yarn add <span>-</span><span>D</span> uglifyjs<span>-</span>webpack<span>-</span>plugin

<span>const</span> UglifyJsPlugin <span>=</span> <span>require</span><span>(</span><span>'uglifyjs-webpack-plugin'</span><span>)</span>

module<span>.</span>exports <span>=</span> <span>{</span>
	<span>configureWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
  	config<span>.</span>plugin<span>.</span><span>push</span><span>(</span>
    	<span>new</span> <span>UglifyJsPlugin</span><span>(</span><span>{</span>
        <span>uglifyOptions</span><span>:</span> <span>{</span>
          <span>// 删除注释</span>
          <span>output</span><span>:</span> <span>{</span>
            <span>comments</span><span>:</span> <span>false</span>
          <span>}</span><span>,</span>
          <span>// 删除console debugger 删除警告</span>
          <span>compress</span><span>:</span> <span>{</span>
            <span>warnings</span><span>:</span> <span>false</span><span>,</span>
            <span>drop_console</span><span>:</span> <span>true</span><span>,</span> <span>//console</span>
            <span>drop_debugger</span><span>:</span> <span>false</span><span>,</span>
            <span>pure_funcs</span><span>:</span> <span>[</span><span>'console.log'</span><span>]</span> <span>//移除console</span>
          <span>}</span>
        <span>}</span><span>,</span>
        <span>sourceMap</span><span>:</span> <span>false</span><span>,</span>
        <span>parallel</span><span>:</span> <span>true</span> <span>//使用多进程并行运行来提高构建速度。默认并发运行数：os.cpus().length - 1。</span>
      <span>}</span><span>)</span>
    <span>)</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="terser-删除console" tabindex="-1"> terser 删除console</h3>
<p>terser仍在维护，而UglifyJs无人维护了，terser功能上比后者强大很多</p>
<div><pre><code><span>chainWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
config<span>.</span><span>when</span><span>(</span>isProd<span>,</span> <span>config</span> <span>=></span> <span>{</span>
  config<span>.</span>optimization<span>.</span><span>runtimeChunk</span><span>(</span><span>'single'</span><span>)</span>
  <span>// 配置删除 console.log</span>
  config<span>.</span>optimization<span>.</span><span>minimizer</span><span>(</span><span>'terser'</span><span>)</span><span>.</span><span>tap</span><span>(</span><span>args</span> <span>=></span> <span>{</span>
    <span>// remove debugger</span>
    args<span>[</span><span>0</span><span>]</span><span>.</span>terserOptions<span>.</span>compress<span>.</span>drop_debugger <span>=</span> <span>true</span>
    <span>// 移除 console.log</span>
    args<span>[</span><span>0</span><span>]</span><span>.</span>terserOptions<span>.</span>compress<span>.</span>pure_funcs <span>=</span> <span>[</span><span>'console.log'</span><span>]</span>
    <span>// 去掉注释 如果需要看chunk-vendors公共部分插件，可以注释掉就可以看到注释了</span>
    args<span>[</span><span>0</span><span>]</span><span>.</span>terserOptions<span>.</span>output <span>=</span> <span>{</span>
      <span>comments</span><span>:</span> <span>false</span>
    <span>}</span>
    <span>return</span> args
  <span>}</span><span>)</span>
<span>}</span><span>)</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="dll动态链接库" tabindex="-1"> DLL动态链接库</h3>
<p>这个插件是在一个额外的独立的 webpack 设置中创建一个只有 dll 的 bundle(dll-only-bundle)。 这个插件会生成一个名为 manifest.json 的文件，这个文件是用来让 DLLReferencePlugin 映射到相关的依赖上去的。</p>
<blockquote>
<p>可以简单理解为把一些依赖从项目的bundle中拆分出去，通过映射关系用请求来加载。我认为拆分出去之后不会再在项目里被解析，因此对构建，体积都是有所帮助的。</p>
</blockquote>
<p>配置DllPlugin,可以分为下面几个步骤：</p>
<ol>
<li>新建webpack.dll.config.js文件(其他命名都可以)，配置需要拆分的插件；</li>
<li>在package.json文件中新建一条命令来专门打包，<code>&quot;build:dll&quot;:&quot;webpack --config webpack.dll.config.js&quot;</code>; 运行该命令；</li>
<li>在vue.config.js 文件中配置<code>DllReferencePlugin</code>,主要把dll引用到需要预编译的依赖；</li>
<li>在index.html手动引入拆分的bundle包（放到cdn的话会更好）</li>
</ol>
<p>安装：</p>
<div><pre><code>#yarn 
yarn add webpack<span>-</span>cli@<span>^</span><span>3.2</span><span>.3</span> add<span>-</span>asset<span>-</span>html<span>-</span>webpack<span>-</span>plugin@<span>^</span><span>3.1</span><span>.3</span> clean<span>-</span>webpack<span>-</span>plugin@<span>^</span><span>1.0</span><span>.1</span> <span>--</span>dev
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><div><pre><code><span>// webpack.dll.config.js</span>
<span>/* eslint-disable @typescript-eslint/no-var-requires */</span>
<span>const</span> path <span>=</span> <span>require</span><span>(</span><span>'path'</span><span>)</span>
<span>const</span> webpack <span>=</span> <span>require</span><span>(</span><span>'webpack'</span><span>)</span>
<span>const</span> CleanWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>'clean-webpack-plugin'</span><span>)</span>
<span>// dll文件存放的目录</span>
<span>const</span> dllPath <span>=</span> <span>'public/vendor'</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>entry</span><span>:</span> <span>{</span>
    <span>// 需要提取的库文件</span>
    <span>vendor</span><span>:</span> <span>[</span><span>'vue'</span><span>,</span> <span>'vue-router'</span><span>,</span> <span>'vuex'</span><span>]</span><span>,</span>
    <span>utils</span><span>:</span> <span>[</span><span>'axios'</span><span>,</span> <span>'lodash'</span><span>]</span>
  <span>}</span><span>,</span>
  <span>output</span><span>:</span> <span>{</span>
    <span>path</span><span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> dllPath<span>)</span><span>,</span>
    <span>filename</span><span>:</span> <span>'[name].dll.js'</span><span>,</span>
    <span>// vendor.dll.js中暴露出的全局变量名</span>
    <span>// 保持与 webpack.DllPlugin 中名称一致</span>
    <span>library</span><span>:</span> <span>'[name]_[hash]'</span>
  <span>}</span><span>,</span>
  <span>plugins</span><span>:</span> <span>[</span>
    <span>// 清除之前的dll文件</span>
    <span>new</span> <span>CleanWebpackPlugin</span><span>(</span><span>[</span><span>'*.*'</span><span>]</span><span>,</span> <span>{</span>
      <span>root</span><span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> dllPath<span>)</span>
    <span>}</span><span>)</span><span>,</span>
    <span>// manifest.json 描述动态链接库包含了哪些内容</span>
    <span>new</span> <span>webpack<span>.</span>DllPlugin</span><span>(</span><span>{</span>
      <span>path</span><span>:</span> path<span>.</span><span>join</span><span>(</span>__dirname<span>,</span> dllPath<span>,</span> <span>'[name]-manifest.json'</span><span>)</span><span>,</span>
      <span>// 保持与 output.library 中名称一致</span>
      <span>name</span><span>:</span> <span>'[name]_[hash]'</span><span>,</span>
      <span>context</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span>
    <span>}</span><span>)</span>
  <span>]</span>
<span>12</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>在<code>vue.config.js plugin</code>中使用</p>
<div><pre><code>config<span>.</span>plugin<span>.</span><span>push</span><span>(</span>
  <span>new</span> <span>DllReferencePlugin</span><span>(</span><span>{</span>
    <span>context</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>,</span>
    <span>manifest</span><span>:</span> <span>require</span><span>(</span><span>'./public/vendor/vendor-manifest.json'</span><span>)</span>
  <span>}</span><span>)</span><span>,</span>
    <span>new</span> <span>DllReferencePlugin</span><span>(</span><span>{</span>
    <span>context</span><span>:</span> process<span>.</span><span>cwd</span><span>(</span><span>)</span><span>,</span>
    <span>manifest</span><span>:</span> <span>require</span><span>(</span><span>'./public/vendor/utils-manifest.json'</span><span>)</span>
  <span>}</span><span>)</span><span>,</span>
    <span>// 将 dll 注入到 生成的 html 模板中</span>
    <span>new</span> <span>AddAssetHtmlPlugin</span><span>(</span><span>{</span>
    <span>// dll文件位置</span>
    <span>filepath</span><span>:</span> <span>getPath</span><span>(</span><span>'./public/vendor/*.js'</span><span>)</span><span>,</span>
    <span>// dll 引用路径</span>
    <span>publicPath</span><span>:</span> <span>'./vendor'</span><span>,</span>
    <span>// dll最终输出的目录</span>
    <span>outputPath</span><span>:</span> <span>'./vendor'</span>
  <span>}</span><span>)</span>
<span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="splitchunks-分割代码" tabindex="-1"> splitChunks 分割代码</h3>
<p><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener noreferrer">split-chunks-plugin webpack</a></p>
<ul>
<li>chunks: 表示哪些代码需要优化，有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为async</li>
<li>minSize: 表示在压缩前的最小模块大小，默认为30000</li>
<li>minChunks: 表示被引用次数，默认为1</li>
<li>maxAsyncRequests: 按需加载时候最大的并行请求数，默认为5</li>
<li>maxInitialRequests: 一个入口最大的并行请求数，默认为3</li>
<li>automaticNameDelimiter: 命名连接符</li>
<li>name: 拆分出来块的名字，默认由块名和hash值自动生成</li>
<li>cacheGroups: 缓存组。缓存组的属性除上面所有属性外，还有test, priority, reuseExistingChunk
<ul>
<li>test: 用于控制哪些模块被这个缓存组匹配到</li>
<li>priority: 缓存组打包的先后优先级</li>
<li>reuseExistingChunk: 如果当前代码块包含的模块已经有了，就不在产生一个新的代码块</li>
</ul>
</li>
</ul>
<div><pre><code>config<span>.</span>optimization <span>=</span> <span>{</span>
  <span>runtimeChunk</span><span>:</span> <span>'single'</span><span>,</span>
  <span>splitChunks</span><span>:</span> <span>{</span>
    <span>chunks</span><span>:</span> <span>'all'</span><span>,</span> <span>// 表示哪些代码需要优化，有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为async</span>
    <span>maxInitialRequests</span><span>:</span> <span>Infinity</span><span>,</span> <span>// 按需加载时候最大的并行请求数，默认为5</span>
    <span>minSize</span><span>:</span> <span>30000</span><span>,</span> <span>// 依赖包超过300000bit将被单独打包</span>
    <span>// 缓存组</span>
    <span>// priority: 缓存组打包的先后优先级</span>
    <span>// minChunks: 表示被引用次数，默认为1</span>
    <span>cacheGroups</span><span>:</span> <span>{</span>
      <span>//公共模块</span>
      <span>commons</span><span>:</span> <span>{</span>
        <span>name</span><span>:</span> <span>'chunk-commons'</span><span>,</span>
        <span>test</span><span>:</span> <span>resolve</span><span>(</span><span>'src'</span><span>)</span><span>,</span> <span>// can customize your rules</span>
        <span>minSize</span><span>:</span> <span>100</span><span>,</span> <span>//大小超过100个字节</span>
        <span>minChunks</span><span>:</span> <span>3</span><span>,</span> <span>//  minimum common number</span>
        <span>priority</span><span>:</span> <span>5</span><span>,</span>
        <span>reuseExistingChunk</span><span>:</span> <span>true</span>
      <span>}</span><span>,</span>
      <span>// 第三方库</span>
      <span>libs</span><span>:</span> <span>{</span>
        <span>name</span><span>:</span> <span>'chunk-libs'</span><span>,</span>
        <span>test</span><span>:</span> <span><span>/</span><span>[\\/]node_modules[\\/]</span><span>/</span></span><span>,</span>
        <span>priority</span><span>:</span> <span>10</span><span>,</span>
        <span>chunks</span><span>:</span> <span>'initial'</span><span>,</span> <span>// only package third parties that are initially dependent</span>
        <span>reuseExistingChunk</span><span>:</span> <span>true</span><span>,</span>
        <span>enforce</span><span>:</span> <span>true</span>
      <span>}</span><span>,</span>
      <span>echarts</span><span>:</span> <span>{</span>
        <span>name</span><span>:</span> <span>'chunk-echarts'</span><span>,</span>
        <span>test</span><span>:</span> <span><span>/</span><span>[\\/]node_modules[\\/]echarts[\\/]</span><span>/</span></span><span>,</span>
        <span>chunks</span><span>:</span> <span>'all'</span><span>,</span>
        <span>priority</span><span>:</span> <span>12</span><span>,</span>
        <span>reuseExistingChunk</span><span>:</span> <span>true</span><span>,</span>
        <span>enforce</span><span>:</span> <span>true</span>
      <span>}</span>
    <span>}</span>
  <span>}</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="compression-webpack-plugin-gzip打包" tabindex="-1"> compression-webpack-plugin gzip打包</h3>
<p>用法：<a href="https://www.npmjs.com/package/compression-webpack-plugin" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/compression-webpack-plugin</a></p>
<div><pre><code><span>const</span> CompressionWebpackPlugin <span>=</span> <span>require</span><span>(</span><span>"compression-webpack-plugin"</span><span>)</span><span>;</span>

<span>const</span> <span>IS_PROD</span> <span>=</span> <span>[</span><span>"production"</span><span>,</span> <span>"prod"</span><span>]</span><span>.</span><span>includes</span><span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span><span>)</span><span>;</span>
<span>const</span> productionGzipExtensions <span>=</span> <span><span>/</span><span>.(js|css|json|txt|html|ico|svg)(?.*)?$</span><span>/</span><span>i</span></span><span>;</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>configureWebpack</span><span>:</span> <span>config</span> <span>=></span> <span>{</span>
    <span>const</span> plugins <span>=</span> <span>[</span><span>]</span><span>;</span>
    <span>if</span> <span>(</span><span>IS_PROD</span><span>)</span> <span>{</span>
      plugins<span>.</span><span>push</span><span>(</span>
        <span>new</span> <span>CompressionWebpackPlugin</span><span>(</span><span>{</span>
          <span>filename</span><span>:</span> <span>"[path].gz[query]"</span><span>,</span>
          <span>algorithm</span><span>:</span> <span>"gzip"</span><span>,</span>
          <span>test</span><span>:</span> productionGzipExtensions<span>,</span>
          <span>threshold</span><span>:</span> <span>10240</span><span>,</span>
          <span>minRatio</span><span>:</span> <span>0.8</span>
        <span>}</span><span>)</span>
      <span>)</span><span>;</span>
    <span>}</span>
    config<span>.</span>plugins <span>=</span> <span>[</span><span>...</span>config<span>.</span>plugins<span>,</span> <span>...</span>plugins<span>]</span><span>;</span>
  <span>}</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="terser-webpack-plugin-多线程压缩js" tabindex="-1"> terser-webpack-plugin 多线程压缩js</h3>
<p>用法：<a href="https://www.npmjs.com/package/terser-webpack-plugin" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/terser-webpack-plugin</a></p>
<p>vue-cli3默认的webpack有此优化</p>
<h3 id="externals-cdn" tabindex="-1"> externals &amp; cdn</h3>
<p>externals 配置选项提供了「从输出的 bundle 中排除依赖」的方法。防止将某些 import 的包(package)打包到 bundle 中，而是在运行时(runtime)再去从外部获取这些扩展依赖(external dependencies)。</p>
<p>这个属性很好理解，而且使用起来也非常方便，非常的nice! 最简单的方法是配置名称，当然你也可以编写一些复杂的配置<a href="https://www.webpackjs.com/configuration/externals/" target="_blank" rel="noopener noreferrer">官方文档</a></p>
<div><pre><code><span>//vue.config.js</span>
<span>...</span>
<span>configureWebpack</span><span>:</span><span>{</span>
	<span>externals</span><span>:</span> <span>{</span>
      <span>"vue"</span><span>:</span> <span>"Vue"</span><span>,</span>
      <span>"element-ui"</span><span>:</span> <span>"ELEMENT"</span>
    <span>}</span><span>,</span>
<span>}</span>
<span>// 然后在 index.html 手动cdn引入(或者用插件自动添加)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="总结" tabindex="-1"> 总结</h2>
<p>以上是我在公司项目做的一些小优化，对其他项目不一定适用，甚至使用上也不是最优，但目前对本项目很大程度上还是有帮助的。更多webpack优化的思路，我附上个思维导图吧。(仅供学习，记录📝)
<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dbedc66bbafc46ecbf24566346569527~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p>
<h2 id="其他" tabindex="-1"> 其他</h2>
<p><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener noreferrer">Vue CLI</a></p>
<p><a href="https://github.com/fncheng/blog/issues/26" target="_blank" rel="noopener noreferrer">vue-cli中的configureWebpack设置</a></p>
<p><a href="https://shanyue.tech/frontend-engineering/docker.html#" target="_blank" rel="noopener noreferrer">如何使用 docker 部署前端项目</a></p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="Vue" scheme=""/>
    <published>2021-05-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">幻灯片页</title>
    <id>https://autumnwhj.github.io/slide.html</id>
    <link href="https://autumnwhj.github.io/slide.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <content type="html"><![CDATA[<CountView></CountView>

<Presentation id="presentation-1a96284c" data-code="%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20--%3E%0A%0A%23%23%20%E5%B9%BB%E7%81%AF%E7%89%87%E6%BC%94%E7%A4%BA%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%B9%BB%E7%81%AF%E7%89%87%E6%BC%94%E7%A4%BA%E4%B8%8E%E5%90%84%E7%A7%8D%E5%B0%8F%E8%B4%B4%E5%A3%AB%E3%80%82%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%3E%20%E4%BD%9C%E8%80%85%20Mr.Hope.%20%E8%AF%B7%E6%BB%9A%E5%8A%A8%E9%BC%A0%E6%A0%87%E6%BB%9A%E8%BD%AE%E8%BF%9B%E5%85%A5%E4%B8%8B%E4%B8%80%E9%A1%B5%0A%0A---%0A%0A%23%23%20%E6%A0%87%E6%B3%A8%E5%B9%BB%E7%81%AF%E7%89%87%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%5B%F0%9F%91%87%5D(%23%2F1%2F1)%0A%0A--%0A%0A%23%23%20%E6%A0%87%E6%B3%A8%E5%B9%BB%E7%81%AF%E7%89%87%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%E4%BD%BF%E7%94%A8%20%60---%60%20%E6%A0%87%E6%B3%A8%E6%B0%B4%E5%B9%B3%E5%B9%BB%E7%81%AF%E7%89%87%0A%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in%22%20--%3E%0A%0A%E5%9C%A8%E6%B0%B4%E5%B9%B3%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20%60--%60%20%E5%88%86%E5%89%B2%E5%9E%82%E7%9B%B4%E5%B9%BB%E7%81%AF%E7%89%87%0A%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in%22%20--%3E%0A%0A%E4%BD%BF%E7%94%A8%20%60%3C!--%20.slide%3A%20...%20--%3E%60%20%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%0A%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in%22%20--%3E%0A%0A%E4%BD%BF%E7%94%A8%20%60%3C!--%20.element%3A%20...%20--%3E%60%20%E5%9C%A8%E5%89%8D%E4%B8%80%E4%B8%AA%20HTML%20%E5%85%83%E7%B4%A0%E4%B8%8A%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%0A%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in%22%20--%3E%0A%0A---%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%23%23%23%20%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%20H3%0A%0A%E6%A0%87%E9%A2%98%E9%BB%98%E8%AE%A4%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E4%B8%BA%E5%A4%A7%E5%86%99%E3%80%82%0A%0A%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E6%9C%89%E7%9D%80%20**%E7%B2%97%E4%BD%93**%2C%20_%E6%96%9C%E4%BD%93_%2C%20~~%E5%88%A0%E9%99%A4%E7%BA%BF~~%20%E6%96%87%E5%AD%97%E5%B9%B6%E5%8C%85%E5%90%AB%20%5B%E4%B8%80%E4%B8%AA%E9%93%BE%E6%8E%A5%5D(https%3A%2F%2Fmrhope.site)%20%E7%9A%84%E6%AE%B5%E8%90%BD%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%AE%83%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E3%80%82%E6%89%80%E4%BB%A5%E4%BD%A0%E6%97%A0%E9%9C%80%E6%8B%85%E5%BF%83%E5%AE%83%E7%9A%84%E9%95%BF%E5%BA%A6%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%E5%88%97%E8%A1%A8%E9%BB%98%E8%AE%A4%E4%B8%BA%20%60inline-block%60%0A%0A-%20%E9%A1%B9%E7%9B%AE%0A-%20%E9%A1%B9%E7%9B%AE%0A-%20%E9%A1%B9%E7%9B%AE%0A%0A1.%20%E9%A1%B9%E7%9B%AE%201%0A1.%20%E9%A1%B9%E7%9B%AE%202%0A1.%20%E9%A1%B9%E7%9B%AE%203%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%E5%9C%A8%E4%BD%A0%E5%90%AF%E7%94%A8%20%60highlight%60%20%E6%8F%92%E4%BB%B6%E5%90%8E%EF%BC%8C%E4%BB%A3%E7%A0%81%E5%9D%97%E4%BC%9A%E8%87%AA%E5%8A%A8%E9%AB%98%E4%BA%AE%E3%80%82%0A%0A%60%60%60js%0Aconst%20a%20%3D%201%3B%0A%60%60%60%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%E5%9C%A8%E4%BD%A0%E5%90%AF%E7%94%A8%20%60math%60%20%E6%8F%92%E4%BB%B6%E5%90%8E%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20TEX%20%E6%A0%BC%E5%BC%8F%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E3%80%82%0A%0A%24%24%0AJ(%5Ctheta_0%2C%5Ctheta_1)%20%3D%20%5Csum_%7Bi%3D0%7D%0A%24%24%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20Markdown%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E4%BD%BF%E7%94%A8%20Markdown%20%E8%AF%AD%E6%B3%95%E7%9A%84%E5%90%84%E7%A7%8D%E6%A0%87%E8%AE%B0.%0A%0A%E2%9A%A0**%E8%AF%B7%E6%B3%A8%E6%84%8F**%3A%20%E8%A1%A8%E6%A0%BC%E5%92%8C%E5%88%86%E5%89%B2%E7%BA%BF%EF%BC%8C%E4%BB%A5%E5%8F%8A%E6%89%80%E6%9C%89%E4%B8%8D%E5%9C%A8%20Markdown%20%E6%A0%87%E5%87%86%E8%AF%AD%E6%B3%95%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9%E5%9D%87%E4%B8%8D%E5%8F%97%E6%94%AF%E6%8C%81%E3%80%82%0A%0A---%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%B8%83%E5%B1%80%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20%20--%3E%0A%0A%23%23%20%E5%B8%83%E5%B1%80%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%F0%9F%91%86%20%60r-fit-text%60%20class%20%E4%BC%9A%E8%AE%A9%E6%96%87%E5%AD%97%E5%9C%A8%E4%B8%8D%E8%B6%85%E5%87%BA%E5%B9%BB%E7%81%AF%E7%89%87%E8%8C%83%E5%9B%B4%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%B0%BD%E5%8F%AF%E8%83%BD%E5%A4%A7%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20%20--%3E%0A%0A%23%23%20%E5%B8%83%E5%B1%80%0A%0A!%5BLogo%5D(%2Flogo.svg)%0A%0A%3C!--%20.element%3A%20class%3D%22r-stretch%22%20--%3E%0A%0A%F0%9F%91%86%20%60r-stretch%60%20class%20%E5%B8%AE%E5%8A%A9%E4%BD%A0%E6%8E%A7%E5%88%B6%E6%B3%A8%E5%85%A5%E5%9B%BE%E7%89%87%E6%88%96%E8%A7%86%E9%A2%91%E7%9A%84%E5%A4%A7%E5%B0%8F%EF%BC%8C%E4%BD%BF%E5%AE%83%E4%BB%AC%E5%A1%AB%E5%85%85%E6%BB%A1%E5%B9%BB%E7%81%AF%E7%89%87%E5%9E%82%E7%9B%B4%E6%96%B9%E5%90%91%E4%B8%8A%E7%9A%84%E5%89%A9%E4%BD%99%E7%A9%BA%E9%97%B4%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20data-background-color%3D%22rgb(70%2C%2070%2C%20255)%22%20--%3E%0A%0A%23%23%20%E5%B8%83%E5%B1%80%0A%0A%23%23%23%20%E8%83%8C%E6%99%AF%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%90%91%E7%89%B9%E5%AE%9A%E5%B9%BB%E7%81%AF%E7%89%87%E6%B7%BB%E5%8A%A0%20%60data-background%60%20%E5%B1%9E%E6%80%A7%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B9%BB%E7%81%AF%E7%89%87%E8%83%8C%E6%99%AF.%0A%0A---%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%E7%94%A8%E4%BA%8E%E9%AB%98%E4%BA%AE%E6%88%96%E6%98%BE%E9%9A%90%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%E3%80%82%0A%0A%E4%BD%A0%E9%9C%80%E8%A6%81%E5%9C%A8%E5%85%83%E7%B4%A0%E4%B8%8A%E6%B7%BB%E5%8A%A0%20%60fragment%60%20%E5%92%8C%E5%8A%A8%E7%94%BB%20class%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%23%23%23%20%E5%8A%A8%E7%94%BB%20class%0A%0A-%20%60fade-in%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in%22%20--%3E%0A%0A-%20%60fade-out%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-out%22%20--%3E%0A%0A-%20%60fade-up%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-up%22%20--%3E%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20%60fade-down%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-down%22%20--%3E%0A%0A-%20%60fade-left%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-left%22%20--%3E%0A%0A-%20%60fade-right%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-right%22%20--%3E%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20%60fade-in-then-out%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in-then-out%22%20--%3E%0A%0A-%20%60fade-in-then-semi-out%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20fade-in-then-semi-out%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%23%23%23%20%E5%8A%A8%E7%94%BB%20class%0A%0A-%20%60grow%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20grow%22%20--%3E%0A%0A-%20%60shrink%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20shrink%22%20--%3E%0A%0A-%20%60strike%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20strike%22%20--%3E%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20%60highlight-red%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-red%22%20--%3E%0A%0A-%20%60highlight-green%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-green%22%20--%3E%0A%0A-%20%60highlight-blue%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-blue%22%20--%3E%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20%60highlight-current-red%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-current-red%22%20--%3E%0A%0A-%20%60highlight-current-green%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-current-green%22%20--%3E%0A%0A-%20%60highlight-current-blue%60%0A%3C!--%20.element%3A%20class%3D%22fragment%20highlight-current-blue%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%23%23%23%20%E5%A4%9A%E4%B8%AA%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%8C%89%E7%85%A7%E9%A1%BA%E5%BA%8F%E5%8C%85%E8%A3%B9%E4%B8%80%E4%B8%AA%20HTML%20%E5%85%83%E7%B4%A0%E4%BD%BF%E5%85%B6%E6%8B%A5%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%3Cspan%20class%3D%22fragment%20fade-in%22%3E%0A%20%20%3Cspan%20class%3D%22fragment%20highlight-red%22%3E%0A%20%20%20%20%3Cspan%20class%3D%22fragment%20fade-out%22%3E%0A%20%20%20%20%20%20%E6%B8%90%E5%85%A5%20%3E%20%E5%8F%98%E7%BA%A2%20%3E%20%E6%B8%90%E5%87%BA%0A%20%20%20%20%3C%2Fspan%3E%0A%20%20%3C%2Fspan%3E%0A%3C%2Fspan%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%A8%E7%94%BB%E7%89%87%E6%AE%B5%0A%0A%23%23%23%20%E9%A1%BA%E5%BA%8F%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20%60data-fragment-index%60%20%E5%B1%9E%E6%80%A7%E6%94%B9%E5%8F%98%E5%85%83%E7%B4%A0%E7%9A%84%E5%8A%A8%E7%94%BB%E9%A1%BA%E5%BA%8F%E3%80%82%0A%0A%E4%B8%8D%E5%90%8C%E5%85%83%E7%B4%A0%E5%8F%AF%E4%BB%A5%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84%E5%8A%A8%E7%94%BB%E9%A1%BA%E5%BA%8F%E3%80%82%0A%0A-%20%E6%9C%80%E5%90%8E%E6%98%BE%E7%A4%BA%0A%3C!--%20.element%3A%20class%3D%22fragment%22%20data-fragment-index%3D%223%22--%3E%0A%0A-%20%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%BE%E7%A4%BA%0A%3C!--%20.element%3A%20class%3D%22fragment%22%20data-fragment-index%3D%222%22--%3E%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%BE%E7%A4%BA%0A%3C!--%20.element%3A%20class%3D%22fragment%22%20data-fragment-index%3D%221%22--%3E%0A%0A-%20%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%BE%E7%A4%BA%0A%3C!--%20.element%3A%20class%3D%22fragment%22%20data-fragment-index%3D%222%22--%3E%0A%0A---%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E6%B8%90%E5%8F%98%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E6%B8%90%E5%8F%98%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0ATransition%20%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E9%85%8D%E7%BD%AE%E4%B8%AD%E7%9A%84%20%60transition%60%20%E9%80%89%E9%A1%B9%E5%85%A8%E5%B1%80%E8%AE%BE%E7%BD%AE%EF%BC%8C%E4%B9%9F%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%9C%A8%E7%89%B9%E5%AE%9A%E5%B9%BB%E7%81%AF%E7%89%87%E6%B7%BB%E5%8A%A0%20%60data-transition%60%20%E5%B1%9E%E6%80%A7%E5%B1%80%E9%83%A8%E8%AE%BE%E7%BD%AE.%0A%0A%E5%8F%AF%E8%83%BD%E7%9A%84%E5%80%BC%3A%0A%0A-%20none%0A-%20fade%0A-%20slide%0A%0A%3C!--%20list%20break%20--%3E%0A%0A-%20convex%0A-%20concave%0A-%20zoom%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-auto-animate%20--%3E%0A%0A%23%23%20%E6%B8%90%E5%8F%98%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%23%20%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%E7%9B%B8%E9%82%BB%E7%9A%84%E5%B9%BB%E7%81%AF%E7%89%87%E4%B8%8A%E6%B7%BB%E5%8A%A0%20%60data-auto-animate%60%20%E4%BD%BF%E7%9B%B8%E5%90%8C%E7%9A%84%20HTML%20%E5%85%83%E7%B4%A0%E4%BA%A7%E7%94%9F%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C%E3%80%82%0A%0A---%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%9F%E8%83%BD%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%9F%E8%83%BD%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%23%20%E4%BB%A3%E7%A0%81%0A%0A%E9%80%9A%E8%BF%87%E5%90%AF%E7%94%A8%20%60highlight%60%20%E6%8F%92%E4%BB%B6%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%AF%B9%E4%BB%A3%E7%A0%81%E5%9D%97%E8%BF%9B%E8%A1%8C%E9%AB%98%E4%BA%AE%E3%80%82%0A%0A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%20%60%5Ba-b%7Cc-d%5D%60%20%E8%AF%AD%E6%B3%95%E6%9D%A5%E5%88%86%E5%B8%83%E9%AB%98%E4%BA%AE%E7%89%B9%E5%AE%9A%E8%A1%8C%E3%80%82%0A%0A%60%60%60js%20%5B1-2%7C3%7C4%5D%0Alet%20a%20%3D%201%3B%0Alet%20b%20%3D%202%3B%0Alet%20c%20%3D%20(x)%20%3D%3E%201%20%2B%202%20%2B%20x%3B%0Ac(3)%3B%0A%60%60%60%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%9F%E8%83%BD%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%23%20%E9%A2%84%E8%A7%88%E6%A8%A1%E5%BC%8F%0A%0A%E6%8C%89%E4%B8%8B%20%60Esc%60%20%E6%88%96%20%60O%60%20%E5%8D%B3%E5%8F%AF%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E8%8E%B7%E5%BE%97%E7%84%A6%E7%82%B9%E6%97%B6%E8%BF%9B%E5%85%A5%E9%A2%84%E8%A7%88%E6%A8%A1%E5%BC%8F%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%9F%E8%83%BD%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%23%20%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%0A%0A%E6%8C%89%E4%B8%8B%20%60F%60%20%E6%88%96%20%60F11%60%20%E5%8D%B3%E5%8F%AF%E5%9C%A8%E5%B9%BB%E7%81%AF%E7%89%87%E8%8E%B7%E5%BE%97%E7%84%A6%E7%82%B9%E6%97%B6%E8%BF%9B%E5%85%A5%E5%85%A8%E5%B1%8F%E6%A8%A1%E5%BC%8F%E3%80%82%0A%0A--%0A%0A%3C!--%20.slide%3A%20data-transition%3D%22slide%22%20data-auto-animate%20--%3E%0A%0A%23%23%20%E5%8A%9F%E8%83%BD%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%23%20%E7%BC%A9%E6%94%BE%0A%0A%E6%8C%89%E4%B8%8B%20%60alt%60%20(Linux%20%E4%B8%8A%E4%BD%BF%E7%94%A8%20%60ctrl%60)%20%E7%9A%84%E5%90%8C%E6%97%B6%E7%82%B9%E5%87%BB%E5%B9%BB%E7%81%AF%E7%89%87%E7%9A%84%E4%BB%BB%E4%BD%95%E5%85%83%E7%B4%A0%EF%BC%8C%E5%8D%B3%E5%8F%AF%E4%BB%A5%E5%90%91%E6%AD%A4%E5%85%83%E7%B4%A0%E8%BF%9B%E8%A1%8C%E6%94%BE%E5%A4%A7%E3%80%82%0A%0A%E5%86%8D%E6%AC%A1%E7%82%B9%E5%87%BB%E5%8D%B3%E5%8F%AF%E7%BC%A9%E5%B0%8F%E3%80%82%0A%0A---%0A%0A%3C!--%20.element%3A%20class%3D%22r-fit-text%22%20--%3E%0A%0A%23%23%20%E7%BB%93%E6%9D%9F%0A" theme="auto"></Presentation>]]></content>
    <published>2020-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">主要功能与配置演示</title>
    <id>https://autumnwhj.github.io/guide/</id>
    <link href="https://autumnwhj.github.io/guide/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="目录" tabindex="-1"> 目录</h2>
<ul>
<li>
<p><a href="/guide/markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="/guide/page.html">页面展示</a></p>
</li>
<li>
<p><a href="/guide/disable.html">禁用展示</a></p>
</li>
<li>
<p><a href="/guide/encrypt.html">加密展示</a></p>
</li>
</ul>
]]></content>
    <category term="使用指南" scheme=""/>
    <published>2020-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">布局与功能禁用</title>
    <id>https://autumnwhj.github.io/guide/disable.html</id>
    <link href="https://autumnwhj.github.io/guide/disable.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html"><![CDATA[<CountView></CountView>
<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>
]]></summary>
    <content type="html"><![CDATA[<CountView></CountView>
<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>

<p>本页面就是一个示例，禁用了如下功能:</p>
<ul>
<li>导航栏</li>
<li>侧边栏</li>
<li>路径导航</li>
<li>页面信息</li>
<li>贡献者</li>
<li>编辑此页链接</li>
<li>更新时间</li>
<li>上一篇/下一篇 链接</li>
<li>评论</li>
<li>页脚</li>
<li>返回顶部按钮</li>
</ul>
]]></content>
    <category term="使用指南" scheme=""/>
    <published>2022-07-28T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">密码加密的文章</title>
    <id>https://autumnwhj.github.io/guide/encrypt.html</id>
    <link href="https://autumnwhj.github.io/guide/encrypt.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <content type="html"><![CDATA[<CountView></CountView>
<h1 id="密码加密的文章" tabindex="-1"> 密码加密的文章</h1>
<p>实际的文章内容。</p>
<p>段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字段落 1 文字。</p>
<p>段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字段落 2 文字。</p>
]]></content>
    <category term="使用指南" scheme=""/>
    <published>2022-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Markdown 展示</title>
    <id>https://autumnwhj.github.io/guide/markdown.html</id>
    <link href="https://autumnwhj.github.io/guide/markdown.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html"><![CDATA[<CountView></CountView>
<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>
]]></summary>
    <content type="html"><![CDATA[<CountView></CountView>
<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>
<p>你应该创建和编写 Markdown 文件，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>

<h2 id="markdown-介绍" tabindex="-1"> Markdown 介绍</h2>
<p>如果你是一个新手，还不会编写 Markdown，请先阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/cookbook/markdown/" target="_blank" rel="noopener noreferrer">Markdown 介绍</a> 和 <a href="https://vuepress-theme-hope.github.io/v2/zh/cookbook/markdown/demo.html" target="_blank" rel="noopener noreferrer">Markdown 演示</a>。</p>
<h2 id="markdown-配置" tabindex="-1"> Markdown 配置</h2>
<p>VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。</p>
<div><p>相关信息</p>
<p>Frontmatter 是 VuePress 中很重要的一个概念，如果你不了解它，你需要阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/cookbook/vuepress/page.html#front-matter" target="_blank" rel="noopener noreferrer">Frontmatter 介绍</a>。</p>
</div>
<h2 id="markdown-扩展" tabindex="-1"> Markdown 扩展</h2>
<p>VuePress 会使用 <a href="https://github.com/markdown-it/markdown-it" target="_blank" rel="noopener noreferrer">markdown-it</a> 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 <a href="https://github.com/markdown-it/markdown-it#syntax-extensions" target="_blank" rel="noopener noreferrer">语法扩展</a> 。</p>
<h3 id="vuepress-扩展" tabindex="-1"> VuePress 扩展</h3>
<p>为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。</p>
<p>关于这些扩展，请阅读 <a href="https://vuepress-theme-hope.github.io/v2/zh/cookbook/vuepress/markdown.html" target="_blank" rel="noopener noreferrer">VuePress 中的 Markdown 扩展</a>。</p>
<h3 id="主题扩展" tabindex="-1"> 主题扩展</h3>
<p>通过 <a href="https://vuepress-theme-hope.github.io/v2/md-enhance/zh/" target="_blank" rel="noopener noreferrer"><code>vuepress-plugin-md-enhance</code></a>，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。</p>
<div><p>一键启用</p>
<p>你可以设置在主题选项中设置 <code>plugins.mdEnhance.enableAll: true</code> 启用 <a href="https://vuepress-theme-hope.github.io/v2/md-enhance/zh/" target="_blank" rel="noopener noreferrer">md-enhance</a> 插件的所有功能。</p>
<CodeTabs :data='[{"title":"TS"},{"title":"JS"}]' tab-id="language">

<template #tab0="{ title, value, isActive }">
<div><pre><code><span>import</span> <span>{</span> hopeTheme <span>}</span> <span>from</span> <span>"vuepress-theme-hope"</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
  theme<span>:</span> <span>hopeTheme</span><span>(</span><span>{</span>
    plugins<span>:</span> <span>{</span>
      mdEnhance<span>:</span> <span>{</span>
        enableAll<span>:</span> <span>true</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div><pre><code><span>const</span> <span>{</span> hopeTheme <span>}</span> <span>=</span> <span>require</span><span>(</span><span>"vuepress-theme-hope"</span><span>)</span><span>;</span>

module<span>.</span>exports <span>=</span> <span>{</span>
  <span>theme</span><span>:</span> <span>hopeTheme</span><span>(</span><span>{</span>
    <span>plugins</span><span>:</span> <span>{</span>
      <span>mdEnhance</span><span>:</span> <span>{</span>
        <span>enableAll</span><span>:</span> <span>true</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>,</span>
  <span>}</span><span>)</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></template>
</CodeTabs>
</div>
<h4 id="自定义容器" tabindex="-1"> 自定义容器</h4>
<p>:::</p>
<p>安全的在 Markdown 中使用 {{ variable }}。</p>
<p>:::</p>
<div><p>自定义标题</p>
<p>信息容器，包含 <code>代码</code> 与 。</p>
<div><pre><code><span>const</span> a <span>=</span> <span>1</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div></div></div></div>
<div><p>自定义标题</p>
<p>提示容器</p>
</div>
<div><p>自定义标题</p>
<p>警告容器</p>
</div>
<div><p>自定义标题</p>
<p>危险容器</p>
</div>
<details><summary>自定义标题</summary>
<p>详情容器</p>
</details>
<details><summary>代码</summary>
<div><pre><code>:::

安全的在 Markdown 中使用 {{ variable }}。

:::

::: info 自定义标题

信息容器

:::

::: tip 自定义标题

提示容器

:::

::: warning 自定义标题

警告容器

:::

::: danger 自定义标题

危险容器

:::

::: details 自定义标题

详情容器

:::
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></details>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/container.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="代码块" tabindex="-1"> 代码块</h4>
<CodeTabs :data='[{"title":"pnpm"},{"title":"yarn"},{"title":"npm"}]' :active="2">

<template #tab0="{ title, value, isActive }">
<div><pre><code><span>pnpm</span> <span>add</span> -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><div></div></div></div></template>
<template #tab1="{ title, value, isActive }">
<div><pre><code><span>yarn</span> <span>add</span> -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><div></div></div></div></template>
<template #tab2="{ title, value, isActive }">
<div><pre><code><span>npm</span> i -D vuepress-theme-hope
</code></pre><div aria-hidden="true"><div></div></div></div></template>
</CodeTabs>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/code-tabs.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="自定义对齐" tabindex="-1"> 自定义对齐</h4>
<div style="text-align: center"><p>我是居中的</p>
</div>
<div style="text-align: right"><p>我在右对齐</p>
</div>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/align.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="上下角标" tabindex="-1"> 上下角标</h4>
<p>19^th^ H~2~O</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/sup-sub.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="脚注" tabindex="-1"> 脚注</h4>
<p>此文字有脚注<a href="%E8%BF%99%E6%98%AF%E8%84%9A%E6%B3%A8%E5%86%85%E5%AE%B9">^first</a>.</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/footnote.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="标记" tabindex="-1"> 标记</h4>
<p>你可以标记 ==重要的内容== 。</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mark.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="任务列表" tabindex="-1"> 任务列表</h4>
<ul>
<li>
<p>[x] 计划 1</p>
</li>
<li>
<p>[ ] 计划 2</p>
</li>
<li>
<p><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tasklist.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h3 id="图片增强" tabindex="-1"> 图片增强</h3>
<p>支持为图片设置颜色模式和大小</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/image.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="图表" tabindex="-1"> 图表</h4>
<ChartJS id="chart-64a568e6" config="%7B%0A%20%20%22type%22%3A%20%22scatter%22%2C%0A%20%20%22data%22%3A%20%7B%0A%20%20%20%20%22datasets%22%3A%20%5B%0A%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22label%22%3A%20%22%E6%95%A3%E7%82%B9%E6%95%B0%E6%8D%AE%E9%9B%86%22%2C%0A%20%20%20%20%20%20%20%20%22data%22%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%20-10%2C%20%22y%22%3A%200%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200%2C%20%22y%22%3A%2010%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%2010%2C%20%22y%22%3A%205%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%7B%20%22x%22%3A%200.5%2C%20%22y%22%3A%205.5%20%7D%0A%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%22backgroundColor%22%3A%20%22rgb(255%2C%2099%2C%20132)%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%5D%0A%20%20%7D%2C%0A%20%20%22options%22%3A%20%7B%0A%20%20%20%20%22scales%22%3A%20%7B%0A%20%20%20%20%20%20%22x%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%22type%22%3A%20%22linear%22%2C%0A%20%20%20%20%20%20%20%20%22position%22%3A%20%22bottom%22%0A%20%20%20%20%20%20%7D%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A" title="%E4%B8%80%E4%B8%AA%E6%95%A3%E7%82%B9%E5%9B%BE%E6%A1%88%E4%BE%8B" type="json"></ChartJS><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/chart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="echarts" tabindex="-1"> Echarts</h4>
<p>::: echarts 一个折线图案例</p>
<div><pre><code><span>{</span>
  <span>"xAxis"</span><span>:</span> <span>{</span>
    <span>"type"</span><span>:</span> <span>"category"</span><span>,</span>
    <span>"data"</span><span>:</span> <span>[</span><span>"Mon"</span><span>,</span> <span>"Tue"</span><span>,</span> <span>"Wed"</span><span>,</span> <span>"Thu"</span><span>,</span> <span>"Fri"</span><span>,</span> <span>"Sat"</span><span>,</span> <span>"Sun"</span><span>]</span>
  <span>}</span><span>,</span>
  <span>"yAxis"</span><span>:</span> <span>{</span>
    <span>"type"</span><span>:</span> <span>"value"</span>
  <span>}</span><span>,</span>
  <span>"series"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"data"</span><span>:</span> <span>[</span><span>150</span><span>,</span> <span>230</span><span>,</span> <span>224</span><span>,</span> <span>218</span><span>,</span> <span>135</span><span>,</span> <span>147</span><span>,</span> <span>260</span><span>]</span><span>,</span>
      <span>"type"</span><span>:</span> <span>"line"</span>
    <span>}</span>
  <span>]</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>:::</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/echarts.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="流程图" tabindex="-1"> 流程图</h4>
<div><pre><code>cond<span>=></span>condition<span>:</span> 是否执行操作<span>?</span>
process<span>=></span>operation<span>:</span> 操作
e<span>=></span>end<span>:</span> 结束

<span>cond</span><span>(</span>yes<span>)</span><span>-</span><span>></span>process<span>-</span><span>></span>e
<span>cond</span><span>(</span>no<span>)</span><span>-</span><span>></span>e
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/flowchart.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="mermaid" tabindex="-1"> Mermaid</h4>
<div><pre><code><span>flowchart</span> TB
    c1<span>--></span>a2
    <span>subgraph</span> one
    a1<span>--></span>a2
    <span>end</span>
    <span>subgraph</span> two
    b1<span>--></span>b2
    <span>end</span>
    <span>subgraph</span> three
    c1<span>--></span>c2
    <span>end</span>
    one <span>--></span> two
    three <span>--></span> two
    two <span>--></span> c2
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/mermaid.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="tex-语法" tabindex="-1"> Tex 语法</h4>
<p>$$
\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)
= \left(\frac {y^{\omega}} {\omega}\right) \left{(\log y)^r + \sum_{i=1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right}
$$</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/tex.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="导入文件" tabindex="-1"> 导入文件</h4>
<h2 id="目录" tabindex="-1"> 目录</h2>
<ul>
<li>
<p><a href="/guide/markdown.html">Markdown 展示</a></p>
</li>
<li>
<p><a href="/guide/page.html">页面展示</a></p>
</li>
<li>
<p><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/include.html" target="_blank" rel="noopener noreferrer">查看详情</a></p>
</li>
</ul>
<h4 id="代码演示" tabindex="-1"> 代码演示</h4>

<CodeDemo id="code-demo-3c31404e" type="normal" title="%E4%B8%80%E4%B8%AA%E6%99%AE%E9%80%9A%20Demo" code="%7B%22html%22%3A%22%3Ch1%3EVuePress%20Theme%20Hope%3C%2Fh1%3E%5Cn%3Cp%3E%3Cspan%20id%3D%5C%22very%5C%22%3E%E9%9D%9E%E5%B8%B8%3C%2Fspan%3E%E5%BC%BA%E5%A4%A7!%3C%2Fp%3E%5Cn%22%2C%22js%22%3A%22document.querySelector(%5C%22%23very%5C%22).addEventListener(%5C%22click%5C%22%2C%20()%20%3D%3E%20%7B%5Cn%20%20alert(%5C%22%E9%9D%9E%E5%B8%B8%E5%BC%BA%E5%A4%A7%5C%22)%3B%5Cn%7D)%3B%5Cn%22%2C%22css%22%3A%22span%20%7B%5Cn%20%20color%3A%20red%3B%5Cn%7D%5Cn%22%7D">
<div><pre><code><span><span><span>&lt;</span>h1</span><span>></span></span>VuePress Theme Hope<span><span><span>&lt;/</span>h1</span><span>></span></span>
<span><span><span>&lt;</span>p</span><span>></span></span><span><span><span>&lt;</span>span</span> <span>id</span><span><span>=</span><span>"</span>very<span>"</span></span><span>></span></span>非常<span><span><span>&lt;/</span>span</span><span>></span></span>强大!<span><span><span>&lt;/</span>p</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><div><pre><code>document<span>.</span><span>querySelector</span><span>(</span><span>"#very"</span><span>)</span><span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>alert</span><span>(</span><span>"非常强大"</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><div><pre><code><span>span</span> <span>{</span>
  <span>color</span><span>:</span> red<span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div></CodeDemo><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/demo.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
<h4 id="样式化" tabindex="-1"> 样式化</h4>

<p>设置它<span style="color:red">没有</span>任何效果，请<span style="color:red">不要</span>这样使用</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/stylize.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>

<h4 id="幻灯片" tabindex="-1"> 幻灯片</h4>
<Presentation id="presentation-64a560ec" data-code="%0A%23%23%20%E5%B9%BB%E7%81%AF%E7%89%87%201%0A%0A%E4%B8%80%E4%B8%AA%E6%9C%89%E6%96%87%E5%AD%97%E5%92%8C%20%5B%E9%93%BE%E6%8E%A5%5D(https%3A%2F%2Fmrhope.site)%20%E7%9A%84%E6%AE%B5%E8%90%BD%0A%0A---%0A%0A%23%23%20%E5%B9%BB%E7%81%AF%E7%89%87%202%0A%0A-%20%E9%A1%B9%E7%9B%AE%201%0A-%20%E9%A1%B9%E7%9B%AE%202%0A%0A---%0A%0A%23%23%20%E5%B9%BB%E7%81%AF%E7%89%87%203.1%0A%0A%60%60%60js%0Aconst%20a%20%3D%201%3B%0A%60%60%60%0A%0A--%0A%0A%23%23%20%E5%B9%BB%E7%81%AF%E7%89%87%203.2%0A%0A%24%24%0AJ(%5Ctheta_0%2C%5Ctheta_1)%20%3D%20%5Csum_%7Bi%3D0%7D%0A%24%24%0A" theme="auto"></Presentation><ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/markdown/presentation.html" target="_blank" rel="noopener noreferrer">查看详情</a></li>
</ul>
]]></content>
    <category term="使用指南" scheme=""/>
    <published>2022-07-29T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">页面配置</title>
    <id>https://autumnwhj.github.io/guide/page.html</id>
    <link href="https://autumnwhj.github.io/guide/page.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html"><![CDATA[<CountView></CountView>
<p><code>more</code> 注释之前的内容被视为文章摘要。</p>
]]></summary>
    <content type="html"><![CDATA[<CountView></CountView>
<p><code>more</code> 注释之前的内容被视为文章摘要。</p>

<h2 id="页面信息" tabindex="-1"> 页面信息</h2>
<p>你可以在 Markdown 的 Frontmatter 中设置页面信息。</p>
<ul>
<li>作者设置为 Ms.Hope。</li>
<li>写作日期为 2020 年 1 月 1 日</li>
<li>分类为 “使用指南”</li>
<li>标签为 “页面配置” 和 “使用指南”</li>
</ul>
<h2 id="页面内容" tabindex="-1"> 页面内容</h2>
<p>你可以自由在这里书写你的 Markdown。</p>
<div><p>提示</p>
<ul>
<li>
<p>你可以将图片和 Markdown 文件放置在一起，但是你需要使用<strong>相对链接</strong><code>./</code> 进行引用。</p>
</li>
<li>
<p>对于 <code>.vuepress/public</code> 文件夹的图片，请使用绝对链接 <code>/</code> 进行引用。</p>
</li>
</ul>
</div>
<p>主题包含了一个自定义徽章章可以使用:</p>
<blockquote>
<p>文字结尾应该有深蓝色的 徽章文字 徽章。 <i>Content not supported</i></p>
</blockquote>
<h2 id="页面结构" tabindex="-1"> 页面结构</h2>
<p>此页面应当包含:</p>
<ul>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/layout/breadcrumb.html" target="_blank" rel="noopener noreferrer">路径导航</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/feature/page-info.html" target="_blank" rel="noopener noreferrer">标题和页面信息</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/layout/page.html#%E6%A0%87%E9%A2%98%E5%88%97%E8%A1%A8" target="_blank" rel="noopener noreferrer">TOC (文章标题列表)</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/guide/feature/meta.html" target="_blank" rel="noopener noreferrer">贡献者、更新时间等页面元信息</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/feature/comment.html" target="_blank" rel="noopener noreferrer">评论</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>
<li><a href="https://vuepress-theme-hope.github.io/v2/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>
<li>返回顶部按钮</li>
</ul>
<p>你可以通过主题选项和页面 Frontmatter 自定义它们。</p>
]]></content>
    <author>
      <name>Ms.Hope</name>
    </author>
    <category term="使用指南" scheme=""/>
    <contributor>
      <name>Ms.Hope</name>
    </contributor>
    <published>2020-01-01T00:00:00.000Z</published>
    <rights>无版权</rights>
  </entry>
  <entry>
    <title type="html">PDF书籍整合</title>
    <id>https://autumnwhj.github.io/posts/PDF/</id>
    <link href="https://autumnwhj.github.io/posts/PDF/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">PDF书籍整合  PDF书籍整合均来自互联网</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>PDF书籍整合均来自互联网</p>
</div>

<div><p>前端相关书籍</p>
</div>
<ol>
<li><a href="/posts/PDF/front-end/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAES6.html">深入浅出ES6</a></li>
<li><a href="/posts/PDF/front-end/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89.html">学习JavaScript数据结构与算法（第3版）</a></li>
<li><a href="/posts/PDF/front-end/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89.html">你不知道的JavaScript（上卷）</a></li>
<li><a href="/posts/PDF/front-end/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%AD%E5%8D%B7%EF%BC%89.html">你不知道的JavaScript（中卷）</a></li>
<li><a href="/posts/PDF/front-end/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8B%E5%8D%B7%EF%BC%89.html">你不知道的JavaScript（下卷）</a></li>
<li><a href="/posts/PDF/front-end/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5.html">JavaScript设计模式与开发实践</a></li>
<li><a href="/posts/PDF/front-end/Three.js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97-%E5%8E%9F%E4%B9%A6%E7%AC%AC2%E7%89%88.html">Three.js开发指南-原书第2版</a></li>
<li><a href="/posts/PDF/front-end/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%BC%A0%E5%AE%B9%E9%93%AD.html">JavaScript设计模式-张容铭</a></li>
<li><a href="/posts/PDF/front-end/javascript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html">javascript面向对象编程</a></li>
<li><a href="/posts/PDF/front-end/JavaScript%E7%99%BE%E7%82%BC%E6%88%90%E4%BB%99.html">JavaScript百炼成仙</a></li>
<li><a href="/posts/PDF/front-end/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC4%E7%89%88%EF%BC%89.html">JavaScript高级程序设计（第4版）</a></li>
<li><a href="/posts/PDF/front-end/HTML5%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97.html">HTML5游戏开发进阶指南</a></li>
<li><a href="/posts/PDF/front-end/CSS%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E7%AC%AC%E4%B8%89%E7%89%88.html">CSS权威指南-第三版</a></li>
<li><a href="/posts/PDF/front-end/%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93.html">代码整洁之道</a></li>
</ol>
<div><p>后端相关书籍</p>
</div>
<ol>
<li><a href="/posts/PDF/back-end/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BANode.js.html">深入浅出Node.js</a></li>
<li><a href="/posts/PDF/back-end/NODE.js%E5%85%A5%E9%97%A8%E6%89%8B%E5%86%8C.html">NODE.js入门手册</a></li>
<li><a href="/posts/PDF/back-end/Node.js%E5%AE%9E%E6%88%98.html">Node.js实战</a></li>
</ol>
<div><p>网络相关书籍</p>
</div>
<ol>
<li><a href="/posts/PDF/network/%E5%9B%BE%E8%A7%A3HTTP(%E4%B8%8A%E9%87%8E%E5%AE%A3).html">图解HTTP(上野宣)</a></li>
<li><a href="/posts/PDF/network/%E5%9B%BE%E8%A7%A3TCPIP%EF%BC%88%E7%AC%AC%E4%BA%94%E7%89%88%EF%BC%89.html">图解TCPIP（第五版）</a></li>
</ol>
<div><p>Linux运维相关书籍</p>
</div>
<p>1.<a href="/posts/PDF/linux/%E9%98%AE%E4%B8%80%E5%B3%B0-Bash-%E8%84%9A%E6%9C%AC%E6%95%99%E7%A8%8B.html">阮一峰-Bash-脚本教程</a></p>
]]></content>
    <category term="PDF" scheme=""/>
    <published>2022-08-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">我的项目整合</title>
    <id>https://autumnwhj.github.io/posts/project/</id>
    <link href="https://autumnwhj.github.io/posts/project/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">我的项目整合  我的项目列表</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>我的项目列表</p>
</div>

<h2 id="项目" tabindex="-1"> 项目</h2>
<blockquote>
<ol>
<li><a href="/posts/project/api-server/">黑马视频教程-大事件项目(2022/05.15--2022/05.25)</a></li>
</ol>
<p>使用技术:<code>node</code>+<code>express</code>+<code>mysql</code>+<code>Postman</code>+<code>JsonWebToken</code>+<code>joi</code>+<code>bcryptjs</code>+<code>multer</code></p>
</blockquote>
<blockquote>
<ol start="2">
<li><a href="/posts/project/vue-shop/">电商后台管理系统(2022/07.08--2022/07.18)</a></li>
</ol>
<p>使用技术:<code>vue2</code>+<code>ElementUi</code>+<code>axiso</code></p>
</blockquote>
<blockquote>
<ol start="3">
<li><a href="/posts/project/newsinfo/">新闻门户网站(2022/05.02--2022/05.18)</a></li>
</ol>
<p>使用技术:<code>node</code>+<code>bootstrap</code>+<code>axios</code>+<code>ejs</code></p>
</blockquote>
<blockquote>
<ol start="4">
<li><a href="/posts/project/socket-chat/"><code>Node+Socket.io</code>聊天程序 </a></li>
</ol>
<p>使用技术:<code>node</code>+<code>socket.io</code></p>
</blockquote>
<h2 id="案例" tabindex="-1"> 案例</h2>
<blockquote>
<ol>
<li><a href="/posts/project/puppeteer-electron-pdf/"><code>puppeteer</code>爬取 <code>electron</code>官网文档，保存为<code>pdf</code>格式(2022/07.21)</a></li>
</ol>
<p>使用技术:<code>node</code>+<code>puppeteer</code></p>
</blockquote>
<blockquote>
<ol start="2">
<li><a href="/posts/project/bilibili-video-download/">Bilibili视频多集下载(2022/08)</a></li>
</ol>
<p>使用技术:<code>node</code>+<code>axios</code></p>
</blockquote>
<blockquote>
<ol start="3">
<li><a href="/posts/project/demo/video-stream-demo">基于Nodejs的视频流播放(2022/08-31)</a></li>
</ol>
<p>使用技术：<code>Node</code>+<code>express</code></p>
</blockquote>
<blockquote>
<ol start="4">
<li><a href="/posts/project/demo/spider-get-gif">使用Nodejs批量爬取某网站 Gif动图(2022/09-01)</a></li>
</ol>
<p>使用技术：<code>Node</code>-<code>axios</code>+<code>cheerio</code></p>
</blockquote>
]]></content>
    <category term="我的项目整合" scheme=""/>
    <published>2022-07-31T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">黑马案例大事件项目</title>
    <id>https://autumnwhj.github.io/posts/project/api-server/</id>
    <link href="https://autumnwhj.github.io/posts/project/api-server/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">黑马案例大事件项目  黑马视频教程-大事件项目后台接口项目 使用 `node`+`express`+`mysql`+`Postman`+`JsonWebToken`+`joi`+`bcryptjs`+`multer`</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>黑马视频教程-大事件项目后台接口项目 使用 <code>node</code>+<code>express</code>+<code>mysql</code>+<code>Postman</code>+<code>JsonWebToken</code>+<code>joi</code>+<code>bcryptjs</code>+<code>multer</code></p>
</blockquote>

<div><p>源码</p>
<p><a href="https://gitee.com/isyv/api_server" target="_blank" rel="noopener noreferrer">Gitee</a></p>
</div>
]]></content>
    <category term="我的项目整合" scheme=""/>
    <category term="Node" scheme=""/>
    <published>2022-08-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">新闻门户网站</title>
    <id>https://autumnwhj.github.io/posts/project/newsinfo/</id>
    <link href="https://autumnwhj.github.io/posts/project/newsinfo/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">新闻门户网站   该项目是在大二期间，学校举办的技能节，参加了`web`项目。比赛内容是做出一个新闻门户网站，两人一组。犹豫队友平时比较忙，我就让他帮我找找素材啥的，然后让他做了一个`index.html`首页</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>该项目是在大二期间，学校举办的技能节，参加了<code>web</code>项目。比赛内容是做出一个新闻门户网站，两人一组。犹豫队友平时比较忙，我就让他帮我找找素材啥的，然后让他做了一个<code>index.html</code>首页</p>
</div>

<blockquote>
<p><a href="http://client--news.herokuapp.com/" target="_blank" rel="noopener noreferrer">项目展示</a></p>
<p><a href="https://gitee.com/isyv/newsinfo_with_imgs" target="_blank" rel="noopener noreferrer"><code>Gitee</code>-后端</a></p>
<p><a href="https://gitee.com/isyv/newsclient" target="_blank" rel="noopener noreferrer"><code>Gitee</code>-前端</a></p>
<p><a href="https://documenter.getpostman.com/view/19150006/UyxdKokK#afccd7cd-423e-4695-abb3-269d31cf1e62" target="_blank" rel="noopener noreferrer">后端接口</a></p>
</blockquote>
<div><p>提示</p>
<p>该项目部署在<code>Heroku</code>国外免费容器平台，首次进入会有20秒左右的启动时间。</p>
<p>国外平台偶尔出现在国内打不开的情况。</p>
</div>
<h1 id="项目展示" tabindex="-1"> 项目展示</h1>
<h2 id="首页" tabindex="-1"> 首页</h2>
<p>由于首页不是我做的，跟整体观感会有差距</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:22:55*image-20220801162255125*9.png" alt="image-20220801162255125"></p>
<h2 id="登录注册" tabindex="-1"> 登录注册</h2>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:28:31*image-20220801162831706*7.png" alt="image-20220801162831706"></p>
<h2 id="新闻详情页" tabindex="-1"> 新闻详情页</h2>
<ul>
<li>当用户登录成功后，右上角的登录按钮会变成头像以及用户名</li>
<li>新闻的标题、分类、时间是使用<code>Ejs</code>模板引擎获取后端数据渲染</li>
<li>新闻内容可以通过标题下方的工具栏调节字体</li>
<li>右侧轮播图使用<code>Swiper</code>插件，并且图片和文字内容通过<code>axios</code>获取渲染</li>
<li>右侧轮播图和新闻排行展示顺序是根据页面浏览量动态展示</li>
<li>搜索功能</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:32:17*image-20220801163217876*3.png" alt="image-20220801163217876"></p>
<h2 id="搜索功能" tabindex="-1"> 搜索功能</h2>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:45:45*image-20220801164545874*f.png" alt="image-20220801164545874"></p>
<h2 id="后台管理" tabindex="-1"> 后台管理</h2>
<p><strong>由于当时技术受限，并且没有了解到富文本插件，所以新闻上传使用较原始的input表单上传，</strong></p>
<h3 id="后台首页" tabindex="-1"> 后台首页</h3>
<p>使用<code>Echart</code>通过接口数据简单的做了可视化</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:48:52*image-20220801164852219*9.png" alt="image-20220801164852219"></p>
<h3 id="插入新闻" tabindex="-1"> 插入新闻</h3>
<ul>
<li>当图片选择好后，点击确定，会直接上传，并且拿到服务器端的图片地址</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:51:24*image-20220801165124206*b.png" alt="image-20220801165124206"></p>
<h3 id="新闻列表" tabindex="-1"> 新闻列表</h3>
<ul>
<li>可以删除</li>
<li>查看新闻信息</li>
<li>图片预览是直接跳转到图片直链，也是由于当时不了解图片预览有啥插件</li>
<li>分页是直接前端发送请求携带页码，后端查询相关数据</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:53:40*image-20220801165340766*c.png" alt="image-20220801165340766"></p>
<h3 id="用户管理" tabindex="-1"> 用户管理</h3>
<ul>
<li>用户列表原理和新闻列表原理相同</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-16:56:14*image-20220801165614717*3.png" alt="image-20220801165614717"></p>
]]></content>
    <category term="我的项目整合" scheme=""/>
    <published>2022-08-01T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">电商后台管理项目</title>
    <id>https://autumnwhj.github.io/posts/project/vue-shop/</id>
    <link href="https://autumnwhj.github.io/posts/project/vue-shop/"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">电商后台管理项目  Vue2+ElementUi+Node+Axios 电商后台管理项目。</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>Vue2+ElementUi+Node+Axios 电商后台管理项目。
这个项目将vue2学完后完成的一个项目</p>
</div>

<blockquote>
<p><a href="https://client-vue-shop.herokuapp.com/#/login" target="_blank" rel="noopener noreferrer">项目展示</a></p>
</blockquote>
<div><p>提示</p>
<p>1.该项目部署在<code>Heroku</code>国外免费容器平台，首次进入会有20秒左右的启动时间。
国外平台偶尔出现在国内打不开的情况。</p>
</div>
<h2 id="项目展示" tabindex="-1"> 项目展示</h2>
<h3 id="登录界面" tabindex="-1"> 登录界面</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-15:54:34*image-20220801155434253*1.png" alt="image-20220801155434253"></p>
<h3 id="权限管理" tabindex="-1"> 权限管理</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-15:55:10*image-20220801155510192*e.png" alt="image-20220801155510192"></p>
<h3 id="商品列表分类" tabindex="-1"> 商品列表分类</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-15:55:48*image-20220801155548650*e.png" alt="image-20220801155548650"></p>
<h3 id="添加商品分类" tabindex="-1"> 添加商品分类</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-15:56:32*image-20220801155632840*4.png" alt="image-20220801155632840"></p>
<h3 id="添加信息模态框" tabindex="-1"> 添加信息模态框</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-01-15:57:00*image-20220801155700058*7.png" alt="image-20220801155700058"></p>
]]></content>
    <category term="我的项目整合" scheme=""/>
    <published>2022-07-31T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">那些前端开发神级网站</title>
    <id>https://autumnwhj.github.io/posts/share/frontend/frontend-dev-god-web-site.html</id>
    <link href="https://autumnwhj.github.io/posts/share/frontend/frontend-dev-god-web-site.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">那些前端开发神级网站</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>包含了各种前端开发神级网站(后续会继续添加)</p>
</blockquote>

<h2 id="_1-devdocs" tabindex="-1"> 1.DevDocs</h2>
<blockquote>
<p><strong>DevDocs将不同语言，框架和库的<code>API</code>汇聚到了一个网页上，你可以直接在一个页面进行搜索。</strong></p>
<p><a href="https://devdocs.io/" target="_blank" rel="noopener noreferrer">官网地址:https://devdocs.io/</a></p>
<p><a href="https://github.com/freeCodeCamp/devdocs" target="_blank" rel="noopener noreferrer">GitHub源码</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:41:09*image-20220807124106228*5.png" alt="image-20220807124106228"></p>
<h2 id="_2-ray-so" tabindex="-1"> 2.ray.so</h2>
<blockquote>
<p><strong>这个网站能够让你生成十分漂亮的代码片段的截图，它支持暗黑模式和各种预设的语言主题。你也可以使用之的VScode扩展插件。</strong></p>
<p><a href="https://ray.so/" target="_blank" rel="noopener noreferrer">官网地址:https://ray.so/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:47:08*image-20220807124704752*d.png" alt="image-20220807124704752"></p>
<h2 id="_3-poet-so" tabindex="-1"> 3.Poet.so</h2>
<blockquote>
<p><strong>该网站能够基于<code>Twitter</code>、<code>LinkedIn</code>和<code>Shopify</code>三个社交媒体网站的网页链接生成图片。并且提供了十分漂亮的样式和主题可供选择。</strong></p>
<p><a href="https://poet.so/" target="_blank" rel="noopener noreferrer">官网地址:https://poet.so/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:48:08*image-20220807124805011*9.png" alt="image-20220807124805011"></p>
<h2 id="_4-roadmap-sh" tabindex="-1"> 4.roadmap.sh</h2>
<blockquote>
<p><strong>这个网站提供了一些可供开发者参考的学习路径和学习资料，这对于想学习某一个技术领域的初学者来说十”有帮助。</strong></p>
<p><a href="https://roadmap.sh/" target="_blank" rel="noopener noreferrer">官网地址:https://roadmap.sh/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:50:04*image-20220807125001256*3.png" alt="image-20220807125001256"></p>
<h2 id="_5-lambdatest" tabindex="-1"> 5.LambdaTest</h2>
<blockquote>
<p><strong>LambdaTest是一个基于云的跨浏览器测试平台。它提供多达2000多种不同的浏览器、操作系统和设备去测试你的应用。你可以很好的使用它去自动化或者手动的去测试你应用的浏览器兼容性问题。</strong></p>
<p><a href="https://www.lambdatest.com/" target="_blank" rel="noopener noreferrer">官网地址:https://www.lambdatest.com/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:56:16*image-20220807125612465*4.png" alt="image-20220807125612465"></p>
<h2 id="_6-daily-dev" tabindex="-1"> 6.daily.dev</h2>
<blockquote>
<p><strong>通过daily.dev这个网站，你可以找到适合每天阅读的优秀的技术文章。这个网站聚合了各类不同平台的优秀技术文章。你可以安装他们的浏览器插件，这样就能方便的将优质的技术内容直接更新到你的浏览器上。</strong></p>
<p><a href="https://daily.dev/" target="_blank" rel="noopener noreferrer">官网地址:https://daily.dev/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:58:54*image-20220807125850947*e.png" alt="image-20220807125850947"></p>
<h2 id="_7-showwcase" tabindex="-1"> 7.Showwcase</h2>
<blockquote>
<p><strong>这个网站提供了一些可供开发者参考的学习路径和学习资料，这对于想学习某一个技术领域的初学者来说十”有帮助。</strong></p>
<p><a href="https://www.showwcase.com/" target="_blank" rel="noopener noreferrer">官网地址:https://www.showwcase.com/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-12:59:24*image-20220807125920835*9.png" alt="image-20220807125920835"></p>
<h2 id="_8-css-tricks" tabindex="-1"> 8.CSS-TRICKS</h2>
<blockquote>
<p><strong>你可以从这个网站上学习到各类CSS的技巧，以此帮助你开发更加漂亮的Web应用。</strong></p>
<p><a href="https://css-tricks.com/" target="_blank" rel="noopener noreferrer">官网地址:https://css-tricks.com/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:00:58*image-20220807130055111*2.png" alt="image-20220807130055111"></p>
<h2 id="_9-medusa" tabindex="-1"> 9.Medusa</h2>
<blockquote>
<p><strong>Medusa是一个开源的Shopify替代品。能够帮助你快速开发E2E订单处理和商品管理界面等。关键的是,Medusa免费!</strong></p>
<p><a href="https://medusajs.com/" target="_blank" rel="noopener noreferrer">官网地址:https://medusajs.com/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:03:04*image-20220807130301182*6.png" alt="image-20220807130301182"></p>
<h2 id="_10-smartmockups" tabindex="-1"> 10.SMARTMOCKUPS</h2>
<blockquote>
<p><strong>为什么你还要花时间学习Photoshop?
Smartmockup能够根据你上传的图片(产品素材)，直接在网页上生成高分辨率的产品模板（例如将你的产品显示在T恤、水杯和电脑屏幕上)。基于web浏览器的方式,Smartmockup的专业模板素材在一直增加，你无需任何设计经验就能获得专业的模板。</strong></p>
<p><a href="https://smartmockups.com/zh" target="_blank" rel="noopener noreferrer">官网地址:https://smartmockups.com/zh</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:05:17*image-20220807130513698*3.png" alt="image-20220807130513698"></p>
<h2 id="_11-code-beautiful" tabindex="-1"> 11.Code Beautiful</h2>
<blockquote>
<p><strong>在网页上美化你的代码，并且该网站提供了一系列开发者经常使用的工具（有点像站长工具)。但问题是该类网站的广告都比较多...</strong></p>
<p><a href="https://codebeautify.org/" target="_blank" rel="noopener noreferrer">官网地址:https://codebeautify.org/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:06:41*image-20220807130638391*f.png" alt="image-20220807130638391"></p>
<h2 id="_12-overapi" tabindex="-1"> 12.overAPI</h2>
<blockquote>
<p><strong>对于开发者来说，overAPI绝对是最漂亮和实用的网站。它聚合了大多数开发语言和工具的API，并以一页备忘录的形式展现。快去看看吧~</strong></p>
<p><a href="https://overapi.com/" target="_blank" rel="noopener noreferrer">官网地址:https://overapi.com/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:07:29*image-20220807130725963*4.png" alt="image-20220807130725963"></p>
<h2 id="_13-color-hunt" tabindex="-1"> 13.Color Hunt</h2>
<blockquote>
<p><strong>一个可以让设计人员和网页开发者选择优秀配色方案的网站。</strong></p>
<p><a href="https://colorhunt.co/" target="_blank" rel="noopener noreferrer">官网地址:https://colorhunt.co/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:08:11*image-20220807130808271*e.png" alt="image-20220807130808271"></p>
<h2 id="_14-meta-tags" tabindex="-1"> 14.Meta Tags</h2>
<blockquote>
<p><strong>这个网站对于需要进行国际化开发的前端来说十分重要国外的<code>Google</code>、<code>Facebook</code>或<code>LinkedIn</code>等社交媒体传了一系列的<code>&lt;meta&gt;</code>标签，当你的网页被检测到对应的<code>&lt;meta&gt;</code>标签时，在这些社交媒体进行分享或者展现你的网页时，会提供额外的能力。这个网站就能够自动生成这些<code>&lt;meta&gt;</code>标签，并且能够直接在网页上预览在不同社交媒体上的展现方式。</strong></p>
<p><a href="https://metatags.io/" target="_blank" rel="noopener noreferrer">官网地址:https://metatags.io/</a></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-08-07-13:10:39*image-20220807131035935*a.png" alt="image-20220807131035935"></p>
]]></content>
    <category term="实用分享" scheme=""/>
    <category term="FrontEnd" scheme=""/>
    <published>2022-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">markdown通用Emoji表情大全</title>
    <id>https://autumnwhj.github.io/posts/share/mark-down/emoji.html</id>
    <link href="https://autumnwhj.github.io/posts/share/mark-down/emoji.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">markdown通用Emoji表情大全</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>超多Emoji表情，欢迎使用！</p>
</blockquote>

<table>
<thead>
<tr>
<th>人物</th>
<th>自然</th>
<th>对象</th>
<th>地点</th>
<th style="text-align:left">符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>😄 <code>:smile:</code></td>
<td>🏠 <code>:house:</code></td>
<td>🎍 <code>:bamboo:</code></td>
<td>1️⃣ <code>:one:</code></td>
<td style="text-align:left">☀️ <code>:sunny:</code></td>
</tr>
<tr>
<td>😆 <code>:laughing:</code></td>
<td>🏡 <code>:house_with_garden:</code></td>
<td>💝 <code>:gift_heart:</code></td>
<td>2️⃣ <code>:two:</code></td>
<td style="text-align:left">☔ <code>:umbrella:</code></td>
</tr>
<tr>
<td>😊 <code>:blush:</code></td>
<td>🏫 <code>:school:</code></td>
<td>🎎 <code>:dolls:</code></td>
<td>3️⃣ <code>:three:</code></td>
<td style="text-align:left">☁️ <code>:cloud:</code></td>
</tr>
<tr>
<td>😃 <code>:smiley:</code></td>
<td>🏢 <code>:office:</code></td>
<td>🎒 <code>:school_satchel:</code></td>
<td>4️⃣ <code>:four:</code></td>
<td style="text-align:left">❄️ <code>:snowflake:</code></td>
</tr>
<tr>
<td>😏 <code>:smirk:</code></td>
<td>🏣 <code>:post_office:</code></td>
<td>🎓 <code>:mortar_board:</code></td>
<td>5️⃣ <code>:five:</code></td>
<td style="text-align:left">⛄ <code>:snowman:</code></td>
</tr>
<tr>
<td>😍 <code>:heart_eyes:</code></td>
<td>🏥 <code>:hospital:</code></td>
<td>🎏 <code>:flags:</code></td>
<td>6️⃣ <code>:six:</code></td>
<td style="text-align:left">⚡ <code>:zap:</code></td>
</tr>
<tr>
<td>😘 <code>:kissing_heart:</code></td>
<td>🏦 <code>:bank:</code></td>
<td>🎆 <code>:fireworks:</code></td>
<td>7️⃣ <code>:seven:</code></td>
<td style="text-align:left">🌀 <code>:cyclone:</code></td>
</tr>
<tr>
<td>😚 <code>:kissing_closed_eyes:</code></td>
<td>🏪 <code>:convenience_store:</code></td>
<td>🎇 <code>:sparkler:</code></td>
<td>8️⃣ <code>:eight:</code></td>
<td style="text-align:left">🌁 <code>:foggy:</code></td>
</tr>
<tr>
<td>😳 <code>:flushed:</code></td>
<td>🏩 <code>:love_hotel:</code></td>
<td>🎐 <code>:wind_chime:</code></td>
<td>9️⃣ <code>:nine:</code></td>
<td style="text-align:left">🌊 <code>:ocean:</code></td>
</tr>
<tr>
<td>😌 <code>:relieved:</code></td>
<td>🏨 <code>:hotel:</code></td>
<td>🎑 <code>:rice_scene:</code></td>
<td>🔟 <code>:keycap_ten:</code></td>
<td style="text-align:left">🐱 <code>:cat:</code></td>
</tr>
<tr>
<td>😆 <code>:satisfied:</code></td>
<td>💒 <code>:wedding:</code></td>
<td>🎃 <code>:jack_o_lantern:</code></td>
<td>🔢 <code>:1234:</code></td>
<td style="text-align:left">🐶 <code>:dog:</code></td>
</tr>
<tr>
<td>😁 <code>:grin:</code></td>
<td>⛪ <code>:church:</code></td>
<td>👻 <code>:ghost:</code></td>
<td>0️⃣ <code>:zero:</code></td>
<td style="text-align:left">🐭 <code>:mouse:</code></td>
</tr>
<tr>
<td>😉 <code>:wink:</code></td>
<td>🏬 <code>:department_store:</code></td>
<td>🎅 <code>:santa:</code></td>
<td>#️⃣ <code>:hash:</code></td>
<td style="text-align:left">🐹 <code>:hamster:</code></td>
</tr>
<tr>
<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>
<td>🏤 <code>:european_post_office:</code></td>
<td>🎄 <code>:christmas_tree:</code></td>
<td>🔣 <code>:symbols:</code></td>
<td style="text-align:left">🐰 <code>:rabbit:</code></td>
</tr>
<tr>
<td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td>
<td>🌇 <code>:city_sunrise:</code></td>
<td>🎁 <code>:gift:</code></td>
<td>◀️ <code>:arrow_backward:</code></td>
<td style="text-align:left">🐺 <code>:wolf:</code></td>
</tr>
<tr>
<td>😀 <code>:grinning:</code></td>
<td>🌆 <code>:city_sunset:</code></td>
<td>🔔 <code>:bell:</code></td>
<td>⬇️ <code>:arrow_down:</code></td>
<td style="text-align:left">🐸 <code>:frog:</code></td>
</tr>
<tr>
<td>😗 <code>:kissing:</code></td>
<td>🏯 <code>:japanese_castle:</code></td>
<td>🔕 <code>:no_bell:</code></td>
<td>▶️ <code>:arrow_forward:</code></td>
<td style="text-align:left">🐯 <code>:tiger:</code></td>
</tr>
<tr>
<td>😙 <code>:kissing_smiling_eyes:</code></td>
<td>🏰 <code>:european_castle:</code></td>
<td>🎋 <code>:tanabata_tree:</code></td>
<td>⬅️ <code>:arrow_left:</code></td>
<td style="text-align:left">🐨 <code>:koala:</code></td>
</tr>
<tr>
<td>😛 <code>:stuck_out_tongue:</code></td>
<td>⛺ <code>:tent:</code></td>
<td>🎉 <code>:tada:</code></td>
<td>🔠 <code>:capital_abcd:</code></td>
<td style="text-align:left">🐻 <code>:bear:</code></td>
</tr>
<tr>
<td>😴 <code>:sleeping:</code></td>
<td>🏭 <code>:factory:</code></td>
<td>🎊 <code>:confetti_ball:</code></td>
<td>🔡 <code>:abcd:</code></td>
<td style="text-align:left">🐷 <code>:pig:</code></td>
</tr>
<tr>
<td>😟 <code>:worried:</code></td>
<td>🗼 <code>:tokyo_tower:</code></td>
<td>🎈 <code>:balloon:</code></td>
<td>🔤 <code>:abc:</code></td>
<td style="text-align:left">🐽 <code>:pig_nose:</code></td>
</tr>
<tr>
<td>😦 <code>:frowning:</code></td>
<td>🗾 <code>:japan:</code></td>
<td>🔮 <code>:crystal_ball:</code></td>
<td>↙️ <code>:arrow_lower_left:</code></td>
<td style="text-align:left">🐮 <code>:cow:</code></td>
</tr>
<tr>
<td>😧 <code>:anguished:</code></td>
<td>🗻 <code>:mount_fuji:</code></td>
<td>💿 <code>:cd:</code></td>
<td>↘️ <code>:arrow_lower_right:</code></td>
<td style="text-align:left">🐗 <code>:boar:</code></td>
</tr>
<tr>
<td>😮 <code>:open_mouth:</code></td>
<td>🌄 <code>:sunrise_over_mountains:</code></td>
<td>📀 <code>:dvd:</code></td>
<td>➡️ <code>:arrow_right:</code></td>
<td style="text-align:left">🐵 <code>:monkey_face:</code></td>
</tr>
<tr>
<td>😬 <code>:grimacing:</code></td>
<td>🌅 <code>:sunrise:</code></td>
<td>💾 <code>:floppy_disk:</code></td>
<td>⬆️ <code>:arrow_up:</code></td>
<td style="text-align:left">🐒 <code>:monkey:</code></td>
</tr>
<tr>
<td>😕 <code>:confused:</code></td>
<td>🌠 <code>:stars:</code></td>
<td>📷 <code>:camera:</code></td>
<td>↖️ <code>:arrow_upper_left:</code></td>
<td style="text-align:left">🐴 <code>:horse:</code></td>
</tr>
<tr>
<td>😯 <code>:hushed:</code></td>
<td>🗽 <code>:statue_of_liberty:</code></td>
<td>📹 <code>:video_camera:</code></td>
<td>↗️ <code>:arrow_upper_right:</code></td>
<td style="text-align:left">🐎 <code>:racehorse:</code></td>
</tr>
<tr>
<td>😑 <code>:expressionless:</code></td>
<td>🌉 <code>:bridge_at_night:</code></td>
<td>🎥 <code>:movie_camera:</code></td>
<td>⏬ <code>:arrow_double_down:</code></td>
<td style="text-align:left">🐫 <code>:camel:</code></td>
</tr>
<tr>
<td>😒 <code>:unamused:</code></td>
<td>🎠 <code>:carousel_horse:</code></td>
<td>💻 <code>:computer:</code></td>
<td>⏫ <code>:arrow_double_up:</code></td>
<td style="text-align:left">🐑 <code>:sheep:</code></td>
</tr>
<tr>
<td>😅 <code>:sweat_smile:</code></td>
<td>🌈 <code>:rainbow:</code></td>
<td>📺 <code>:tv:</code></td>
<td>🔽 <code>:arrow_down_small:</code></td>
<td style="text-align:left">🐘 <code>:elephant:</code></td>
</tr>
<tr>
<td>😓 <code>:sweat:</code></td>
<td>🎡 <code>:ferris_wheel:</code></td>
<td>📱 <code>:iphone:</code></td>
<td>⤵️ <code>:arrow_heading_down:</code></td>
<td style="text-align:left">🐼 <code>:panda_face:</code></td>
</tr>
<tr>
<td>😥 <code>:disappointed_relieved:</code></td>
<td>⛲ <code>:fountain:</code></td>
<td>☎️ <code>:phone:</code></td>
<td>⤴️ <code>:arrow_heading_up:</code></td>
<td style="text-align:left">🐍 <code>:snake:</code></td>
</tr>
<tr>
<td>😩 <code>:weary:</code></td>
<td>🎢 <code>:roller_coaster:</code></td>
<td>☎️ <code>:telephone:</code></td>
<td>↩️ <code>:leftwards_arrow_with_hook:</code></td>
<td style="text-align:left">🐦 <code>:bird:</code></td>
</tr>
<tr>
<td>😔 <code>:pensive:</code></td>
<td>🚢 <code>:ship:</code></td>
<td>📞 <code>:telephone_receiver:</code></td>
<td>↪️ <code>:arrow_right_hook:</code></td>
<td style="text-align:left">🐤 <code>:baby_chick:</code></td>
</tr>
<tr>
<td>😞 <code>:disappointed:</code></td>
<td>🚤 <code>:speedboat:</code></td>
<td>📟 <code>:pager:</code></td>
<td>↔️ <code>:left_right_arrow:</code></td>
<td style="text-align:left">🐥 <code>:hatched_chick:</code></td>
</tr>
<tr>
<td>😖 <code>:confounded:</code></td>
<td>⛵ <code>:boat:</code></td>
<td>📠 <code>:fax:</code></td>
<td>↕️ <code>:arrow_up_down:</code></td>
<td style="text-align:left">🐣 <code>:hatching_chick:</code></td>
</tr>
<tr>
<td>😨 <code>:fearful:</code></td>
<td>⛵ <code>:sailboat:</code></td>
<td>💽 <code>:minidisc:</code></td>
<td>🔼 <code>:arrow_up_small:</code></td>
<td style="text-align:left">🐔 <code>:chicken:</code></td>
</tr>
<tr>
<td>😰 <code>:cold_sweat:</code></td>
<td>🚣 <code>:rowboat:</code></td>
<td>📼 <code>:vhs:</code></td>
<td>🔃 <code>:arrows_clockwise:</code></td>
<td style="text-align:left">🐧 <code>:penguin:</code></td>
</tr>
<tr>
<td>😣 <code>:persevere:</code></td>
<td>⚓ <code>:anchor:</code></td>
<td>🔉 <code>:sound:</code></td>
<td>🔄 <code>:arrows_counterclockwise:</code></td>
<td style="text-align:left">🐢 <code>:turtle:</code></td>
</tr>
<tr>
<td>😢 <code>:cry:</code></td>
<td>🚀 <code>:rocket:</code></td>
<td>🔈 <code>:speaker:</code></td>
<td>⏪ <code>:rewind:</code></td>
<td style="text-align:left">🐛 <code>:bug:</code></td>
</tr>
<tr>
<td>😭 <code>:sob:</code></td>
<td>✈️ <code>:airplane:</code></td>
<td>🔇 <code>:mute:</code></td>
<td>⏩ <code>:fast_forward:</code></td>
<td style="text-align:left">🐝 <code>:honeybee:</code></td>
</tr>
<tr>
<td>😂 <code>:joy:</code></td>
<td>🚁 <code>:helicopter:</code></td>
<td>📢 <code>:loudspeaker:</code></td>
<td>ℹ️ <code>:information_source:</code></td>
<td style="text-align:left">🐜 <code>:ant:</code></td>
</tr>
<tr>
<td>😲 <code>:astonished:</code></td>
<td>🚂 <code>:steam_locomotive:</code></td>
<td>📣 <code>:mega:</code></td>
<td>🆗 <code>:ok:</code></td>
<td style="text-align:left">🪲 <code>:beetle:</code></td>
</tr>
<tr>
<td>😱 <code>:scream:</code></td>
<td>🚊 <code>:tram:</code></td>
<td>⌛ <code>:hourglass:</code></td>
<td>🔀 <code>:twisted_rightwards_arrows:</code></td>
<td style="text-align:left">🐌 <code>:snail:</code></td>
</tr>
<tr>
<td>😫 <code>:tired_face:</code></td>
<td>🚞 <code>:mountain_railway:</code></td>
<td>⏳ <code>:hourglass_flowing_sand:</code></td>
<td>🔁 <code>:repeat:</code></td>
<td style="text-align:left">🐙 <code>:octopus:</code></td>
</tr>
<tr>
<td>😠 <code>:angry:</code></td>
<td>🚲 <code>:bike:</code></td>
<td>⏰ <code>:alarm_clock:</code></td>
<td>🔂 <code>:repeat_one:</code></td>
<td style="text-align:left">🐠 <code>:tropical_fish:</code></td>
</tr>
<tr>
<td>😡 <code>:rage:</code></td>
<td>🚡 <code>:aerial_tramway:</code></td>
<td>⌚ <code>:watch:</code></td>
<td>🆕 <code>:new:</code></td>
<td style="text-align:left">🐟 <code>:fish:</code></td>
</tr>
<tr>
<td>😤 <code>:triumph:</code></td>
<td>🚟 <code>:suspension_railway:</code></td>
<td>📻 <code>:radio:</code></td>
<td>🔝 <code>:top:</code></td>
<td style="text-align:left">🐳 <code>:whale:</code></td>
</tr>
<tr>
<td>😪 <code>:sleepy:</code></td>
<td>🚠 <code>:mountain_cableway:</code></td>
<td>📡 <code>:satellite:</code></td>
<td>🆙 <code>:up:</code></td>
<td style="text-align:left">🐋 <code>:whale2:</code></td>
</tr>
<tr>
<td>😋 <code>:yum:</code></td>
<td>🚜 <code>:tractor:</code></td>
<td>➿ <code>:loop:</code></td>
<td>🆒 <code>:cool:</code></td>
<td style="text-align:left">🐬 <code>:dolphin:</code></td>
</tr>
<tr>
<td>😷 <code>:mask:</code></td>
<td>🚙 <code>:blue_car:</code></td>
<td>🔍 <code>:mag:</code></td>
<td>🆓 <code>:free:</code></td>
<td style="text-align:left">🐄 <code>:cow2:</code></td>
</tr>
<tr>
<td>😎 <code>:sunglasses:</code></td>
<td>🚘 <code>:oncoming_automobile:</code></td>
<td>🔎 <code>:mag_right:</code></td>
<td>🆖 <code>:ng:</code></td>
<td style="text-align:left">🐏 <code>:ram:</code></td>
</tr>
<tr>
<td>😵 <code>:dizzy_face:</code></td>
<td>🚗 <code>:car:</code></td>
<td>🔓 <code>:unlock:</code></td>
<td>🎦 <code>:cinema:</code></td>
<td style="text-align:left">🐀 <code>:rat:</code></td>
</tr>
<tr>
<td>👿 <code>:imp:</code></td>
<td>🚗 <code>:red_car:</code></td>
<td>🔒 <code>:lock:</code></td>
<td>🈁 <code>:koko:</code></td>
<td style="text-align:left">🐃 <code>:water_buffalo:</code></td>
</tr>
<tr>
<td>😈 <code>:smiling_imp:</code></td>
<td>🚕 <code>:taxi:</code></td>
<td>🔏 <code>:lock_with_ink_pen:</code></td>
<td>📶 <code>:signal_strength:</code></td>
<td style="text-align:left">🐅 <code>:tiger2:</code></td>
</tr>
<tr>
<td>😐 <code>:neutral_face:</code></td>
<td>🚖 <code>:oncoming_taxi:</code></td>
<td>🔐 <code>:closed_lock_with_key:</code></td>
<td>🈂️ <code>:sa:</code></td>
<td style="text-align:left">🐇 <code>:rabbit2:</code></td>
</tr>
<tr>
<td>😶 <code>:no_mouth:</code></td>
<td>🚛 <code>:articulated_lorry:</code></td>
<td>🔑 <code>:key:</code></td>
<td>🚻 <code>:restroom:</code></td>
<td style="text-align:left">🐉 <code>:dragon:</code></td>
</tr>
<tr>
<td>😇 <code>:innocent:</code></td>
<td>🚌 <code>:bus:</code></td>
<td>💡 <code>:bulb:</code></td>
<td>🚹 <code>:mens:</code></td>
<td style="text-align:left">🐐 <code>:goat:</code></td>
</tr>
<tr>
<td>👽 <code>:alien:</code></td>
<td>🚍 <code>:oncoming_bus:</code></td>
<td>🔦 <code>:flashlight:</code></td>
<td>🚺 <code>:womens:</code></td>
<td style="text-align:left">🐓 <code>:rooster:</code></td>
</tr>
<tr>
<td>💛 <code>:yellow_heart:</code></td>
<td>🚨 <code>:rotating_light:</code></td>
<td>🔆 <code>:high_brightness:</code></td>
<td>🚼 <code>:baby_symbol:</code></td>
<td style="text-align:left">🐕 <code>:dog2:</code></td>
</tr>
<tr>
<td>💙 <code>:blue_heart:</code></td>
<td>🚓 <code>:police_car:</code></td>
<td>🔅 <code>:low_brightness:</code></td>
<td>🚭 <code>:no_smoking:</code></td>
<td style="text-align:left">🐖 <code>:pig2:</code></td>
</tr>
<tr>
<td>💜 <code>:purple_heart:</code></td>
<td>🚔 <code>:oncoming_police_car:</code></td>
<td>🔌 <code>:electric_plug:</code></td>
<td>🅿️ <code>:parking:</code></td>
<td style="text-align:left">🐁 <code>:mouse2:</code></td>
</tr>
<tr>
<td>❤️ <code>:heart:</code></td>
<td>🚒 <code>:fire_engine:</code></td>
<td>🔋 <code>:battery:</code></td>
<td>♿ <code>:wheelchair:</code></td>
<td style="text-align:left">🐂 <code>:ox:</code></td>
</tr>
<tr>
<td>💚 <code>:green_heart:</code></td>
<td>🚑 <code>:ambulance:</code></td>
<td>📲 <code>:calling:</code></td>
<td>🚇 <code>:metro:</code></td>
<td style="text-align:left">🐲 <code>:dragon_face:</code></td>
</tr>
<tr>
<td>💔 <code>:broken_heart:</code></td>
<td>🚐 <code>:minibus:</code></td>
<td>📧 <code>:email:</code></td>
<td>🛄 <code>:baggage_claim:</code></td>
<td style="text-align:left">🐡 <code>:blowfish:</code></td>
</tr>
<tr>
<td>💓 <code>:heartbeat:</code></td>
<td>🚚 <code>:truck:</code></td>
<td>📫 <code>:mailbox:</code></td>
<td>🉑 <code>:accept:</code></td>
<td style="text-align:left">🐊 <code>:crocodile:</code></td>
</tr>
<tr>
<td>💗 <code>:heartpulse:</code></td>
<td>🚋 <code>:train:</code></td>
<td>📮 <code>:postbox:</code></td>
<td>🚾 <code>:wc:</code></td>
<td style="text-align:left">🐪 <code>:dromedary_camel:</code></td>
</tr>
<tr>
<td>💕 <code>:two_hearts:</code></td>
<td>🚉 <code>:station:</code></td>
<td>🛀 <code>:bath:</code></td>
<td>🚰 <code>:potable_water:</code></td>
<td style="text-align:left">🐆 <code>:leopard:</code></td>
</tr>
<tr>
<td>💞 <code>:revolving_hearts:</code></td>
<td>🚆 <code>:train2:</code></td>
<td>🛁 <code>:bathtub:</code></td>
<td>🚮 <code>:put_litter_in_its_place:</code></td>
<td style="text-align:left">🐈 <code>:cat2:</code></td>
</tr>
<tr>
<td>💘 <code>:cupid:</code></td>
<td>🚅 <code>:bullettrain_front:</code></td>
<td>🚿 <code>:shower:</code></td>
<td>㊙️ <code>:secret:</code></td>
<td style="text-align:left">🐩 <code>:poodle:</code></td>
</tr>
<tr>
<td>💖 <code>:sparkling_heart:</code></td>
<td>🚄 <code>:bullettrain_side:</code></td>
<td>🚽 <code>:toilet:</code></td>
<td>㊗️ <code>:congratulations:</code></td>
<td style="text-align:left">🐾 <code>:paw_prints:</code></td>
</tr>
<tr>
<td>✨ <code>:sparkles:</code></td>
<td>🚈 <code>:light_rail:</code></td>
<td>🔧 <code>:wrench:</code></td>
<td>Ⓜ️ <code>:m:</code></td>
<td style="text-align:left">💐 <code>:bouquet:</code></td>
</tr>
<tr>
<td>⭐ <code>:star:</code></td>
<td>🚝 <code>:monorail:</code></td>
<td>🔩 <code>:nut_and_bolt:</code></td>
<td>🛂 <code>:passport_control:</code></td>
<td style="text-align:left">🌸 <code>:cherry_blossom:</code></td>
</tr>
<tr>
<td>🌟 <code>:star2:</code></td>
<td>🚃 <code>:railway_car:</code></td>
<td>🔨 <code>:hammer:</code></td>
<td>🛅 <code>:left_luggage:</code></td>
<td style="text-align:left">🌷 <code>:tulip:</code></td>
</tr>
<tr>
<td>💫 <code>:dizzy:</code></td>
<td>🚎 <code>:trolleybus:</code></td>
<td>💺 <code>:seat:</code></td>
<td>🛃 <code>:customs:</code></td>
<td style="text-align:left">🍀 <code>:four_leaf_clover:</code></td>
</tr>
<tr>
<td>💥 <code>:boom:</code></td>
<td>🎫 <code>:ticket:</code></td>
<td>💰 <code>:moneybag:</code></td>
<td>🉐 <code>:ideograph_advantage:</code></td>
<td style="text-align:left">🌹 <code>:rose:</code></td>
</tr>
<tr>
<td>💥 <code>:collision:</code></td>
<td>⛽ <code>:fuelpump:</code></td>
<td>💴 <code>:yen:</code></td>
<td>🆑 <code>:cl:</code></td>
<td style="text-align:left">🌻 <code>:sunflower:</code></td>
</tr>
<tr>
<td>💢 <code>:anger:</code></td>
<td>🚦 <code>:vertical_traffic_light:</code></td>
<td>💵 <code>:dollar:</code></td>
<td>🆘 <code>:sos:</code></td>
<td style="text-align:left">🌺 <code>:hibiscus:</code></td>
</tr>
<tr>
<td>❗ <code>:exclamation:</code></td>
<td>🚥 <code>:traffic_light:</code></td>
<td>💷 <code>:pound:</code></td>
<td>🆔 <code>:id:</code></td>
<td style="text-align:left">🍁 <code>:maple_leaf:</code></td>
</tr>
<tr>
<td>❓ <code>:question:</code></td>
<td>⚠️ <code>:warning:</code></td>
<td>💶 <code>:euro:</code></td>
<td>🚫 <code>:no_entry_sign:</code></td>
<td style="text-align:left">🍃 <code>:leaves:</code></td>
</tr>
<tr>
<td>❕ <code>:grey_exclamation:</code></td>
<td>🚧 <code>:construction:</code></td>
<td>💳 <code>:credit_card:</code></td>
<td>🔞 <code>:underage:</code></td>
<td style="text-align:left">🍂 <code>:fallen_leaf:</code></td>
</tr>
<tr>
<td>❔ <code>:grey_question:</code></td>
<td>🔰 <code>:beginner:</code></td>
<td>💸 <code>:money_with_wings:</code></td>
<td>📵 <code>:no_mobile_phones:</code></td>
<td style="text-align:left">🌿 <code>:herb:</code></td>
</tr>
<tr>
<td>💤 <code>:zzz:</code></td>
<td>🏧 <code>:atm:</code></td>
<td>📧 <code>:e-mail:</code></td>
<td>🚯 <code>:do_not_litter:</code></td>
<td style="text-align:left">🍄 <code>:mushroom:</code></td>
</tr>
<tr>
<td>💨 <code>:dash:</code></td>
<td>🎰 <code>:slot_machine:</code></td>
<td>📥 <code>:inbox_tray:</code></td>
<td>🚱 <code>:non-potable_water:</code></td>
<td style="text-align:left">🌵 <code>:cactus:</code></td>
</tr>
<tr>
<td>💦 <code>:sweat_drops:</code></td>
<td>🚏 <code>:busstop:</code></td>
<td>📤 <code>:outbox_tray:</code></td>
<td>🚳 <code>:no_bicycles:</code></td>
<td style="text-align:left">🌴 <code>:palm_tree:</code></td>
</tr>
<tr>
<td>🎶 <code>:notes:</code></td>
<td>💈 <code>:barber:</code></td>
<td>✉️ <code>:envelope:</code></td>
<td>🚷 <code>:no_pedestrians:</code></td>
<td style="text-align:left">🌲 <code>:evergreen_tree:</code></td>
</tr>
<tr>
<td>🎵 <code>:musical_note:</code></td>
<td>♨️ <code>:hotsprings:</code></td>
<td>📨 <code>:incoming_envelope:</code></td>
<td>🚸 <code>:children_crossing:</code></td>
<td style="text-align:left">🌳 <code>:deciduous_tree:</code></td>
</tr>
<tr>
<td>🔥 <code>:fire:</code></td>
<td>🏁 <code>:checkered_flag:</code></td>
<td>📯 <code>:postal_horn:</code></td>
<td>⛔ <code>:no_entry:</code></td>
<td style="text-align:left">🌰 <code>:chestnut:</code></td>
</tr>
<tr>
<td>💩 <code>:hankey:</code></td>
<td>🎌 <code>:crossed_flags:</code></td>
<td>📪 <code>:mailbox_closed:</code></td>
<td>✳️ <code>:eight_spoked_asterisk:</code></td>
<td style="text-align:left">🌱 <code>:seedling:</code></td>
</tr>
<tr>
<td>💩 <code>:poop:</code></td>
<td>🏮 <code>:izakaya_lantern:</code></td>
<td>📬 <code>:mailbox_with_mail:</code></td>
<td>❇️ <code>:sparkle:</code></td>
<td style="text-align:left">🌼 <code>:blossom:</code></td>
</tr>
<tr>
<td>💩 <code>:shit:</code></td>
<td>🗿 <code>:moyai:</code></td>
<td>📭 <code>:mailbox_with_no_mail:</code></td>
<td>✴️ <code>:eight_pointed_black_star:</code></td>
<td style="text-align:left">🌾 <code>:ear_of_rice:</code></td>
</tr>
<tr>
<td>👍 <code>:+1:</code></td>
<td>🎪 <code>:circus_tent:</code></td>
<td>📦 <code>:package:</code></td>
<td>💟 <code>:heart_decoration:</code></td>
<td style="text-align:left">🐚 <code>:shell:</code></td>
</tr>
<tr>
<td>👍 <code>:thumbsup:</code></td>
<td>🎭 <code>:performing_arts:</code></td>
<td>🚪 <code>:door:</code></td>
<td>🆚 <code>:vs:</code></td>
<td style="text-align:left">🌐 <code>:globe_with_meridians:</code></td>
</tr>
<tr>
<td>👎 <code>:-1:</code></td>
<td>📍 <code>:round_pushpin:</code></td>
<td>🚬 <code>:smoking:</code></td>
<td>📳 <code>:vibration_mode:</code></td>
<td style="text-align:left">🌞 <code>:sun_with_face:</code></td>
</tr>
<tr>
<td>👎 <code>:thumbsdown:</code></td>
<td>🚩 <code>:triangular_flag_on_post:</code></td>
<td>💣 <code>:bomb:</code></td>
<td>📴 <code>:mobile_phone_off:</code></td>
<td style="text-align:left">🌝 <code>:full_moon_with_face:</code></td>
</tr>
<tr>
<td>👌 <code>:ok_hand:</code></td>
<td></td>
<td>🔫 <code>:gun:</code></td>
<td>💹 <code>:chart:</code></td>
<td style="text-align:left">🌚 <code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td>👊 <code>:punch:</code></td>
<td></td>
<td>🔪 <code>:hocho:</code></td>
<td>💱 <code>:currency_exchange:</code></td>
<td style="text-align:left">🌑 <code>:new_moon:</code></td>
</tr>
<tr>
<td>👊 <code>:facepunch:</code></td>
<td></td>
<td>💊 <code>:pill:</code></td>
<td>♈ <code>:aries:</code></td>
<td style="text-align:left">🌒 <code>:waxing_crescent_moon:</code></td>
</tr>
<tr>
<td>✊ <code>:fist:</code></td>
<td></td>
<td>💉 <code>:syringe:</code></td>
<td>♉ <code>:taurus:</code></td>
<td style="text-align:left">🌓 <code>:first_quarter_moon:</code></td>
</tr>
<tr>
<td>✌️ <code>:v:</code></td>
<td></td>
<td>📄 <code>:page_facing_up:</code></td>
<td>♊ <code>:gemini:</code></td>
<td style="text-align:left">🌔 <code>:waxing_gibbous_moon:</code></td>
</tr>
<tr>
<td>👋 <code>:wave:</code></td>
<td></td>
<td>📃 <code>:page_with_curl:</code></td>
<td>♋ <code>:cancer:</code></td>
<td style="text-align:left">🌕 <code>:full_moon:</code></td>
</tr>
<tr>
<td>✋ <code>:hand:</code></td>
<td></td>
<td>📑 <code>:bookmark_tabs:</code></td>
<td>♌ <code>:leo:</code></td>
<td style="text-align:left">🌖 <code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td>✋ <code>:raised_hand:</code></td>
<td></td>
<td>📊 <code>:bar_chart:</code></td>
<td>♍ <code>:virgo:</code></td>
<td style="text-align:left">🌗 <code>:last_quarter_moon:</code></td>
</tr>
<tr>
<td>👐 <code>:open_hands:</code></td>
<td></td>
<td>📈 <code>:chart_with_upwards_trend:</code></td>
<td>♎ <code>:libra:</code></td>
<td style="text-align:left">🌘 <code>:waning_crescent_moon:</code></td>
</tr>
<tr>
<td>☝️ <code>:point_up:</code></td>
<td></td>
<td>📉 <code>:chart_with_downwards_trend:</code></td>
<td>♏ <code>:scorpius:</code></td>
<td style="text-align:left">🌜 <code>:last_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td>👇 <code>:point_down:</code></td>
<td></td>
<td>📜 <code>:scroll:</code></td>
<td>♐ <code>:sagittarius:</code></td>
<td style="text-align:left">🌛 <code>:first_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td>👈 <code>:point_left:</code></td>
<td></td>
<td>📋 <code>:clipboard:</code></td>
<td>♑ <code>:capricorn:</code></td>
<td style="text-align:left">🌙 <code>:crescent_moon:</code></td>
</tr>
<tr>
<td>👉 <code>:point_right:</code></td>
<td></td>
<td>📆 <code>:calendar:</code></td>
<td>♒ <code>:aquarius:</code></td>
<td style="text-align:left">🌍 <code>:earth_africa:</code></td>
</tr>
<tr>
<td>🙌 <code>:raised_hands:</code></td>
<td></td>
<td>📅 <code>:date:</code></td>
<td>♓ <code>:pisces:</code></td>
<td style="text-align:left">🌎 <code>:earth_americas:</code></td>
</tr>
<tr>
<td>🙏 <code>:pray:</code></td>
<td></td>
<td>📇 <code>:card_index:</code></td>
<td>⛎ <code>:ophiuchus:</code></td>
<td style="text-align:left">🌏 <code>:earth_asia:</code></td>
</tr>
<tr>
<td>👆 <code>:point_up_2:</code></td>
<td></td>
<td>📁 <code>:file_folder:</code></td>
<td>🔯 <code>:six_pointed_star:</code></td>
<td style="text-align:left">🌋 <code>:volcano:</code></td>
</tr>
<tr>
<td>👏 <code>:clap:</code></td>
<td></td>
<td>📂 <code>:open_file_folder:</code></td>
<td>❎ <code>:negative_squared_cross_mark:</code></td>
<td style="text-align:left">🌌 <code>:milky_way:</code></td>
</tr>
<tr>
<td>💪 <code>:muscle:</code></td>
<td></td>
<td>✂️ <code>:scissors:</code></td>
<td>🅰️ <code>:a:</code></td>
<td style="text-align:left">⛅ <code>:partly_sunny:</code></td>
</tr>
<tr>
<td>🤘 <code>:metal:</code></td>
<td></td>
<td>📌 <code>:pushpin:</code></td>
<td>🅱️ <code>:b:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🖕 <code>:fu:</code></td>
<td></td>
<td>📎 <code>:paperclip:</code></td>
<td>🆎 <code>:ab:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🏃 <code>:runner:</code></td>
<td></td>
<td>✒️ <code>:black_nib:</code></td>
<td>🅾️ <code>:o2:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🏃 <code>:running:</code></td>
<td></td>
<td>✏️ <code>:pencil2:</code></td>
<td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👫 <code>:couple:</code></td>
<td></td>
<td>📏 <code>:straight_ruler:</code></td>
<td>♻️ <code>:recycle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👪 <code>:family:</code></td>
<td></td>
<td>📐 <code>:triangular_ruler:</code></td>
<td>🔚 <code>:end:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👬 <code>:two_men_holding_hands:</code></td>
<td></td>
<td>📕 <code>:closed_book:</code></td>
<td>🔙 <code>:back:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👭 <code>:two_women_holding_hands:</code></td>
<td></td>
<td>📗 <code>:green_book:</code></td>
<td>🔛 <code>:on:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💃 <code>:dancer:</code></td>
<td></td>
<td>📘 <code>:blue_book:</code></td>
<td>🔜 <code>:soon:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👯 <code>:dancers:</code></td>
<td></td>
<td>📙 <code>:orange_book:</code></td>
<td>🕐 <code>:clock1:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙆‍♀️ <code>:ok_woman:</code></td>
<td></td>
<td>📓 <code>:notebook:</code></td>
<td>🕜 <code>:clock130:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙅 <code>:no_good:</code></td>
<td></td>
<td>📔 <code>:notebook_with_decorative_cover:</code></td>
<td>🕙 <code>:clock10:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💁 <code>:information_desk_person:</code></td>
<td></td>
<td>📒 <code>:ledger:</code></td>
<td>🕥 <code>:clock1030:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙋 <code>:raising_hand:</code></td>
<td></td>
<td>📚 <code>:books:</code></td>
<td>🕚 <code>:clock11:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👰‍♀️ <code>:bride_with_veil:</code></td>
<td></td>
<td>🔖 <code>:bookmark:</code></td>
<td>🕦 <code>:clock1130:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>:person_with_pouting_face: <code>:person_with_pouting_face:</code></td>
<td></td>
<td>📛 <code>:name_badge:</code></td>
<td>🕛 <code>:clock12:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>:person_frowning: <code>:person_frowning:</code></td>
<td></td>
<td>🔬 <code>:microscope:</code></td>
<td>🕧 <code>:clock1230:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙇 <code>:bow:</code></td>
<td></td>
<td>🔭 <code>:telescope:</code></td>
<td>🕑 <code>:clock2:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💑 <code>:couple_with_heart:</code></td>
<td></td>
<td>📰 <code>:newspaper:</code></td>
<td>🕝 <code>:clock230:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💆 <code>:massage:</code></td>
<td></td>
<td>🏈 <code>:football:</code></td>
<td>🕒 <code>:clock3:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💇 <code>:haircut:</code></td>
<td></td>
<td>🏀 <code>:basketball:</code></td>
<td>🕞 <code>:clock330:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💅 <code>:nail_care:</code></td>
<td></td>
<td>⚽ <code>:soccer:</code></td>
<td>🕓 <code>:clock4:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👦 <code>:boy:</code></td>
<td></td>
<td>⚾ <code>:baseball:</code></td>
<td>🕟 <code>:clock430:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👧 <code>:girl:</code></td>
<td></td>
<td>🎾 <code>:tennis:</code></td>
<td>🕔 <code>:clock5:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👩 <code>:woman:</code></td>
<td></td>
<td>🎱 <code>:8ball:</code></td>
<td>🕠 <code>:clock530:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👨 <code>:man:</code></td>
<td></td>
<td>🏉 <code>:rugby_football:</code></td>
<td>🕕 <code>:clock6:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👶 <code>:baby:</code></td>
<td></td>
<td>🎳 <code>:bowling:</code></td>
<td>🕡 <code>:clock630:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👵 <code>:older_woman:</code></td>
<td></td>
<td>⛳ <code>:golf:</code></td>
<td>🕖 <code>:clock7:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👴 <code>:older_man:</code></td>
<td></td>
<td>🚵 <code>:mountain_bicyclist:</code></td>
<td>🕢 <code>:clock730:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td>
<td></td>
<td>🚴 <code>:bicyclist:</code></td>
<td>🕗 <code>:clock8:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👲 <code>:man_with_gua_pi_mao:</code></td>
<td></td>
<td>🏇 <code>:horse_racing:</code></td>
<td>🕣 <code>:clock830:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👳‍♂️ <code>:man_with_turban:</code></td>
<td></td>
<td>🏂 <code>:snowboarder:</code></td>
<td>🕘 <code>:clock9:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👷 <code>:construction_worker:</code></td>
<td></td>
<td>🏊 <code>:swimmer:</code></td>
<td>🕤 <code>:clock930:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👮 <code>:cop:</code></td>
<td></td>
<td>🏄 <code>:surfer:</code></td>
<td>💲 <code>:heavy_dollar_sign:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👼 <code>:angel:</code></td>
<td></td>
<td>🎿 <code>:ski:</code></td>
<td>©️ <code>:copyright:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👸 <code>:princess:</code></td>
<td></td>
<td>♠️ <code>:spades:</code></td>
<td>®️ <code>:registered:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😺 <code>:smiley_cat:</code></td>
<td></td>
<td>♥️ <code>:hearts:</code></td>
<td>™️ <code>:tm:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😸 <code>:smile_cat:</code></td>
<td></td>
<td>♣️ <code>:clubs:</code></td>
<td>❌ <code>:x:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😻 <code>:heart_eyes_cat:</code></td>
<td></td>
<td>♦️ <code>:diamonds:</code></td>
<td>❗ <code>:heavy_exclamation_mark:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😽 <code>:kissing_cat:</code></td>
<td></td>
<td>💎 <code>:gem:</code></td>
<td>‼️ <code>:bangbang:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😼 <code>:smirk_cat:</code></td>
<td></td>
<td>💍 <code>:ring:</code></td>
<td>⁉️ <code>:interrobang:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙀 <code>:scream_cat:</code></td>
<td></td>
<td>🏆 <code>:trophy:</code></td>
<td>⭕ <code>:o:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😿 <code>:crying_cat_face:</code></td>
<td></td>
<td>🎼 <code>:musical_score:</code></td>
<td>✖️ <code>:heavy_multiplication_x:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😹 <code>:joy_cat:</code></td>
<td></td>
<td>🎹 <code>:musical_keyboard:</code></td>
<td>➕ <code>:heavy_plus_sign:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>😾 <code>:pouting_cat:</code></td>
<td></td>
<td>🎻 <code>:violin:</code></td>
<td>➖ <code>:heavy_minus_sign:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👹 <code>:japanese_ogre:</code></td>
<td></td>
<td>👾 <code>:space_invader:</code></td>
<td>➗ <code>:heavy_division_sign:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👺 <code>:japanese_goblin:</code></td>
<td></td>
<td>🎮 <code>:video_game:</code></td>
<td>💮 <code>:white_flower:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙈 <code>:see_no_evil:</code></td>
<td></td>
<td>🃏 <code>:black_joker:</code></td>
<td>💯 <code>:100:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙉 <code>:hear_no_evil:</code></td>
<td></td>
<td>🎴 <code>:flower_playing_cards:</code></td>
<td>✔️ <code>:heavy_check_mark:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🙊 <code>:speak_no_evil:</code></td>
<td></td>
<td>🎲 <code>:game_die:</code></td>
<td>☑️ <code>:ballot_box_with_check:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💂‍♂️ <code>:guardsman:</code></td>
<td></td>
<td>🎯 <code>:dart:</code></td>
<td>🔘 <code>:radio_button:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💀 <code>:skull:</code></td>
<td></td>
<td>🀄 <code>:mahjong:</code></td>
<td>🔗 <code>:link:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>🐾 <code>:feet:</code></td>
<td></td>
<td>🎬 <code>:clapper:</code></td>
<td>➰ <code>:curly_loop:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👄 <code>:lips:</code></td>
<td></td>
<td>📝 <code>:memo:</code></td>
<td>〰️ <code>:wavy_dash:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💋 <code>:kiss:</code></td>
<td></td>
<td>📝 <code>:pencil:</code></td>
<td>〽️ <code>:part_alternation_mark:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💧 <code>:droplet:</code></td>
<td></td>
<td>📖 <code>:book:</code></td>
<td>🔱 <code>:trident:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👂 <code>:ear:</code></td>
<td></td>
<td>🎨 <code>:art:</code></td>
<td>▪️ <code>:black_small_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👀 <code>:eyes:</code></td>
<td></td>
<td>🎤 <code>:microphone:</code></td>
<td>▫️ <code>:white_small_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👃 <code>:nose:</code></td>
<td></td>
<td>🎧 <code>:headphones:</code></td>
<td>◾ <code>:black_medium_small_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👅 <code>:tongue:</code></td>
<td></td>
<td>🎺 <code>:trumpet:</code></td>
<td>◽ <code>:white_medium_small_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💌 <code>:love_letter:</code></td>
<td></td>
<td>🎷 <code>:saxophone:</code></td>
<td>◼️ <code>:black_medium_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👤 <code>:bust_in_silhouette:</code></td>
<td></td>
<td>🎸 <code>:guitar:</code></td>
<td>◻️ <code>:white_medium_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>👥 <code>:busts_in_silhouette:</code></td>
<td></td>
<td>👞 <code>:shoe:</code></td>
<td>⬛ <code>:black_large_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💬 <code>:speech_balloon:</code></td>
<td></td>
<td>👡 <code>:sandal:</code></td>
<td>⬜ <code>:white_large_square:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td>💭 <code>:thought_balloon:</code></td>
<td></td>
<td>👠 <code>:high_heel:</code></td>
<td>✅ <code>:white_check_mark:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>💄 <code>:lipstick:</code></td>
<td>🔲 <code>:black_square_button:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👢 <code>:boot:</code></td>
<td>🔳 <code>:white_square_button:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👕 <code>:shirt:</code></td>
<td>⚫ <code>:black_circle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👕 <code>:tshirt:</code></td>
<td>⚪ <code>:white_circle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👔 <code>:necktie:</code></td>
<td>🔴 <code>:red_circle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👚 <code>:womans_clothes:</code></td>
<td>🔵 <code>:large_blue_circle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👗 <code>:dress:</code></td>
<td>🔷 <code>:large_blue_diamond:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🎽 <code>:running_shirt_with_sash:</code></td>
<td>🔶 <code>:large_orange_diamond:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👖 <code>:jeans:</code></td>
<td>🔹 <code>:small_blue_diamond:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👘 <code>:kimono:</code></td>
<td>🔸 <code>:small_orange_diamond:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👙 <code>:bikini:</code></td>
<td>🔺 <code>:small_red_triangle:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🎀 <code>:ribbon:</code></td>
<td>🔻 <code>:small_red_triangle_down:</code></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🎩 <code>:tophat:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👑 <code>:crown:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👒 <code>:womans_hat:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👞 <code>:mans_shoe:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🌂 <code>:closed_umbrella:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>💼 <code>:briefcase:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👜 <code>:handbag:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👝 <code>:pouch:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👛 <code>:purse:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>👓 <code>:eyeglasses:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🎣 <code>:fishing_pole_and_fish:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>☕ <code>:coffee:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍵 <code>:tea:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍶 <code>:sake:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍼 <code>:baby_bottle:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍺 <code>:beer:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍻 <code>:beers:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍸 <code>:cocktail:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍹 <code>:tropical_drink:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍷 <code>:wine_glass:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍴 <code>:fork_and_knife:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍕 <code>:pizza:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍔 <code>:hamburger:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍟 <code>:fries:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍗 <code>:poultry_leg:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍖 <code>:meat_on_bone:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍝 <code>:spaghetti:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍛 <code>:curry:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍤 <code>:fried_shrimp:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍱 <code>:bento:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍣 <code>:sushi:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍥 <code>:fish_cake:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍙 <code>:rice_ball:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍘 <code>:rice_cracker:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍚 <code>:rice:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍜 <code>:ramen:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍲 <code>:stew:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍢 <code>:oden:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍡 <code>:dango:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🥚 <code>:egg:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍞 <code>:bread:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍩 <code>:doughnut:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍮 <code>:custard:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍦 <code>:icecream:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍨 <code>:ice_cream:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍧 <code>:shaved_ice:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🎂 <code>:birthday:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍰 <code>:cake:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍪 <code>:cookie:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍫 <code>:chocolate_bar:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍬 <code>:candy:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍭 <code>:lollipop:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍯 <code>:honey_pot:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍎 <code>:apple:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍏 <code>:green_apple:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍊 <code>:tangerine:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍋 <code>:lemon:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍒 <code>:cherries:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍇 <code>:grapes:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍉 <code>:watermelon:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍓 <code>:strawberry:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍑 <code>:peach:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍈 <code>:melon:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍌 <code>:banana:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍐 <code>:pear:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍍 <code>:pineapple:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍠 <code>:sweet_potato:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍆 <code>:eggplant:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🍅 <code>:tomato:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td></td>
<td></td>
<td>🌽 <code>:corn:</code></td>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
]]></content>
    <category term="实用分享" scheme=""/>
    <category term="Markdown" scheme=""/>
    <published>2022-08-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">aria2c 轻量终端下载神器</title>
    <id>https://autumnwhj.github.io/posts/share/tools/aria2c.html</id>
    <link href="https://autumnwhj.github.io/posts/share/tools/aria2c.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">aria2c 轻量终端下载神器 支持多线程、断点续传、分块下载、支持 HTTP/HTTPS/FTP/BT/磁力链/磁盘缓存等</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>支持多线程、断点续传、分块下载、支持 HTTP/HTTPS/FTP/BT/磁力链/磁盘缓存等</p>
</blockquote>

<h2 id="下载" tabindex="-1"> 下载</h2>
<p><a href="https://github.com/aria2/aria2/releases/tag/release-1.36.0" target="_blank" rel="noopener noreferrer">GithHub下载地址</a></p>
<blockquote>
<p>下载完毕后解压，可以将解压目录添加到环境变量中,共全局使用<code>aria2c</code>命令</p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-09-06-10:55:08*image-20220906105506893*4.png" alt="image-20220906105506893"></p>
<h2 id="简单命令" tabindex="-1"> 简单命令</h2>
<ul>
<li>-i  指定url地址  可是多条  用换行分割开来</li>
<li>-d  指定保存的目录</li>
<li>-l  指定输出的日志</li>
<li>-j  线程数 默认5</li>
<li>-x  每次下载到一台服务器的最大连接数。默认：<code>1</code> 最大 ：16</li>
</ul>
<blockquote>
<p><a href="https://aria2.github.io/manual/en/html/aria2c.html#options" target="_blank" rel="noopener noreferrer">更多选项</a></p>
</blockquote>
<h2 id="使用" tabindex="-1"> 使用</h2>
<p><strong>简单使用</strong></p>
<div><pre><code><span># aria2c [url]</span>
aria2c http://tva3.sinaimg.cn/bmiddle/ceeb653ely8h3bx5mmsglg203c03cdg9.gif
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><strong>加载txt文本里面的url以及选项下载</strong></p>
<ul>
<li>
<p>创建<code>url-option.txt</code> 文件,粘贴下面内容</p>
<ul>
<li>
<div><pre><code>https://images.pexels.com/photos/12027232/pexels-photo-12027232.jpeg 
    out=1.jpeg
    dir=img/img1
https://images.pexels.com/photos/1643457/pexels-photo-1643457.jpeg 
    out=2.jpeg
    dir=img/img2
https://images.pexels.com/photos/1843717/pexels-photo-1843717.jpeg 
    out=3.jpeg
    dir=img/img3
https://images.pexels.com/photos/2088205/pexels-photo-2088205.jpeg 
    out=4.jpeg
    dir=img/img4
https://images.pexels.com/photos/2343468/pexels-photo-2343468.jpeg 
    out=5.jpeg
    dir=img/img5
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div></li>
<li>
<p>加载文本使用 <code>-i</code> 选项，每一行写入一条<code>url</code>地址</p>
</li>
<li>
<p>可以针对于每一条<code>url</code>添加选项,在<code>url</code>地址后换行，每一个命名前使用一个或多个<code>tab</code>、空格，命令使用<a href="https://aria2.github.io/manual/en/html/aria2c.html#id2" target="_blank" rel="noopener noreferrer">单词形式</a>添加，按照<code>key=value</code>的形式一行一个命令</p>
</li>
</ul>
</li>
<li>
<p><strong>下载</strong></p>
<ul>
<li>
<div><pre><code>aria2c -i .<span>\</span>url-option.txt -d .<span>\</span>img<span>\</span> -l .<span>\</span>log.log -x <span>16</span> -s <span>5</span> -j <span>5</span>
</code></pre><div aria-hidden="true"><div></div></div></div></li>
<li>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/typora-user-images/2022-09-06-11:16:17*image-20220906111615414*8.png" alt="image-20220906111615414"></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>当我们进行爬虫操作的时候 ，就可以 将要下载的<code>url</code>和要输出的文件名和输出路径批量按格式写入txt文件，再使用 <code>aria2c</code> 进行多线程下载，能省很多时间，并且下载更加快速</p>
</blockquote>
]]></content>
    <category term="实用分享" scheme=""/>
    <category term="Tools" scheme=""/>
    <published>2022-09-06T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">如何使用js将表单选中的文件转化为Base64编码格式</title>
    <id>https://autumnwhj.github.io/posts/technology/javascript/js-input-file-to-base64.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/javascript/js-input-file-to-base64.html"/>
    <updated>2022-12-05T00:48:45.000Z</updated>
    <summary type="html">如何使用js将表单选中的文件转化为Base64编码格式  使用`Promise`封装一个一个方法，将`File` 对象转化为`Base64`编码格式。</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<h2 id="使用promise封装一个一个方法-将file-对象转化为base64编码格式。" tabindex="-1"> 使用<code>Promise</code>封装一个一个方法，将<code>File</code> 对象转化为<code>Base64</code>编码格式。</h2>

<div><pre><code><span>const</span> <span>fileToBase64</span> <span>=</span> <span>(</span><span>file</span><span>)</span> <span>=></span> <span>{</span>
  <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve<span>,</span> reject</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> reader <span>=</span> <span>new</span> <span>FileReader</span><span>(</span><span>)</span><span>;</span>
    reader<span>.</span><span>readAsDataURL</span><span>(</span>file<span>)</span><span>;</span>
    reader<span>.</span><span>onload</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
      <span>resolve</span><span>(</span>reader<span>.</span>result<span>)</span><span>;</span>
    <span>}</span><span>;</span>
    reader<span>.</span><span>onerror</span> <span>=</span> <span>function</span> <span>(</span><span>error</span><span>)</span> <span>{</span>
      <span>reject</span><span>(</span>error<span>)</span><span>;</span>
    <span>}</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="使用" tabindex="-1"> 使用</h2>
<div><pre><code><span><span><span>&lt;</span>input</span> <span>type</span><span><span>=</span><span>"</span>file<span>"</span></span> <span>multiple</span> <span>id</span><span><span>=</span><span>"</span>input<span>"</span></span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div></div></div><div><pre><code>const selectedFile = document.getElementById('input');
selectedFile.addEventListener("change", async function () {
  for (let i = 0; i &lt; this.files.length; i++) {
    const file = this.files[i];
    // console.log(fileList);
    // 将文件转换为base64格式
    const base64 = await fileToBase64(file);
    console.log(base64);
  }
});
</code></pre><div><br><br><br><br><br><br><div>&nbsp;</div><br><br><br></div><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content>
    <category term="技术文章" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <category term="Base64" scheme=""/>
    <published>2022-08-10T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">你不知道的 console.log 替代品😮</title>
    <id>https://autumnwhj.github.io/posts/technology/javascript/you-dont-know-console.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/javascript/you-dont-know-console.html"/>
    <updated>2022-12-02T14:51:00.000Z</updated>
    <summary type="html">你不知道的 console.log 替代品😮   这篇文章介绍了`console`意想不到的使用方法。</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>这篇文章介绍了<code>console</code>意想不到的使用方法。</p>
</blockquote>

<p>现在，认为您正在编写一些 <code>JS</code> 代码并且它不能正常工作。你做的第一件事是什么？你在<code>console.log</code>搞定它！所以我要告诉你一些替代方案<code>console.log</code>。</p>
<h3 id="使用解构" tabindex="-1"> 使用解构</h3>
<p>通过使用 <code>javascript </code>对象的破坏能力，您可以这样做：</p>
<div><pre><code><span>const</span> <span>{</span> log <span>}</span> <span>=</span> console<span>;</span>

<span>log</span><span>(</span><span>"hi"</span><span>)</span><span>;</span>
<span>log</span><span>(</span><span>"testing"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>您可以将<code>log</code>函数更改为您想要的任何其他名称，如下所示：</p>
<div><pre><code><span>const</span> <span>{</span> <span>log</span><span>:</span> myLog <span>}</span> <span>=</span> console<span>;</span>

<span>myLog</span><span>(</span><span>"hi"</span><span>)</span><span>;</span>
<span>myLog</span><span>(</span><span>"testing"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h3 id="console-group" tabindex="-1"> <code>console.group</code></h3>
<p>曾经想对您的日志进行分组吗？这个方法很适合你！</p>
<div><pre><code>console<span>.</span><span>group</span><span>(</span><span>"groupName"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"hi"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"testing"</span><span>)</span><span>;</span>
console<span>.</span><span>groupEnd</span><span>(</span><span>)</span><span>;</span>

console<span>.</span><span>group</span><span>(</span><span>"groupName2"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"hi"</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span><span>"testing"</span><span>)</span><span>;</span>
console<span>.</span><span>groupEnd</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="console-table" tabindex="-1"> <code>console.table</code></h3>
<p>用于打印数组。</p>
<div><pre><code><span>const</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>]</span><span>;</span>
console<span>.</span><span>table</span><span>(</span>arr<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><h3 id="console-time" tabindex="-1"> <code>console.time</code></h3>
<p>此方法用于测量时间。例如，检查完成 x 任务花了多少秒？</p>
<div><pre><code>console<span>.</span><span>time</span><span>(</span><span>"test"</span><span>)</span><span>;</span>
<span>setTimeout</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    console<span>.</span><span>timeEnd</span><span>(</span><span>"test"</span><span>)</span><span>;</span>
<span>}</span><span>,</span> <span>1000</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>这将为我们提供以下结果：</p>
<div><pre><code><span>test</span><span>:</span> <span>1</span><span>.</span>000s
</code></pre><div aria-hidden="true"><div></div></div></div><h3 id="console-assert" tabindex="-1"> <code>console.assert</code></h3>
<p>此方法用于检查条件是否为真。如果不是，它将引发错误。</p>
<div><pre><code>console<span>.</span><span>assert</span><span>(</span><span>/** Condition **/</span><span>,</span> <span>/** Error message **/</span><span>)</span><span>;</span>


console<span>.</span><span>assert</span><span>(</span><span>1</span> <span>===</span> <span>1</span><span>,</span> <span>"1 is equal to 1"</span><span>)</span><span>;</span> <span>// No error</span>
console<span>.</span><span>assert</span><span>(</span><span>0</span> <span>===</span> <span>[</span><span>]</span><span>,</span> <span>"0 is equal to []"</span><span>)</span><span>;</span> <span>// Error in the console</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="console-count" tabindex="-1"> <code>console.count</code></h3>
<p>计算某件事发生的次数。</p>
<div><pre><code>console<span>.</span><span>count</span><span>(</span><span>"counter 1"</span><span>)</span><span>;</span>

<span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>10</span><span>;</span> i<span>++</span><span>)</span> <span>{</span>
    i <span>%</span> <span>2</span> <span>==</span> <span>0</span> <span>?</span> console<span>.</span><span>count</span><span>(</span><span>"counter 1"</span><span>)</span> <span>:</span> console<span>.</span><span>count</span><span>(</span><span>"counter 2"</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="console-trace" tabindex="-1"> <code>console.trace</code></h3>
<p>此方法跟踪它被调用的位置。我有一个这样的 HTML 文件：</p>
<div><pre><code><span><span>&lt;!</span><span>DOCTYPE</span> <span>html</span><span>></span></span>
<span><span><span>&lt;</span>html</span> <span>lang</span><span><span>=</span><span>"</span>en<span>"</span></span><span>></span></span>
    <span><span><span>&lt;</span>head</span><span>></span></span>
        <span><span><span>&lt;</span>meta</span> <span>charset</span><span><span>=</span><span>"</span>UTF-8<span>"</span></span> <span>/></span></span>
        <span><span><span>&lt;</span>meta</span> <span>http-equiv</span><span><span>=</span><span>"</span>X-UA-Compatible<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>IE=edge<span>"</span></span> <span>/></span></span>
        <span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>viewport<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>width=device-width, initial-scale=1.0<span>"</span></span> <span>/></span></span>
        <span><span><span>&lt;</span>title</span><span>></span></span>Document<span><span><span>&lt;/</span>title</span><span>></span></span>
    <span><span><span>&lt;/</span>head</span><span>></span></span>

    <span><span><span>&lt;</span>body</span><span>></span></span>
        <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
            <span>"test"</span><span>;</span>

            console<span>.</span><span>trace</span><span>(</span><span>)</span><span>;</span>

            i <span>=</span> <span>0</span><span>;</span>
        </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
    <span><span><span>&lt;/</span>body</span><span>></span></span>
<span><span><span>&lt;/</span>html</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>现在你可以看到在哪里<code>console.trace</code>被调用了。</p>
<h3 id="debugger关键词" tabindex="-1"> <code>debugger</code>关键词</h3>
<p>您可能没有听说过该<code>debugger</code>关键字。它是一个用于停止代码执行的关键字。</p>
<div><pre><code><span>const</span> <span>buggyCode</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>debugger</span><span>;</span>
    console<span>.</span><span>log</span><span>(</span><span>"hi"</span><span>)</span><span>;</span>
<span>}</span><span>;</span>

<span>// ...</span>

<span>buggyCode</span><span>(</span><span>)</span><span>;</span>

console<span>.</span><span>log</span><span>(</span><span>"World"</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>它会告诉您调试器的调用位置。</p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Vuepress-theme-hope-iconfont 图标大全</title>
    <id>https://autumnwhj.github.io/posts/technology/vuepress/vuepress-hope-iconfont.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/vuepress/vuepress-hope-iconfont.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">Vuepress-theme-hope-iconfont 图标大全</summary>
    <content type="html"><![CDATA[<CountView></CountView>

<Iconfont></Iconfont>]]></content>
    <category term="技术文章" scheme=""/>
    <category term="Vuepress" scheme=""/>
    <published>2022-08-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Vuepress2中如何在md文件中添加自定义组件</title>
    <id>https://autumnwhj.github.io/posts/technology/vuepress/vuepress-register-components.html</id>
    <link href="https://autumnwhj.github.io/posts/technology/vuepress/vuepress-register-components.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">Vuepress2中如何在md文件中添加自定义组件</summary>
    <content type="html"><![CDATA[<CountView></CountView>

<h2 id="使用方法" tabindex="-1"> 使用方法</h2>
<div><pre><code><span>npm</span> i -D @vuepress/plugin-register-components
</code></pre><div aria-hidden="true"><div></div></div></div><blockquote>
<p>创建文件夹:<code>.vuepress/components</code></p>
<p><code>.vuepress/config.ts</code></p>
</blockquote>
<h3 id="配置" tabindex="-1"> 配置</h3>
<div><pre><code><span>import</span> <span>{</span> registerComponentsPlugin <span>}</span> <span>from</span> <span>"@vuepress/plugin-register-components"</span><span>;</span>

<span>plugins</span><span>:</span> <span>[</span>
    <span>registerComponentsPlugin</span><span>(</span><span>{</span>
      <span>componentsDir</span><span>:</span> path<span>.</span><span>resolve</span><span>(</span>__dirname<span>,</span> <span>"./components"</span><span>)</span><span>,</span>
  <span>}</span><span>)</span><span>,</span>
<span>]</span><span>,</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>简单使用方法: 配置<code>componentsDir</code>后，会将<code>components</code>目录下的<code>.vue</code>主键自动注册，无需配置<code>name</code>,在<code>.md</code>文件中直接使用<code>.vue</code>文件名为标签即可</p>
<p><a href="https://v2.vuepress.vuejs.org/zh/reference/plugin/register-components.html" target="_blank" rel="noopener noreferrer">更多配置项</a></p>
</blockquote>
<h3 id="使用" tabindex="-1"> 使用</h3>
<blockquote>
<p>创建文件<code>/.vuepress/components/Demo.vue</code></p>
<p>无需注册名称</p>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span><span>></span></span><span><span><span>&lt;</span>h1</span><span>></span></span>这是一个测试自定义组件的demo<span><span><span>&lt;/</span>h1</span><span>></span></span><span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>
<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span><span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
<span><span><span>&lt;</span>style</span><span>></span></span><span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>创建文章<code>docs/posts/测试文章.md</code></p>
</blockquote>
<div><pre><code><span><span><span>&lt;</span>Demo</span><span>></span></span><span><span><span>&lt;/</span>Demo</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/headimg/typora-user-images/2022-08-02-13:25:22*image-20220802132522080*c.png" alt="image-20220802132522080"></p>
]]></content>
    <category term="技术文章" scheme=""/>
    <category term="Vuepress" scheme=""/>
    <published>2022-08-02T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">ES6在前端的模块导入与导出</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/ES6%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/ES6%E5%9C%A8%E5%89%8D%E7%AB%AF%E7%9A%84%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">ES6在前端的模块导入与导出  es6模块化导入与导出自己的整理</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>es6模块化导入与导出自己的整理</p>
</div>

<h4 id="html文件使用" tabindex="-1"> <code>html</code>文件使用</h4>
<h5 id="方法一" tabindex="-1"> 方法一</h5>
<ul>
<li><code>script</code>标签要使用<code>type</code>属性声明<code>module</code></li>
<li>如果<code>script</code>标签有<code>src</code>属性,则标签内不可书写任何<code>js</code>代码</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>"</span>module<span>"</span></span> <span>src</span><span><span>=</span><span>"</span>./index.js<span>"</span></span><span>></span></span><span><span> </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div></div></div><h5 id="方法二" tabindex="-1"> 方法二</h5>
<ul>
<li><code>from</code>路径需要使用<code>/</code>  ,  <code>./</code>  或  <code>../</code>拼接的路径
<ul>
<li><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-22-20:00:08*image-20220722200008169*b.png" alt="image-20220722200008169"></li>
</ul>
</li>
<li>路径要写全，<code>.js</code>后缀要跟上
<ul>
<li><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-22-20:00:38*image-20220722200038659*6.png" alt="image-20220722200038659"></li>
</ul>
</li>
</ul>
<div><pre><code><span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>"</span>module<span>"</span></span><span>></span></span><span><span>
    <span>import</span> Student <span>from</span> <span>"./Student.js"</span><span>;</span>
    <span>import</span> Teacher <span>from</span> <span>"./Teacher.js"</span><span>;</span>
    <span>const</span> student <span>=</span> <span>new</span> <span>Student</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> teacher <span>=</span> <span>new</span> <span>Teacher</span><span>(</span><span>)</span><span>;</span>
    student<span>.</span><span>who</span><span>(</span><span>)</span><span>;</span>
    student<span>.</span><span>student</span><span>(</span><span>)</span><span>;</span>

    teacher<span>.</span><span>who</span><span>(</span><span>)</span><span>;</span>
    teacher<span>.</span><span>teacher</span><span>(</span><span>)</span><span>;</span>

  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id="两种方法答应输出" tabindex="-1"> 两种方法答应输出</h5>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-22-20:00:54*image-20220722200054843*2.png" alt="image-20220722200054843"></p>
<h4 id="js文件" tabindex="-1"> <code>js</code>文件</h4>
<h5 id="person-js类" tabindex="-1"> <code>Person.js</code>类</h5>
<div><pre><code><span>class</span> <span>Person</span> <span>{</span>
  <span>who</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a person"</span><span>)</span><span>;</span>
  <span>}</span>
  <span>person</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a person"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>export</span> <span>default</span> Person<span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id="student-js类" tabindex="-1"> <code>Student.js</code>类</h5>
<div><pre><code><span>import</span> Person <span>from</span> <span>"./Person.js"</span><span>;</span>

<span>export</span> <span>default</span> <span>class</span> <span>Student</span> <span>extends</span> <span>Person</span> <span>{</span>
  <span>who</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a student"</span><span>)</span><span>;</span>
  <span>}</span>
  <span>student</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a student"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>//或直接：</span>
<span>//export default Student;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id="teacher-js类" tabindex="-1"> <code>Teacher.js</code>类</h5>
<div><pre><code><span>import</span> Person <span>from</span> <span>"./Person.js"</span><span>;</span>

<span>export</span> <span>default</span> <span>class</span> <span>Teacher</span> <span>extends</span> <span>Person</span> <span>{</span>
  <span>who</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a Teacher"</span><span>)</span><span>;</span>
  <span>}</span>
  <span>teacher</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a Teacher"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>//或直接：</span>
<span>//export default Teacher;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id="或直接导出实例化对象" tabindex="-1"> 或直接导出实例化对象</h5>
<div><pre><code><span>import</span> Person <span>from</span> <span>"./Person.js"</span><span>;</span>

<span>class</span> <span>Student</span> <span>extends</span> <span>Person</span> <span>{</span>
  <span>who</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a student"</span><span>)</span><span>;</span>
  <span>}</span>
  <span>student</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"I am a student"</span><span>)</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>export</span> <span>default</span> <span>new</span> <span>Student</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span><span><span>&lt;</span>script</span> <span>type</span><span><span>=</span><span>"</span>module<span>"</span></span><span>></span></span><span><span>
    <span>import</span> student <span>from</span> <span>'./Student.js'</span>
    student<span>.</span><span>who</span><span>(</span><span>)</span>
    student<span>.</span><span>student</span><span>(</span><span>)</span>

  </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h5 id="运行结果" tabindex="-1"> 运行结果</h5>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-22-22:04:13*image-20220722220413190*7.png" alt="image-20220722220413190"></p>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-07-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Javascript面对对象编程</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/Javascript%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/Javascript%E9%9D%A2%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">Javascript面对对象编程  面向对象相关的笔记</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>面向对象相关的笔记</p>
</div>

<h5 id="使用整合" tabindex="-1"> 使用整合</h5>
<ul>
<li>通过class 关键字创建类, 类名我们还是习惯性定义首字母大写</li>
<li>类里面有个constructor 函数,可以接受传递过来的参数,同时返回实例对象</li>
<li>constructor 函数 只要 new 生成实例时,就会自动调用这个函数, 如果我们不写这个函数,类也会自动生成这个函数</li>
<li>生成实例 new 不能省略</li>
<li>最后注意语法规范, 创建类 类名后面不要加小括号,生成实例 类名后面加小括号, 构造函数不需要加function</li>
</ul>
<div><pre><code><span>class</span> <span>Grand</span> <span>{</span>
  <span>constructor</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
    <span>this</span><span>.</span>a <span>=</span> a<span>;</span>
    <span>this</span><span>.</span>b <span>=</span> b<span>;</span>
  <span>}</span>
  <span>// (1) 我们类里面所有的函数不需要写function</span>
  <span>// (2) 多个函数方法之间不需要添加逗号分隔</span>
  <span>add</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>add:</span><span><span>${</span><span>this</span><span>.</span>a <span>+</span> <span>this</span><span>.</span>b<span>}</span></span><span>`</span></span><span>;</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>Father</span> <span>extends</span> <span>Grand</span> <span>{</span>
  <span>constructor</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
    <span>// 利用super调用父类的构造函数</span>
    <span>// super 必须在子类this之前调用</span>
    <span>// 否则会报错:my-01.html:28 Uncaught ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span>
    <span>super</span><span>(</span>a<span>,</span> b<span>)</span><span>;</span>
    <span>this</span><span>.</span>a <span>=</span> a<span>;</span>
    <span>this</span><span>.</span>b <span>=</span> b<span>;</span>
  <span>}</span>
  <span>// (1) 我们类里面所有的函数不需要写function</span>
  <span>// (2) 多个函数方法之间不需要添加逗号分隔</span>
  <span>sub</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>sub:</span><span><span>${</span><span>this</span><span>.</span>a <span>-</span> <span>this</span><span>.</span>b<span>}</span></span><span>`</span></span><span>;</span>
  <span>}</span>
  <span>say</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>"我是爸爸"</span><span>;</span>
  <span>}</span>
<span>}</span>
<span>class</span> <span>Son</span> <span>extends</span> <span>Father</span> <span>{</span>
  <span>constructor</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span>
    <span>// 需要在子类中调用 super(a,b)，才能调用父类的构造函数</span>
    <span>super</span><span>(</span>a<span>,</span> b<span>)</span><span>;</span> <span>//调用了父类中的构造函数</span>
    <span>this</span><span>.</span>a <span>=</span> a<span>;</span>
    <span>this</span><span>.</span>b <span>=</span> b<span>;</span>
  <span>}</span>

  <span>// (1) 我们类里面所有的函数不需要写function</span>
  <span>// (2) 多个函数方法之间不需要添加逗号分隔</span>
  <span>mul</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span><span>`</span><span>mul:</span><span><span>${</span><span>this</span><span>.</span>a <span>*</span> <span>this</span><span>.</span>b<span>}</span></span><span>`</span></span><span>;</span>
  <span>}</span>

  <span>say</span><span>(</span><span>)</span> <span>{</span>
    <span>// console.log('我是儿子');</span>
    <span>// 使用super调用父类的方法，可以不经过constructor 中的 super(a,b)</span>
    <span>// 只需要在子类中调用 super.方法 即可</span>
    console<span>.</span><span>log</span><span>(</span><span>super</span><span>.</span><span>say</span><span>(</span><span>)</span> <span>+</span> <span>"的儿子"</span><span>)</span><span>;</span>
    <span>// super.say() 就是调用父类中的普通函数 say()</span>
  <span>}</span>
<span>}</span>
<span>const</span> son <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>1</span><span>,</span> <span>2</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>son<span>.</span><span>add</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>//add:3</span>
console<span>.</span><span>log</span><span>(</span>son<span>.</span><span>sub</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>//sub:-1</span>
console<span>.</span><span>log</span><span>(</span>son<span>.</span><span>mul</span><span>(</span><span>)</span><span>)</span><span>;</span> <span>//mul:2</span>
son<span>.</span><span>say</span><span>(</span><span>)</span><span>;</span> <span>//我是爸爸的儿子</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>运行结果</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-12:23:51*image-20220719122351155*a.png" alt="image-20220719122351155"></p>
<h5 id="this指向问题" tabindex="-1"> this指向问题</h5>
<div><pre><code> <span><span><span>&lt;</span>script</span><span>></span></span><span><span>
        <span>// 1. 在 ES6 中类没有变量提升，所以必须先定义类，才能通过类实例化对象</span>
        <span>// 2. 类里面的共有的属性和方法一定要加this使用.</span>
        <span>var</span> that<span>;</span>
        <span>var</span> _that<span>;</span>
        <span>class</span> <span>Star</span> <span>{</span>
            <span>constructor</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
                <span>// constructor 里面的this 指向的是 创建的实例对象</span>
                that <span>=</span> <span>this</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>

                <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
                <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
                <span>// this.sing();</span>
                <span>this</span><span>.</span>btn <span>=</span> document<span>.</span><span>querySelector</span><span>(</span><span>'button'</span><span>)</span><span>;</span>
                <span>// this.btn.onclick = this.sing;</span>
                <span>// 下面等同于上面的写法</span>
                <span>this</span><span>.</span>btn<span>.</span><span>addEventListener</span><span>(</span><span>'click'</span><span>,</span> <span>this</span><span>.</span>sing<span>)</span><span>;</span>
            <span>}</span>
            <span>sing</span><span>(</span><span>)</span> <span>{</span>
                <span>// 这个sing方法里面的this 指向的是 btn 这个按钮,因为这个按钮调用了这个函数</span>
                console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span>that<span>.</span>uname<span>)</span><span>;</span> <span>// that里面存储的是constructor里面的this</span>
            <span>}</span>
            <span>dance</span><span>(</span><span>)</span> <span>{</span>
                <span>// 这个dance里面的this 指向的是实例对象 ldh 因为ldh 调用了这个函数</span>
                _that <span>=</span> <span>this</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span>_that<span>)</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span>that<span>)</span><span>;</span>
                console<span>.</span><span>log</span><span>(</span><span>'---'</span><span>)</span><span>;</span>
                <span>/**
                 * 无论哪种指向，只要跟当前构造函数有关系的 
                 * (被当前this所赋值，无论在哪儿赋值)，
                 * 都是指向的是ldh这个实例对象
                 * 所以在外部也等于new Star的那个变量
                */</span>
                <span>const</span> retult <span>=</span> <span>this</span> <span>===</span> _that <span>&amp;&amp;</span> <span>this</span> <span>===</span> that <span>&amp;&amp;</span> _that <span>===</span> that
                console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>当前this,that,_that是否相同：</span><span>`</span></span> <span>+</span> retult<span>)</span><span>;</span>

            <span>}</span>
        <span>}</span>


        <span>var</span> ldh <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'刘德华'</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>ldh<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>that <span>===</span> ldh<span>)</span><span>;</span>
        ldh<span>.</span><span>dance</span><span>(</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>_that <span>===</span> ldh<span>)</span><span>;</span>

    </span></span><span><span><span>&lt;/</span>script</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>运行结果</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-12:48:57*image-20220719124857522*9.png" alt="image-20220719124857522"></p>
<p><strong>点击按钮</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-12:49:49*image-20220719124949852*d.png" alt="image-20220719124949852"></p>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-07-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">ES6中数组过滤的四种方法</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/array-filter.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/array-filter.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">ES6中数组过滤的四种方法  `forEach` `some` `every` `reduce` 数组过滤的四种方法</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p><code>forEach</code> <code>some</code> <code>every</code> <code>reduce</code> 数组过滤的四种方法</p>
</blockquote>

<h2 id="foreach" tabindex="-1"> forEach</h2>
<blockquote>
<p>forEach循环一旦被执行，会从头执行到尾，不会中间被停止</p>
<p>容易浪费性能</p>
</blockquote>
<div><pre><code><span>&lt;</span>script<span>></span>
<span>const</span> arr <span>=</span> <span>[</span><span>'小红'</span><span>,</span> <span>'小明'</span><span>,</span> <span>'小白'</span><span>,</span> <span>'小黑'</span><span>]</span><span>;</span>
        arr<span>.</span><span>forEach</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'ok'</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>item <span>===</span> <span>"小明"</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span>index<span>)</span><span>;</span>
                <span>return</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span>
 <span>&lt;</span><span>/</span>script<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:47*04*8.jpg" alt="04"></p>
<div><pre><code><span>&lt;</span>script<span>></span>
        <span>const</span> arr <span>=</span> <span>[</span><span>'小红'</span><span>,</span> <span>'小明'</span><span>,</span> <span>'小白'</span><span>,</span> <span>'小黑'</span><span>,</span> <span>'小白'</span><span>]</span><span>;</span>
        <span>const</span> newArr <span>=</span> <span>[</span><span>]</span><span>;</span>
        arr<span>.</span><span>forEach</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'ok'</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>item <span>===</span> <span>"小白"</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span>index<span>)</span><span>;</span>
                newArr<span>.</span><span>push</span><span>(</span>item<span>)</span><span>;</span>
                <span>return</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span>newArr<span>)</span><span>;</span>
    <span>&lt;</span><span>/</span>script<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:47*05*8.jpg" alt="05"></p>
<blockquote>
<p>forEach 会将数组内的所有项都扫描一遍</p>
</blockquote>
<div><pre><code><span>//数组对象</span>
<span>&lt;</span>script<span>></span>
        <span>// const arr = ['小红', '小明', '小白', '小黑', '小白'];</span>
        <span>const</span> obj <span>=</span> <span>[</span><span>{</span>
            <span>name</span><span>:</span> <span>'小红'</span><span>,</span>
            <span>age</span><span>:</span> <span>18</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>name</span><span>:</span> <span>'小明'</span><span>,</span>
            <span>age</span><span>:</span> <span>20</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>name</span><span>:</span> <span>'小白'</span><span>,</span>
            <span>age</span><span>:</span> <span>16</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>name</span><span>:</span> <span>'小黑'</span><span>,</span>
            <span>age</span><span>:</span> <span>17</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>name</span><span>:</span> <span>'小白'</span><span>,</span>
            <span>age</span><span>:</span> <span>18</span>
        <span>}</span><span>]</span>
        <span>const</span> newArr <span>=</span> <span>[</span><span>]</span><span>;</span>
        obj<span>.</span><span>forEach</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'ok'</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>item<span>.</span>name <span>===</span> <span>"小白"</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span>index<span>)</span><span>;</span>
                newArr<span>.</span><span>push</span><span>(</span>item<span>)</span><span>;</span>
                <span>return</span><span>;</span>
            <span>}</span>
        <span>}</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span>newArr<span>)</span><span>;</span>
    <span>&lt;</span><span>/</span>script<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:47*06*7.jpg" alt="06"></p>
<h2 id="some" tabindex="-1"> some</h2>
<blockquote>
<p>在找到对应的项之后，可以通过return true 固定的语法来终止循环</p>
<p>应用场景：只需要在数组中找到一项自己需要的元素就可以用some</p>
</blockquote>
<div><pre><code><span>const</span> arr <span>=</span> <span>[</span><span>'小红'</span><span>,</span> <span>'小明'</span><span>,</span> <span>'小白'</span><span>,</span> <span>'小黑'</span><span>,</span> <span>'小白'</span><span>]</span><span>;</span>
arr<span>.</span><span>some</span><span>(</span><span>(</span><span>item<span>,</span> index</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'ok'</span><span>)</span><span>;</span>
            <span>if</span> <span>(</span>item <span>===</span> <span>'小白'</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span>index<span>)</span><span>;</span>
                <span>//在找到对应的项之后，可以通过return true 固定的语法来终止循环</span>
				<span>//满足自己的需求后，找到了自己想要的那一项，就可以退出循环</span>
                <span>return</span> <span>true</span>
            <span>}</span>
        <span>}</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:47*07*d.jpg" alt="07"></p>
<h2 id="every" tabindex="-1"> every</h2>
<blockquote>
<p>every返回一个布尔值</p>
<p>只要每一项都满足判断条件就返回true</p>
<p>只要有一项不满足就返回false</p>
<p>会将数组的每一项都扫描一遍</p>
</blockquote>
<div><pre><code><span>const</span> obj <span>=</span> <span>[</span>
    <span>{</span><span>id</span><span>:</span> <span>1</span><span>,</span><span>name</span><span>:</span> <span>'小红'</span><span>,</span><span>age</span><span>:</span> <span>18</span><span>,</span><span>state</span><span>:</span> <span>true</span><span>}</span><span>,</span> 
    <span>{</span><span>id</span><span>:</span> <span>2</span><span>,</span><span>name</span><span>:</span> <span>'小明'</span><span>,</span><span>age</span><span>:</span> <span>20</span><span>,</span><span>state</span><span>:</span> <span>true</span><span>}</span><span>,</span> 
    <span>{</span><span>id</span><span>:</span> <span>3</span><span>,</span> <span>name</span><span>:</span> <span>'小白'</span><span>,</span><span>age</span><span>:</span> <span>18</span><span>,</span><span>state</span><span>:</span> <span>true</span><span>}</span><span>,</span> 
    <span>{</span><span>id</span><span>:</span> <span>4</span><span>,</span><span>name</span><span>:</span> <span>'小黑'</span><span>,</span><span>age</span><span>:</span> <span>18</span><span>,</span><span>state</span><span>:</span> <span>true</span><span>}</span><span>,</span> 
    <span>{</span><span>id</span><span>:</span> <span>5</span><span>,</span><span>name</span><span>:</span> <span>'小白'</span><span>,</span><span>age</span><span>:</span> <span>18</span><span>,</span><span>state</span><span>:</span> <span>true</span><span>}</span>
<span>]</span>
<span>const</span> result <span>=</span> obj<span>.</span><span>every</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>state<span>)</span>
<span>//以下两种写法都一样</span>
<span>//const result = obj.every(item => item.state === true)</span>
<span>/*
const result = obj.every(item => {
            if (item.state === true) {
                newArr.push(item);
                return true;
            }
        })
*/</span>
console<span>.</span><span>log</span><span>(</span>result<span>)</span><span>;</span> <span>//true</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="reduce" tabindex="-1"> reduce</h2>
<blockquote>
<p>把每一项都累加起来</p>
</blockquote>
<p><strong>reduce伪代码</strong></p>
<div><pre><code>arr<span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>state<span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>累加的结果<span>,</span>当前循环项</span><span>)</span> <span>=></span> <span>{</span> <span>}</span><span>,</span> 初始值<span>)</span>
<span>1.</span>第一项的结果等于初始值
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><div><pre><code><span>const</span> arr <span>=</span> <span>[</span>
    <span>{</span>
            <span>id</span><span>:</span> <span>1</span><span>,</span> <span>name</span><span>:</span> <span>'西瓜'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>10</span><span>,</span> <span>count</span><span>:</span> <span>1</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>2</span><span>,</span> <span>name</span><span>:</span> <span>'苹果'</span><span>,</span> <span>state</span><span>:</span> <span>false</span><span>,</span> <span>price</span><span>:</span> <span>80</span><span>,</span> <span>count</span><span>:</span> <span>2</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>3</span><span>,</span> <span>name</span><span>:</span> <span>'香蕉'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>20</span><span>,</span> <span>count</span><span>:</span> <span>3</span>
        <span>}</span><span>]</span>
<span>//需求:把购物车数组中，已勾选的水果，总价累加起来</span>
<span>//普通方法，使用filter+forEach</span>
<span>let</span> amt <span>=</span> <span>0</span><span>;</span> <span>//总价</span>
arr<span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>state<span>)</span><span>.</span><span>forEach</span><span>(</span><span>item</span> <span>=></span> <span>{</span>
    amt <span>+=</span> item<span>.</span>price <span>*</span> item<span>.</span>count
<span>}</span><span>)</span>
console<span>.</span><span>log</span><span>(</span>amt<span>)</span><span>;</span> <span>//70</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>//高级方法，使用filter+reduce</span>
<span>const</span> arr <span>=</span> <span>[</span><span>{</span>
            <span>id</span><span>:</span> <span>1</span><span>,</span> <span>name</span><span>:</span> <span>'西瓜'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>1</span><span>,</span> <span>count</span><span>:</span> <span>1</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>2</span><span>,</span> <span>name</span><span>:</span> <span>'苹果'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>2</span><span>,</span> <span>count</span><span>:</span> <span>2</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>3</span><span>,</span> <span>name</span><span>:</span> <span>'香蕉'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>3</span><span>,</span> <span>count</span><span>:</span> <span>3</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>4</span><span>,</span> <span>name</span><span>:</span> <span>'葡萄'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>4</span><span>,</span> <span>count</span><span>:</span> <span>4</span>
        <span>}</span><span>,</span> <span>{</span>
            <span>id</span><span>:</span> <span>5</span><span>,</span> <span>name</span><span>:</span> <span>'荔枝'</span><span>,</span> <span>state</span><span>:</span> <span>true</span><span>,</span> <span>price</span><span>:</span> <span>5</span><span>,</span> <span>count</span><span>:</span> <span>5</span>
        <span>}</span><span>]</span>
        <span>//把购物车数组中，已勾选的水果，总价累加起来</span>
        <span>// arr.filter(item => item.state).reduce((累加的结果,当前循环项) => { }, 初始值)</span>
        <span>//filter过滤state被选中的水果，再使用reduce累加</span>
        <span>const</span> result <span>=</span> arr<span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>state<span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>amt<span>,</span> item</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span>amt<span>)</span><span>;</span>
            <span>return</span> amt <span>+=</span> item<span>.</span>price <span>*</span> item<span>.</span>count
        <span>}</span><span>,</span> <span>0</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span><span>'result'</span><span>,</span> result<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:47*08*d.jpg" alt="08"></p>
<p><strong>reduce 简写方法</strong></p>
<div><pre><code><span>const</span> result <span>=</span> arr<span>.</span><span>filter</span><span>(</span><span>item</span> <span>=></span> item<span>.</span>state<span>)</span><span>.</span><span>reduce</span><span>(</span><span>(</span><span>amt<span>,</span> item</span><span>)</span> <span>=></span> amt <span>+=</span> item<span>.</span>price <span>*</span> item<span>.</span>count<span>,</span> <span>0</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div>]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">原型</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/%E5%8E%9F%E5%9E%8B.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/%E5%8E%9F%E5%9E%8B.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">JavaScript原型链  原型相关的笔记</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>原型相关的笔记</p>
</div>

<h2 id="prototype原型" tabindex="-1"> prototype原型</h2>
<p>1.原型是什么？</p>
<ul>
<li>原型是一个对象，我们也称为<code>prototype</code>为原型对象。</li>
</ul>
<p>2.原型的作用是什么？</p>
<ul>
<li>共享方法</li>
<li>避免多次开通内存空间，减小内存占用</li>
</ul>
<p>一般情况下,我们的公共属性定义到构造函数里面, 公共的方法我们放到原型对象身上</p>
<div><pre><code><span>function</span> <span>Star</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
            <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
    <span>// 不建议这样挂载方法</span>
            <span>// this.sing = function() {</span>
            <span>//     console.log('我会唱歌');</span>
            <span>// }</span>
        <span>}</span>
<span>// 建议这样将公共的方法挂载到Star的原型链上，这样以后的每个实例都可以访问</span>
<span>Star</span><span>.</span>prototype<span>.</span><span>sing</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
     console<span>.</span><span>log</span><span>(</span><span>'我会唱歌'</span><span>)</span><span>;</span>
<span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>console<span>.</span><span>dir</span><span>(</span>Star<span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><ul>
<li>打印一下<code>Star</code>会出现下面的样子</li>
<li>将Start展开会出现待展开的<code>prototype</code></li>
<li>再次展开又会出现一个<code>prototype</code></li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-17:50:30*image-20220719175030567*e.png" alt="image-20220719175030567"></p>
<p><strong>因为每一个原型上都有一个 prototype ,所以还可以再套娃(目前只是玩玩儿，可用性待发掘)</strong></p>
<div><pre><code><span>Star</span><span>.</span>prototype<span>.</span>sing<span>.</span>prototype<span>.</span><span>sing2</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'我会唱歌2'</span><span>)</span><span>;</span>
        <span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><ul>
<li>继续打印</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-17:59:25*image-20220719175925250*c.png" alt="image-20220719175925250"></p>
<p><strong>接下来创建实例，调用方法</strong></p>
<div><pre><code><span>var</span> ldh <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'刘德华'</span><span>,</span> <span>18</span><span>)</span><span>;</span>
<span>var</span> zxy <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'张学友'</span><span>,</span> <span>19</span><span>)</span><span>;</span>
console<span>.</span><span>log</span><span>(</span>ldh<span>.</span>sing <span>===</span> zxy<span>.</span>sing<span>)</span><span>;</span>
ldh<span>.</span><span>sing</span><span>(</span><span>)</span><span>;</span>
zxy<span>.</span><span>sing</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><ul>
<li>控制台输出</li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-18:01:12*image-20220719180112332*0.png" alt="image-20220719180112332"></p>
<ul>
<li>所以可以将实例对象都能使用的方法，挂载到实例的<code>prototype</code>上,无论new了多少个实例，都可以实现数据共享</li>
<li>简单的说就是让他们都指向同一片内存空间，所以<code>ldh.sing === zxy.sing</code>才会为<code>true</code> 是因为都同时指向同一个内存空间</li>
<li>一般情况下，我们的公共属性定义到构造函数里面，公共方法我们放在原型对象身上</li>
</ul>
<p><strong>只有构造函数本身才有 prototype 这个属性</strong></p>
<div><pre><code>console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-18:35:50*image-20220719183550578*f.png" alt="image-20220719183550578"></p>
<h2 id="对象原型-proto" tabindex="-1"> 对象原型<code>__proto__</code></h2>
<p>对象身上系统自己添加一个 <code>__proto__</code> 指向我们构造函数的原型对象 <code>prototype</code></p>
<p>对象原型只有<code>__proto__</code> 没有 <code>prototype</code></p>
<div><pre><code> <span>function</span> <span>Star</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
            <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>
        <span>Star</span><span>.</span>prototype<span>.</span><span>sing</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'我会唱歌'</span><span>)</span><span>;</span>
        <span>}</span>
        <span>var</span> ldh <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'刘德华'</span><span>,</span> <span>18</span><span>)</span><span>;</span>
        <span>var</span> zxy <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'张学友'</span><span>,</span> <span>19</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>ldh<span>.</span>__proto__<span>)</span><span>;</span> <span>// 对象身上系统自己添加一个 __proto__ 指向我们构造函数的原型对象 prototype</span>
        console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>)</span><span>;</span>
        ldh<span>.</span><span>sing</span><span>(</span><span>)</span><span>;</span>
        ldh<span>.</span>__proto__<span>.</span><span>sing2</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'我会唱歌2'</span><span>)</span><span>;</span>
        <span>}</span>
        ldh<span>.</span><span>sing2</span><span>(</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>ldh<span>.</span>__proto__ <span>===</span> <span>Star</span><span>.</span>prototype<span>)</span><span>;</span>
        <span>// 方法的查找规则: 首先先看ldh 对象身上是否有 sing 方法,如果有就执行这个对象上的sing</span>
        <span>// 如果么有sing 这个方法,因为有__proto__ 的存在,就去构造函数原型对象prototype身上去查找sing这个方法</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-18:42:24*image-20220719184224871*4.png" alt="image-20220719184224871"></p>
<h3 id="原型对象和对象原型" tabindex="-1"> 原型对象和对象原型</h3>
<ul>
<li>我们称为 <code>prototype</code> 为原型对象，<code>__proto__</code>为对象原型</li>
<li><code>__proto__</code>对象原型和原型对象 <code>prototype </code>是等价的</li>
<li><code>__proto__</code>对象原型的意义就在于为对象的查找机制提供一个方向，或者说一条路线，但是它是一个非标准属性，因此实际开发中，不可以使用这个属性，它只是内部指向原型对象 <code>prototype</code></li>
</ul>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-18:45:48*image-20220719184548457*2.png" alt="image-20220719184548457"></p>
<h4 id="对象原型" tabindex="-1"> 对象原型</h4>
<div><pre><code><span>function</span> <span>Star</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
            <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>
        <span>// 很多情况下,我们需要手动的利用constructor 这个属性指回 原来的构造函数</span>
        <span>// Star.prototype.sing = function () {</span>
        <span>//     console.log('我会唱歌');</span>
        <span>// };</span>
        <span>// Star.prototype.movie = function () {</span>
        <span>//     console.log('我会演电影');</span>
        <span>// }</span>
        <span>Star</span><span>.</span>prototype <span>=</span> <span>{</span>
            <span>// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span>
            <span>constructor</span><span>:</span> Star<span>,</span>
            <span>// 不加上面的constructor,则会报错,因为我们的原型对象指回的是Star,而不是Star.prototype</span>
            <span>// 不加 constructor 再使用 Star.prototype = {} 就会将原来的Star构造函数给覆盖掉了</span>
            <span>sing</span><span>(</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span><span>'我会唱歌'</span><span>)</span><span>;</span>
            <span>}</span><span>,</span>
            <span>movie</span><span>(</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span><span>'我会演电影'</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
        <span>var</span> ldh <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'刘德华'</span><span>,</span> <span>18</span><span>)</span><span>;</span>
        <span>var</span> zxy <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>'张学友'</span><span>,</span> <span>19</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>ldh<span>.</span>__proto__<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>.</span>constructor<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>ldh<span>.</span><span>__proto__</span><span>.</span>constructor<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>最终输出</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-21:43:56*image-20220719214356161*3.png" alt="image-20220719214356161"></p>
<p>如果把<code>constructor: Star</code> 注释掉</p>
<div><pre><code><span>Star</span><span>.</span>prototype <span>=</span> <span>{</span>
            <span>// 如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</span>
            <span>// constructor: Star,</span>
            <span>// 不加上面的constructor,则会报错,因为我们的原型对象指回的是Star,而不是Star.prototype</span>
            <span>// 不加 constructor 再使用 Star.prototype = {} 就会将原来的Star构造函数给覆盖掉了</span>
            <span>sing</span><span>(</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span><span>'我会唱歌'</span><span>)</span><span>;</span>
            <span>}</span><span>,</span>
            <span>movie</span><span>(</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span><span>'我会演电影'</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>打印输出</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-21:45:10*image-20220719214510759*8.png" alt="image-20220719214510759"></p>
<h5 id="结论" tabindex="-1"> 结论：</h5>
<ul>
<li>如果我们修改了原来的原型对象,给原型对象赋值的是一个对象,则必须手动的利用constructor指回原来的构造函数</li>
</ul>
<h5 id="构造函数、实例、原型对象三者之间的关系" tabindex="-1"> <strong>构造函数、实例、原型对象三者之间的关系</strong></h5>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-21:47:32*image-20220719214732582*8.png" alt="image-20220719214732582"></p>
<h5 id="原型链" tabindex="-1"> 原型链</h5>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-19-21:47:53*image-20220719214753030*0.png" alt="image-20220719214753030"></p>
<h5 id="javascript-的成员查找机制-规则" tabindex="-1"> <strong>JavaScript</strong> 的成员查找机制(规则)</h5>
<ul>
<li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性</li>
<li>如果没有就查找它的原型（也就是 __proto__指向的 prototype 原型对象）。</li>
<li>如果还没有就查找原型对象的原型（Object的原型对象）。</li>
<li>依此类推一直找到 Object 为止（null）。</li>
<li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线。</li>
</ul>
<h5 id="原型对象this指向" tabindex="-1"> 原型对象this指向</h5>
<p>向我们实例对象.</p>
<p>原型对象里面放的是方法, 这个方法里面的this 指向的是 这个方法的调用者, 也就是这个实例对象.</p>
<h4 id="扩展内置对象" tabindex="-1"> 扩展内置对象</h4>
<p>每一个内置对象都会在 <code>prototype</code>挂载对应的方法</p>
<div><pre><code>		console<span>.</span><span>log</span><span>(</span><span>Array</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Object</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Number</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>String</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Boolean</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Date</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>RegExp</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Error</span><span>.</span>prototype<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Symbol</span><span>.</span>prototype<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-11:46:25*image-20220720114625603*b.png" alt="image-20220720114625603"></p>
<p><strong>我们也可以自定义方法挂载到内置对象的</strong> <code>prototype</code>上</p>
<div><pre><code>		<span>Array</span><span>.</span>prototype<span>.</span><span>sum</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
            <span>var</span> sum <span>=</span> <span>0</span><span>;</span>
            <span>for</span> <span>(</span><span>var</span> i <span>=</span> <span>0</span><span>;</span> i <span>&lt;</span> <span>this</span><span>.</span>length<span>;</span> i<span>++</span><span>)</span> <span>{</span>
                sum <span>+=</span> <span>this</span><span>[</span>i<span>]</span><span>;</span>
            <span>}</span>
            <span>return</span> sum<span>;</span>
        <span>}</span><span>;</span>

		<span>var</span> arr <span>=</span> <span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>arr<span>.</span><span>sum</span><span>(</span><span>)</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Array</span><span>.</span>prototype<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-11:48:29*image-20220720114829169*7.png" alt="image-20220720114829169"></p>
<h4 id="call方法" tabindex="-1"> call方法</h4>
<ul>
<li><code>call() </code>可以调用函数</li>
<li><code>call()</code>方法是<code>Function</code>原型上的，所以要通过 <code>方法.call('第一个参数为要将this指向的作用域',...args)</code></li>
</ul>
<div><pre><code><span>function</span> <span>fn</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'我想喝手磨咖啡'</span><span>)</span><span>;</span>
            <span>this</span><span>.</span><span>testSum</span><span>(</span>x<span>,</span> y<span>)</span>
            console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
<span>}</span>
        <span>const</span> <span>fn2</span> <span>=</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
        <span>}</span>
        <span>var</span> o <span>=</span> <span>{</span>
            <span>name</span><span>:</span> <span>'andy'</span><span>,</span>
            <span>testSum</span><span>(</span><span>x<span>,</span> y</span><span>)</span> <span>{</span>
                console<span>.</span><span>log</span><span>(</span><span>'值为'</span> <span>+</span> <span>(</span>x <span>+</span> y<span>)</span><span>)</span><span>;</span>
            <span>}</span>
        <span>}</span><span>;</span>
       
        <span>// 1. call() 可以调用函数</span>
        <span>// fn.call();</span>
        <span>// 2. call() 可以改变这个函数的this指向 此时这个函数的this 就指向了o这个对象</span>
        <span>fn</span><span>.</span><span>call</span><span>(</span>o<span>,</span> <span>321</span><span>,</span> <span>2</span><span>)</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-12:13:57*image-20220720121357273*1.png" alt="image-20220720121357273"></p>
<ul>
<li>上图我们可以看到，在使用 <code>fn.call(o, 321, 2)</code>后，将<code>fn</code>的<code>this</code>指向了<code>o</code>这个对象</li>
<li>我们在<code>o</code>上挂载一个<code>testSum</code>方法，在<code>fn</code>内通过<code>this.testSum()</code>调用，能在控制台中输出结果</li>
</ul>
<h4 id="借用父构造函数继承属性" tabindex="-1"> 借用父构造函数继承属性</h4>
<div><pre><code>		<span>// 借用父构造函数继承属性</span>
        <span>// // 1. 父构造函数</span>
        <span>function</span> <span>Father</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
            <span>// this 指向父构造函数的对象实例</span>
            <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>
        <span>// 2 .子构造函数</span>
        <span>function</span> <span>Son</span><span>(</span><span>uname<span>,</span> age<span>,</span> score</span><span>)</span> <span>{</span>
            <span>// this 指向子构造函数的对象实例</span>
            <span>Father</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> uname<span>,</span> age<span>)</span><span>;</span>
            <span>this</span><span>.</span>score <span>=</span> score<span>;</span>
        <span>}</span>
        <span>var</span> son <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>'刘德华'</span><span>,</span> <span>18</span><span>,</span> <span>100</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>son<span>)</span><span>;</span>

<span>// 传入对象形式的构造函数</span>
<span>function</span> <span>Father</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
            <span>// this 指向父构造函数的对象实例</span>
            <span>this</span><span>.</span>uname <span>=</span> obj<span>.</span>uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> obj<span>.</span>age<span>;</span>

        <span>}</span>
        <span>// 2 .子构造函数</span>
        <span>function</span> <span>Son</span><span>(</span><span>obj</span><span>)</span> <span>{</span>
            <span>// this 指向子构造函数的对象实例</span>
            <span>Father</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> <span>{</span>
                <span>uname</span><span>:</span> obj<span>.</span>uname<span>,</span>
                <span>age</span><span>:</span> obj<span>.</span>age
            <span>}</span><span>)</span><span>;</span>
            <span>this</span><span>.</span>score <span>=</span> obj<span>.</span>score<span>;</span>
        <span>}</span>
        <span>var</span> son <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>{</span>
            <span>uname</span><span>:</span> <span>'刘德华'</span><span>,</span>
            <span>age</span><span>:</span> <span>18</span><span>,</span>
            <span>score</span><span>:</span> <span>100</span>

        <span>}</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>son<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-12:48:40*image-20220720124840693*0.png" alt="image-20220720124840693"></p>
<h4 id="利用原型对象继承方法" tabindex="-1"> 利用原型对象继承方法</h4>
<div><pre><code><span>// 借用父构造函数继承属性</span>
        <span>// 1. 父构造函数</span>
        <span>function</span> <span>Father</span><span>(</span><span>uname<span>,</span> age</span><span>)</span> <span>{</span>
            <span>// this 指向父构造函数的对象实例</span>
            <span>this</span><span>.</span>uname <span>=</span> uname<span>;</span>
            <span>this</span><span>.</span>age <span>=</span> age<span>;</span>
        <span>}</span>
        <span>Father</span><span>.</span>prototype<span>.</span><span>money</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>100000</span><span>)</span><span>;</span>

        <span>}</span><span>;</span>
        <span>// 2 .子构造函数 </span>
        <span>function</span> <span>Son</span><span>(</span><span>uname<span>,</span> age<span>,</span> score</span><span>)</span> <span>{</span>
            <span>// this 指向子构造函数的对象实例</span>
            <span>Father</span><span>.</span><span>call</span><span>(</span><span>this</span><span>,</span> uname<span>,</span> age<span>)</span><span>;</span>
            <span>this</span><span>.</span>score <span>=</span> score<span>;</span>
        <span>}</span>
        <span>// 使用这样赋值，会将 Father.prototype 父构造函数的内存地址赋值给 Son.prototype 子构造函数，那么接下来给子构造函数原型上添加方法，父构造函数也会出现</span>
        <span>// Son.prototype = Father.prototype; //这样直接赋值会有问题, 如果修改了子原型对象, 父原型对象也会跟着一起变化 </span>
        <span>Son</span><span>.</span>prototype <span>=</span> <span>new</span> <span>Father</span><span>(</span><span>)</span><span>;</span>
        <span>// 如果利用对象的形式修改了原型对象,别忘了利用constructor 指回原来的构造函数</span>
        <span>Son</span><span>.</span>prototype<span>.</span>constructor <span>=</span> Son<span>;</span>
        <span>// 这个是子构造函数专门的方法</span>
        <span>Son</span><span>.</span>prototype<span>.</span><span>exam</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
            console<span>.</span><span>log</span><span>(</span><span>'孩子要考试'</span><span>)</span><span>;</span>
        <span>}</span>
        <span>var</span> son <span>=</span> <span>new</span> <span>Son</span><span>(</span><span>'刘德华'</span><span>,</span> <span>18</span><span>,</span> <span>100</span><span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span>son<span>)</span><span>;</span>
        console<span>.</span><span>log</span><span>(</span><span>Father</span><span>.</span>prototype<span>)</span><span>;</span>
        <span>Father</span><span>.</span>prototype<span>.</span><span>money</span><span>(</span><span>)</span>
        son<span>.</span><span>money</span><span>(</span><span>)</span>
        son<span>.</span><span>exam</span><span>(</span><span>)</span>
        console<span>.</span><span>log</span><span>(</span><span>Son</span><span>.</span>prototype<span>.</span>constructor<span>)</span><span>;</span>
        <span>/**
         * 如果使用 Son.prototype = Father.prototype; 下面会输出 true
         * 如果使用 Son.prototype = new Father(); 下面会输出 false
         */</span>
        console<span>.</span><span>log</span><span>(</span><span>Son</span><span>.</span>prototype <span>===</span> <span>Father</span><span>.</span>prototype<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-13:17:49*image-20220720131749583*6.png" alt="image-20220720131749583"></p>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-07-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">对象方法：Object.defineProperty</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%9AObject.defineProperty.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/%E5%AF%B9%E8%B1%A1%E6%96%B9%E6%B3%95%EF%BC%9AObject.defineProperty.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">对象方法：Object.defineProperty  面向对象相关的笔记</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>面向对象相关的笔记</p>
</div>

<h1 id="对象方法-object-defineproperty" tabindex="-1"> 对象方法：Object.defineProperty</h1>
<div><pre><code>Object<span>.</span><span>defineProperty</span><span>(</span>obj<span>,</span> prop<span>,</span> descriptor<span>)</span>
</code></pre><div aria-hidden="true"><div></div></div></div><ul>
<li><code>obj</code>：必需。目标对象</li>
<li><code>prop</code>：必需。需定义或修改的属性的名字</li>
<li><code>descriptor</code>：必需。目标属性所拥有的特性</li>
</ul>
<p><code>Object.defineProperty()</code>  第三个参数 <code>descriptor </code>说明： 以对象形式 <code>{ } </code>书写</p>
<ul>
<li>
<p><code>value</code>: 设置属性的值 默认为<code>undefined</code></p>
</li>
<li>
<p><code>writable</code>: 值是否可以重写。<code>true </code>| <code>false </code>默认为<code>false</code></p>
</li>
<li>
<p><code>enumerable</code>: 目标属性是否可以被枚举。<code>true </code>| <code>false </code>默认为<code>false</code></p>
</li>
<li>
<p><code>configurable</code>: 目标属性是否可以被删除或是否可以再次修改特性 <code>true </code>| <code>false </code>默认为<code>false</code></p>
</li>
</ul>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-07-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">类的本质</title>
    <id>https://autumnwhj.github.io/posts/notes/javascript/es6/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/javascript/es6/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">类的本质  面向对象相关的笔记</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<div><p>导读</p>
<p>面向对象相关的笔记</p>
</div>

<ul>
<li>
<p><code>ES6 </code>之前通过 构造函数+ 原型实现面向对象 编程</p>
<p>(1) 构造函数有原型对象<code>prototype</code></p>
<p>(2) 构造函数原型对象<code>prototype </code>里面有<code>constructor </code>指向构造函数本身</p>
<p>(3) 构造函数可以通过原型对象添加方法</p>
<p>(4) 构造函数创建的实例对象有<code>__proto__</code> 原型指向 构造函数的原型对象</p>
<p><code>ES6 </code>通过 类 实现面向对象编程*</p>
</li>
<li>
<p>类的本质其实还是一个函数 我们也可以简单的认为 类就是 构造函数的另外一种写法</p>
</li>
<li>
<p>类有原型对象<code>prototype</code></p>
</li>
</ul>
<div><pre><code><span>// ES6 之前通过 构造函数+ 原型实现面向对象 编程</span>
<span>// (1) 构造函数有原型对象prototype </span>
<span>// (2) 构造函数原型对象prototype 里面有constructor 指向构造函数本身</span>
<span>// (3) 构造函数可以通过原型对象添加方法</span>
<span>// (4) 构造函数创建的实例对象有__proto__ 原型指向 构造函数的原型对象</span>
<span>// ES6 通过 类 实现面向对象编程 </span>
<span>class</span> <span>Star</span> <span>{</span><span>}</span>
console<span>.</span><span>log</span><span>(</span><span>typeof</span> Star<span>)</span><span>;</span>
<span>// 1. 类的本质其实还是一个函数 我们也可以简单的认为 类就是 构造函数的另外一种写法</span>
<span>// (1) 类有原型对象prototype </span>
console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>)</span><span>;</span>
<span>// (2) 类原型对象prototype 里面有constructor 指向类本身</span>
console<span>.</span><span>log</span><span>(</span><span>Star</span><span>.</span>prototype<span>.</span>constructor<span>)</span><span>;</span>
<span>// (3)类可以通过原型对象添加方法</span>
<span>Star</span><span>.</span>prototype<span>.</span><span>sing</span> <span>=</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>'冰雨'</span><span>)</span><span>;</span>
<span>}</span>
<span>var</span> ldh <span>=</span> <span>new</span> <span>Star</span><span>(</span><span>)</span><span>;</span>
console<span>.</span><span>dir</span><span>(</span>ldh<span>)</span><span>;</span>
<span>// (4) 类创建的实例对象有__proto__ 原型指向 类的原型对象</span>
console<span>.</span><span>log</span><span>(</span>ldh<span>.</span>__proto__ <span>===</span> <span>Star</span><span>.</span>prototype<span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/typora-user-images/2022-07-20-13:34:56*image-20220720133456588*9.png" alt="image-20220720133456588"></p>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="JavaScript" scheme=""/>
    <published>2022-07-30T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">Vue2学习笔记</title>
    <id>https://autumnwhj.github.io/posts/notes/vue/vue2/vue2-note-part.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/vue/vue2/vue2-note-part.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">Vue2学习笔记  组件之间的数据共享、$refs引用DOM、动态组件、插槽、自定义指令</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>组件之间的数据共享、$refs引用DOM、动态组件、插槽、自定义指令</p>
</blockquote>

<h2 id="子向父传值" tabindex="-1"> 子向父传值</h2>
<h3 id="通过自定义事件" tabindex="-1"> 通过自定义事件</h3>
<blockquote>
<p>子组件</p>
</blockquote>
<div><pre><code><span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>count</span><span>:</span> <span>0</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
      <span>//测试方法</span>
    <span>add</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>count<span>++</span><span>;</span>
      <span>//向父传值</span>
      <span>//修改数据时，通过$emit()触发自定义事件</span>
      <span>//1.$emit可以写入数字或者字符串</span>
      <span>this</span><span>.</span><span>$emit</span><span>(</span><span>"numChange"</span><span>,</span> <span>this</span><span>.</span>count<span>)</span><span>;</span>
      <span>//2.也可以传入多个数据,也可以传入对象</span>
      <span>// 后期ajax数据也可以传递</span>
      <span>//this.$emit("numChange", 1, 2, 3, 4, 5, {</span>
      <span>// name: "张三",</span>
      <span>//age: 18,</span>
      <span>//});</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>父组件</p>
</blockquote>
<div><pre><code><span>//监听@numChange事件</span>
<span>//自定义事件跟vue规定的 @click="show" 原理一样</span>
<span>&lt;</span>Count @numChange<span>=</span><span>"getCount"</span><span>></span><span>&lt;</span><span>/</span>Count<span>></span>

<span>export</span> <span>default</span> <span>{</span>
  <span>components</span><span>:</span> <span>{</span>
    Count<span>,</span>
  <span>}</span><span>,</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>//创建对象数据，用于接收自定义事件赋值</span>
      <span>countFromSon</span><span>:</span> <span>0</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
      <span>//getCount 为使用组件时的方法名，携带一个参数</span>
      <span>//1.参数是子组件传递过来的数据</span>
    <span>getCount</span><span>(</span><span>val</span><span>)</span> <span>{</span>
        <span>//将参数的值重新赋值给当前vue实例的对象</span>
      <span>this</span><span>.</span>countFromSon <span>=</span> val<span>;</span>
    <span>}</span><span>,</span>
      <span>//2.也可以接收多个数据</span>
      <span>//getCount(a, b, c, d, e) {</span>
      <span>//	console.log(a, b, c, d, e);</span>
      <span>//},</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="兄弟组件之间的数据共享" tabindex="-1"> 兄弟组件之间的数据共享</h2>
<blockquote>
<p><strong>在<code>vue2.x</code>中，兄弟组件之间数据共享的方案是<code>EventBus</code>。</strong></p>
<p><strong><code>EventBus</code>的使用步骤</strong>⬇️</p>
</blockquote>
<p>① 创建 <code>eventBus.js</code> 模块，并向外共享一个 <code>Vue </code>的实例对象
② 在数据发送方，调用 <code>bus.$emit('事件名称', 要发送的数据)</code> 方法触发自定义事件
③ 在数据接收方，调用 <code>bus.$on('事件名称', 事件处理函数)</code> 方法注册一个自定义事件</p>
<blockquote>
<p><code>eventBus.js</code></p>
</blockquote>
<div><pre><code><span>import</span> Vue <span>from</span> <span>'vue'</span><span>;</span> 
<span>export</span> <span>default</span> <span>new</span> <span>Vue</span><span>(</span><span>)</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><blockquote>
<p>数据发送方</p>
</blockquote>
<div><pre><code><span>//兄弟组件都需要引入eventBus.js</span>
<span>import</span> bus <span>from</span> <span>"./eventBus.js"</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>sendCount</span><span>:</span> <span>12</span><span>,</span>
      <span>sendObj</span><span>:</span> <span>{</span>
        <span>name</span><span>:</span> <span>"xz"</span><span>,</span>
        <span>age</span><span>:</span> <span>"18"</span><span>,</span>
      <span>}</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>send</span><span>(</span><span>)</span> <span>{</span>
        <span>//同样可以传入多个参数，只需要接收时使用</span>
      bus<span>.</span><span>$emit</span><span>(</span><span>"share"</span><span>,</span> <span>this</span><span>.</span>sendCount<span>,</span> <span>this</span><span>.</span>sendObj<span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><blockquote>
<p>数据接收方</p>
</blockquote>
<div><pre><code><span>//兄弟组件都需要引入eventBus.js</span>
<span>import</span> bus <span>from</span> <span>"./eventBus.js"</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>count</span><span>:</span> <span>0</span><span>,</span>
      <span>obj</span><span>:</span> <span>{</span><span>}</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>getData</span><span>(</span><span>)</span> <span>{</span>
        <span>//固定方案，使用箭头函数，以及兄弟之间传递 </span>
      bus<span>.</span><span>$on</span><span>(</span><span>"share"</span><span>,</span> <span>(</span><span>count<span>,</span> obj</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>count <span>=</span> count<span>;</span>
        <span>this</span><span>.</span>obj <span>=</span> obj<span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  <span>created</span><span>(</span><span>)</span> <span>{</span>
      <span>//created调用</span>
    <span>this</span><span>.</span><span>getData</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="refs-引用dom" tabindex="-1"> <code>$refs </code>引用<code>DOM</code></h2>
<div><pre><code><span>//组件内元素添加ref自定义属性</span>
<span>&lt;</span>h3 ref<span>=</span><span>"myh1"</span><span>></span>Left 组件<span>&lt;</span><span>/</span>h3<span>></span>
<span>//使用前要加this</span>
console<span>.</span><span>log</span><span>(</span><span>this</span><span>.</span>$refs<span>.</span>myh1<span>.</span>innerText<span>)</span><span>;</span>
<span>//注意 在created里面使用会报错（undefind）</span>
<span>// mounted 当页面元素加载完毕后即可调用$refs</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="使用-refs-引用组件实例" tabindex="-1"> 使用<code>$refs</code> 引用组件实例</h3>
<div><pre><code><span>//父组件</span>
<span>// 设置ref自定义属性</span>
<span>&lt;</span>Left ref<span>=</span><span>"comLeft"</span><span>></span><span>&lt;</span><span>/</span>Left<span>></span>
<span>//父组件打印this</span>
<span>//如下图显示-在$refs 内出现了comLeft实例</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*01*8.jpg" alt="01"></p>
<blockquote>
<p>展开后发现是子组件的实例，也可以看到子组件引用的<code>dom</code>元素</p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*02*c.jpg" alt="02"></p>
<blockquote>
<p><strong>展开后有看到<code>send</code>方法</strong></p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*03*4.jpg" alt="03"></p>
<blockquote>
<p><strong>父组件操作子组件方法</strong></p>
</blockquote>
<div><pre><code><span>//父组件</span>
<span>&lt;</span>button @click<span>=</span><span>"sendLeft"</span><span>></span>发送<span>&lt;</span><span>/</span>button<span>></span>

<span>export</span> <span>default</span> <span>{</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>logthis</span><span>(</span><span>)</span> <span>{</span>
      console<span>.</span><span>log</span><span>(</span><span>this</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
    <span>//点击按钮执行Left组件中的send方法</span>
    <span>//也可也直接操作里面的数据</span>
    <span>sendLeft</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>$refs<span>.</span>comLeft<span>.</span><span>send</span><span>(</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="控制文本框和按钮的按需切换-案例" tabindex="-1"> 控制文本框和按钮的按需切换-案例</h3>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*togipt*3.gif" alt="togipt"></p>
<blockquote>
<p><strong>组件的 <code>$nextTick(cb)</code> 方法，会把 <code>cb</code> 回调推迟到下一个 <code>DOM </code>更新周期之后执行。通俗的理解是：等组件的<code>DOM </code>更新完成之后，再执行 <code>cb</code> 回调函数。从而能保证 <code>cb</code> 回调函数可以操作到最新的 DOM 元素。</strong></p>
</blockquote>
<div><pre><code><span>//组件代码</span>
<span>&lt;</span>input type<span>=</span><span>"text"</span> v<span>-</span><span>if</span><span>=</span><span>"inputVisible"</span> @blur<span>=</span><span>"showButton"</span> ref<span>=</span><span>"iptRef"</span> <span>/</span><span>></span>
<span>&lt;</span>button v<span>-</span><span>else</span> @click<span>=</span><span>"showInput"</span><span>></span>展示输入框<span>&lt;</span><span>/</span>button<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><div><pre><code><span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>inputVisible</span><span>:</span> <span>false</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>methods</span><span>:</span> <span>{</span>
    <span>showInput</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>inputVisible <span>=</span> <span>true</span><span>;</span>
      <span>//$nextTick(cb)</span>
      <span>//当</span>
      <span>this</span><span>.</span><span>$nextTick</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
        <span>this</span><span>.</span>$refs<span>.</span>iptRef<span>.</span><span>focus</span><span>(</span><span>)</span><span>;</span>
      <span>}</span><span>)</span><span>;</span>
    <span>}</span><span>,</span>
    <span>showButton</span><span>(</span><span>)</span> <span>{</span>
      <span>this</span><span>.</span>inputVisible <span>=</span> <span>false</span><span>;</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="动态组件" tabindex="-1"> 动态组件</h2>
<h3 id="_1-什么是动态组件" tabindex="-1"> 1.什么是动态组件</h3>
<p>动态组件指的是动态切换组件的显示与隐藏。</p>
<h3 id="_2-如何实现动态组件渲染" tabindex="-1"> 2. 如何实现动态组件渲染</h3>
<p><code>vue </code>提供了一个内置的  组件，专门用来实现动态组件的渲染。</p>
<ul>
<li><code>component </code>标签是<code>vue</code>内置的，作用：组件的占位符</li>
<li><code>is</code> 属性的值，表示要渲染的名字</li>
</ul>
<div><pre><code> <span>&lt;</span><span>!</span><span>--</span> 渲染 Left 组件和 Right 组件 <span>--</span><span>></span>
      <span>&lt;</span><span>!</span><span>--</span> <span>&lt;</span>Left<span>></span><span>&lt;</span><span>/</span>Left<span>></span>
      <span>&lt;</span>Right<span>></span><span>&lt;</span><span>/</span>Right<span>></span> <span>--</span><span>></span>
<span>//这样写会报错，写法写死了。不能动态修改</span>
  <span>&lt;</span>component is<span>=</span><span>"Left"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
<span>//根据data内有的属性动态绑定，is前需要加v-bind 或 :</span>
<span>//可以动态切换</span>
  <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comLeft"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code><span>import</span> Left <span>from</span> <span>"@/components/Left.vue"</span><span>;</span>
<span>import</span> Right <span>from</span> <span>"@/components/Right.vue"</span><span>;</span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>comLeft</span><span>:</span> <span>"Left"</span><span>,</span>
      <span>comRight</span><span>:</span> <span>"Right"</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>components</span><span>:</span> <span>{</span>
    Left<span>,</span>
    Right<span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="案例" tabindex="-1"> 案例</h3>
<h4 id="_1-点击按钮切换组件" tabindex="-1"> 1.点击按钮切换组件</h4>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*09*9.gif" alt="09"></p>
<p>通过点击按钮，修改<code>comName</code>的属性值</p>
<div><pre><code><span>&lt;</span>button @click<span>=</span><span>"comName = 'Left'"</span><span>></span>展示Left<span>&lt;</span><span>/</span>button<span>></span>
<span>&lt;</span>button @click<span>=</span><span>"comName = 'Right'"</span><span>></span>展示Right<span>&lt;</span><span>/</span>button<span>></span>
<span>&lt;</span>div <span>class</span><span>=</span><span>"box"</span><span>></span>
      <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comName"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
<span>&lt;</span><span>/</span>div<span>></span>

<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>comName</span><span>:</span> <span>"Left"</span><span>,</span>
      <span>// comLeft: "Left",</span>
      <span>// comRight: "Right",</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>components</span><span>:</span> <span>{</span>
    Left<span>,</span>
    Right<span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h4 id="_2-left组件添加-1按钮-再来回切换组件" tabindex="-1"> 2.<code>Left</code>组件添加<code>+1</code>按钮，再来回切换组件</h4>
<div><pre><code><span>//Left</span>
<span>&lt;</span>h3<span>></span>Left 组件<span>--</span><span>-</span><span>{</span><span>{</span> count <span>}</span><span>}</span><span>&lt;</span><span>/</span>h3<span>></span>
<span>&lt;</span>button @click<span>=</span><span>"count++"</span><span>></span><span>+</span><span>1</span><span>&lt;</span><span>/</span>button<span>></span>

<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>count</span><span>:</span> <span>0</span><span>,</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>destroyed</span><span>(</span><span>)</span> <span>{</span>
    console<span>.</span><span>log</span><span>(</span><span>"Left 组件销毁"</span><span>)</span><span>;</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*10*3.gif" alt="10"></p>
<blockquote>
<ul>
<li>
<p><strong>缺点，却换后 组件原来的内容会被销毁，相当于被刷新</strong></p>
</li>
<li>
<p><strong>重新切换会重新创建组件</strong></p>
</li>
<li>
<p><strong>被隐藏的组件会被销毁</strong></p>
</li>
<li>
<p><strong>解决办法？有！ 使用 <code>keep-alive </code>标签</strong></p>
</li>
</ul>
</blockquote>
<h4 id="解决办法" tabindex="-1"> 解决办法</h4>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*11*9.gif" alt="11"></p>
<p><strong>使用<code>&lt;keep-alive&gt;</code>标签将<code>&lt;component&gt;</code>标签包裹起来即可解决</strong></p>
<p><strong>使用后也并不会经过销毁</strong></p>
<p><strong><code>keep-alive</code> 可以把内部的组件进行缓存，而不是销毁组件</strong></p>
<div><pre><code>App<span>.</span>vue
<span>&lt;</span>keep<span>-</span>alive<span>></span>
    <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comName"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
<span>&lt;</span><span>/</span>keep<span>-</span>alive<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><h4 id="_4-keep-alive-对应的生命周期函数" tabindex="-1"> 4. keep-alive 对应的生命周期函数</h4>
<p>当组件被缓存时，会自动触发组件的 <code>deactivated </code>生命周期函数。
当组件被激活时，会自动触发组件的 <code>activated </code>生命周期函数。</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*12*8.gif" alt="12"></p>
<h4 id="_5-keep-alive-的-include-属性" tabindex="-1"> 5. <code>keep-alive</code> 的 <code>include</code> 属性</h4>
<p><code>include </code>属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔：</p>
<p><strong>只有在include属性内有的组件，才会被缓存，反之则不会进行缓存</strong></p>
<p><strong>注意：<code>include</code>属性值是我们 <code>components </code>注册组件时的名称</strong></p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*13*a.gif" alt="13"></p>
<div><pre><code><span>&lt;</span>keep<span>-</span>alive include<span>=</span><span>"Right"</span><span>></span>
    <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comName"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
<span>&lt;</span><span>/</span>keep<span>-</span>alive<span>></span>
<span>export</span> <span>default</span> <span>{</span>
  <span>data</span><span>(</span><span>)</span> <span>{</span>
    <span>return</span> <span>{</span>
      <span>comName</span><span>:</span> <span>"Left"</span><span>,</span>
      <span>// comLeft: "Left",</span>
      <span>// comRight: "Right",</span>
    <span>}</span><span>;</span>
  <span>}</span><span>,</span>
  <span>components</span><span>:</span> <span>{</span>
    Left<span>,</span>
    Right<span>,</span>
  <span>}</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>如需多个进行缓存 只需通过英文逗号<code>,</code>进行分割</p>
<div><pre><code><span>&lt;</span>keep<span>-</span>alive include<span>=</span><span>"Left,Right"</span><span>></span>
     <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comName"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
<span>&lt;</span><span>/</span>keep<span>-</span>alive<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><h4 id="扩展" tabindex="-1"> 扩展</h4>
<p>1.跟<code>include</code>相反的<code>exclude</code></p>
<ul>
<li>两个只能存在一个，只能使用一个</li>
<li><code>exclude</code>是排除不需要缓存的组件</li>
<li>两个互补使用</li>
</ul>
<div><pre><code><span>&lt;</span>keep<span>-</span>alive exclude<span>=</span><span>"Left"</span><span>></span>
        <span>&lt;</span>component <span>:</span>is<span>=</span><span>"comName"</span><span>></span><span>&lt;</span><span>/</span>component<span>></span>
      <span>&lt;</span><span>/</span>keep<span>-</span>alive<span>></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p>2.当子组件提供了 <code>name </code>属性之后，组件的名称，就是 <code>name </code>属性的值</p>
<div><pre><code>Right组件
<span>export</span> <span>default</span> <span>{</span>
  <span>//当子组件提供了 name 属性之后，组件的名称，就是 name 属性的值</span>
  <span>name</span><span>:</span> <span>"MyRight"</span><span>,</span>
<span>}</span><span>;</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*14*f.jpg" alt="14"></p>
<h2 id="插槽" tabindex="-1"> 插槽</h2>
<h3 id="_1-什么是插槽" tabindex="-1"> 1.什么是插槽</h3>
<blockquote>
<p>插槽（<code>slot</code>）是 <code>vue </code>为组件的封装者提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的
部分定义为插槽。</p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*15*f.jpg" alt="15"></p>
<p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p>
<h3 id="_2-体验插槽的基础用法" tabindex="-1"> 2. 体验插槽的基础用法</h3>
<blockquote>
<p>在封装组件时，可以通过  元素定义插槽，从而为用户预留内容占位符。示例代码如下：</p>
</blockquote>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*16*f.jpg" alt="16"></p>
<div><pre><code>!父组件
<span><span><span>&lt;</span>Left</span><span>></span></span>
        <span>&lt;!-- 默认情况下，在使用组建的时候，提供的内容都会被
         填充到名字为default的插槽中 --></span>
        <span>&lt;!-- 1.如果要把内容填充到指定名称的插槽中，需要使用v-slot：这个
         指令 --></span>
        <span>&lt;!-- 2.v-slot:后面要跟上插槽的 --></span>
        <span>&lt;!-- 3.v-slot：指令不能直接使用在元素身上,必须用在 template 标签上 --></span>
        <span>&lt;!-- 4.template 这个标签，她在一个虚拟的标签，只起到包裹性质的作用，但是，不会被渲染为
         任何实质性的 html元素 --></span>
        <span>&lt;!-- &lt;template v-slot:default> --></span>
        <span>&lt;!-- `v-slot:` 等于 `#` --></span>
        <span>&lt;!--简写为 `#`  --></span>
        <span><span><span>&lt;</span>template</span> <span>#default</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>Left组件插槽内容<span><span><span>&lt;/</span>p</span><span>></span></span>
        <span><span><span>&lt;/</span>template</span><span>></span></span>
      <span><span><span>&lt;/</span>Left</span><span>></span></span>


!子组件
<span>&lt;!-- 声明一个插槽区域 --></span>
    <span>&lt;!-- Vue官方规定：每一个 solt 插槽，都要有一个 name 名称 --></span>
    <span>&lt;!-- 如果省略了 solt 属性，则有一个默认名称叫做default --></span>
    <span>&lt;!-- &lt;slot>&lt;/slot> --></span>
<span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>default<span>"</span></span><span>></span></span>
      <span>&lt;!-- 以用户指定的为准 --></span>
    <span><span><span>&lt;</span>p</span><span>></span></span>这是 default 插槽的默认内容<span><span><span>&lt;/</span>p</span><span>></span></span>
<span><span><span>&lt;/</span>slot</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h3 id="具名插槽" tabindex="-1"> 具名插槽</h3>
<p>如果在封装组件时需要预留多个插槽节点，则需要为每个  插槽指定具体的 <code>name </code>名称。这种带有具体
名称的插槽叫做“具名插槽”。</p>
<p><strong>注意：没有指定 <code>name </code>名称的插槽，会有隐含的名称叫做 <code>default</code></strong></p>
<h4 id="为具名插槽提供内容" tabindex="-1"> 为具名插槽提供内容</h4>
<p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot </code>指令，并以 v-slot 的参数的形式提供其名称。示例代码如下：</p>
<p>跟 <code>v-on</code> 和 <code>v-bind</code> 一样，<code>v-slot</code> 也有缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code>
可以被重写为 <code>#header</code>：</p>
<div><pre><code>父组件

<span><span><span>&lt;</span>Article</span><span>></span></span>
      <span><span><span>&lt;</span>template</span> <span>#title</span><span>></span></span>
        <span><span><span>&lt;</span>h3</span><span>></span></span>一首诗<span><span><span>&lt;/</span>h3</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>
      <span><span><span>&lt;</span>template</span> <span>#content</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
        <span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>
      <span><span><span>&lt;</span>template</span> <span>#footer</span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span>
          作者：李白
        <span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>
    <span><span><span>&lt;/</span>Article</span><span>></span></span>

export default {
  components: {
    Left,
    Article,
  },
};
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><div><pre><code>Article子组件
<span><span><span>&lt;</span>template</span><span>></span></span>
  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>article-container<span>"</span></span><span>></span></span>
    <span>&lt;!-- 文章的标题 --></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>header-box<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>title<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>slot</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>

    <span>&lt;!-- 文章的内容 --></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>content-box<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>content<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>slot</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>

    <span>&lt;!-- 文章的作者 --></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>footer-box<span>"</span></span><span>></span></span>
      <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>footer<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>slot</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
  <span><span><span>&lt;/</span>div</span><span>></span></span>
<span><span><span>&lt;/</span>template</span><span>></span></span>

<span><span><span>&lt;</span>script</span><span>></span></span><span><span>
<span>export</span> <span>default</span> <span>{</span>
  <span>//首字母大写</span>
  <span>name</span><span>:</span> <span>"Article"</span><span>,</span>
<span>}</span><span>;</span>
</span></span><span><span><span>&lt;/</span>script</span><span>></span></span>

<span><span><span>&lt;</span>style</span> <span>lang</span><span><span>=</span><span>"</span>less<span>"</span></span> <span>scoped</span><span>></span></span><span><span>
<span>.article-container</span> <span>{</span>
  <span>> div</span> <span>{</span>
    <span>min-height</span><span>:</span> 150px<span>;</span>
  <span>}</span>
<span>}</span>
<span>.header-box</span> <span>{</span>
  <span>background-color</span><span>:</span> pink<span>;</span>
<span>}</span>
<span>.content-box</span> <span>{</span>
  <span>background-color</span><span>:</span> lightblue<span>;</span>
<span>}</span>
<span>.footer-box</span> <span>{</span>
  <span>background-color</span><span>:</span> lightsalmon<span>;</span>
<span>}</span>
</span></span><span><span><span>&lt;/</span>style</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*17*2.jpg" alt="17"></p>
<h4 id="作用域插槽" tabindex="-1"> 作用域插槽</h4>
<blockquote>
<p>在封装组件时，为预留的<code>&lt;slot&gt;</code>提供属性对应的值，这种用法，叫做 “作用域插槽 ”</p>
</blockquote>
<div><pre><code>父组件
<span><span><span>&lt;</span>template</span> <span>#content</span><span><span>=</span><span>"</span>scope<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>{{ scope }}<span><span><span>&lt;/</span>p</span><span>></span></span>
        <span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>

子组件
<span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>content-box<span>"</span></span><span>></span></span>
      <span>&lt;!-- 在封装组件时，为预留的&lt;slot>提供属性对应的值，这种用法，叫做 “作用域插槽 ” --></span>
      <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>content<span>"</span></span> <span>msg</span><span><span>=</span><span>"</span>hello vue<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>slot</span><span>></span></span>
<span><span><span>&lt;/</span>div</span><span>></span></span>

</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*18*5.jpg" alt="18"></p>
<h4 id="作用域插槽的解构赋值" tabindex="-1"> 作用域插槽的解构赋值</h4>
<div><pre><code>父组件
<span>&lt;!-- &lt;template #content="scope"> --></span>
      <span>&lt;!-- 可以使用解构赋值使用 --></span>
      <span><span><span>&lt;</span>template</span> <span>#content</span><span><span>=</span><span>"</span>{msg,user}<span>"</span></span><span>></span></span>
        <span><span><span>&lt;</span>div</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>啊，大海<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span>&lt;!-- &lt;p>{{ scope }}&lt;/p> --></span>
          <span>&lt;!-- 解构赋值使用 --></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>{{ msg }}<span><span><span>&lt;/</span>p</span><span>></span></span>
          <span><span><span>&lt;</span>p</span><span>></span></span>{{ user }}<span><span><span>&lt;/</span>p</span><span>></span></span>
        <span><span><span>&lt;/</span>div</span><span>></span></span>
      <span><span><span>&lt;/</span>template</span><span>></span></span>


子组件
<span>&lt;!-- 文章的内容 --></span>
    <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>"</span>content-box<span>"</span></span><span>></span></span>
      <span>&lt;!-- 在封装组件时，为预留的&lt;slot>提供属性对应的值，这种用法，叫做 “作用域插槽 ” --></span>
      <span><span><span>&lt;</span>slot</span> <span>name</span><span><span>=</span><span>"</span>content<span>"</span></span> <span>msg</span><span><span>=</span><span>"</span>hello vue<span>"</span></span>   <span>:user</span><span><span>=</span><span>"</span>userinfo<span>"</span></span><span>></span></span><span><span><span>&lt;/</span>slot</span><span>></span></span>
    <span><span><span>&lt;/</span>div</span><span>></span></span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="自定义指令" tabindex="-1"> 自定义指令</h2>
<h3 id="_1-什么是自定义指令" tabindex="-1"> 1. 什么是自定义指令</h3>
<p><code>vue </code>官方提供了 <code>v-text</code>、<code>v-for</code>、<code>v-model</code>、<code>v-if </code>等常用的指令。除此之外 <code>vue </code>还允许开发者自定义指令。</p>
<h3 id="_2-自定义指令的分类" tabindex="-1"> 2. 自定义指令的分类</h3>
<p><code>vue </code>中的自定义指令分为两类，分别是：</p>
<ul>
<li>私有自定义指令</li>
<li>全局自定义指令</li>
</ul>
<h3 id="_3-私有自定义指令" tabindex="-1"> 3. 私有自定义指令</h3>
<p>在每个 <code>vue </code>组件中，可以在 <code>directives </code>节点下声明私有自定义指令。示例代码如下：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*19*7.jpg" alt="19"></p>
<h3 id="_4-使用自定义指令" tabindex="-1"> 4. 使用自定义指令</h3>
<p>在使用自定义指令时，需要加上<code> v-</code> 前缀。示例代码如下：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*20*6.jpg" alt="20"></p>
<h3 id="_5-为自定义指令动态绑定参数值" tabindex="-1"> 5. 为自定义指令动态绑定参数值</h3>
<p>在 <code>template </code>结构中使用自定义指令时，可以通过等号（=）的方式，为当前指令动态绑定参数值：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*21*a.jpg" alt="21"></p>
<h3 id="_6-通过-binding-获取指令的参数值" tabindex="-1"> 6. 通过 <code>binding </code>获取指令的参数值</h3>
<p>在声明自定义指令时，可以通过形参中的第二个参数，来接收指令的参数值：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*22*3.jpg" alt="22"></p>
<h3 id="_7-update-函数" tabindex="-1"> 7. <code>update </code>函数</h3>
<p><code>bind </code>函数只调用 1 次：当指令第一次绑定到元素时调用，当 <code>DOM </code>更新时 <code>bind </code>函数不会被触发。 <code>update </code>函
数会在每次 <code>DOM </code>更新时被调用。示例代码如下：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*23*7.jpg" alt="23"></p>
<h3 id="_8-函数简写" tabindex="-1"> 8. 函数简写</h3>
<p>如果 <code>insert </code>和<code>update </code>函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*24*c.jpg" alt="24"></p>
<h3 id="_9-全局自定义指令" tabindex="-1"> 9. 全局自定义指令</h3>
<p>全局共享的自定义指令需要通过<code>Vue.directive()</code>进行声明，示例代码如下：</p>
<p><img src="https://public-1310720021.cos.ap-shanghai.myqcloud.com/img/md/img/2022-07-03-15:02:58*25*7.jpg" alt="25"></p>
<h2 id="总结" tabindex="-1"> 总结</h2>
<ol>
<li>
<p>能够掌握 <code>keep-alive</code> 元素的基本使用</p>
<ul>
<li>标签、<code>include </code>属性</li>
</ul>
</li>
<li>
<p>能够掌握插槽的基本用</p>
<ul>
<li>标签、具名插槽、作用域插槽、后备内容</li>
</ul>
</li>
<li>
<p>能够知道如何自定义指令</p>
<ul>
<li>
<p>私有自定义指令 <code>directives: { }</code></p>
</li>
<li>
<p>全局自定义指令<code> Vue.directive()</code></p>
</li>
</ul>
</li>
</ol>
]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="Vue2" scheme=""/>
    <published>2022-08-07T00:00:00.000Z</published>
  </entry>
  <entry>
    <title type="html">vue3全局挂载axios</title>
    <id>https://autumnwhj.github.io/posts/notes/vue/vue3/vue3-global-axios.html</id>
    <link href="https://autumnwhj.github.io/posts/notes/vue/vue3/vue3-global-axios.html"/>
    <updated>2022-12-02T07:25:49.000Z</updated>
    <summary type="html">vue3全局挂载axios  如何在vue3项目中全局配置axios</summary>
    <content type="html"><![CDATA[<CountView></CountView>
<blockquote>
<p>如何在vue3项目中全局配置axios</p>
</blockquote>

<h2 id="配置" tabindex="-1"> 配置</h2>
<blockquote>
<p><code>main.js</code></p>
</blockquote>
<div><pre><code><span>npm</span> i axios
</code></pre><div aria-hidden="true"><div></div></div></div><ol>
<li>导入<code>axiso</code></li>
<li>为<code>axios</code>配置请求的根路径
<ul>
<li><code>axios.defaults.baseURL = 'https://api.server.com'</code></li>
</ul>
</li>
<li>将<code>axios</code>挂载为<code>app</code>的全局自定义属性之后，每个组件可以通过<code>this</code>直接访问到全局挂载的自定义属性</li>
<li>自定义属性名可自定义，不冲突即可，这里挂载的是<code>$http</code>自定义属性名</li>
</ol>
<p><strong>代码⬇️</strong></p>
<div><pre><code>import { createApp } from 'vue'
import App from './App.vue'

import axios from 'axios'

const app = createApp(App)

axios.defaults.baseURL = 'https://www.escook.cn'
app.config.globalProperties.$http = axios

app.mount('#app')
</code></pre><div><br><br><br><div>&nbsp;</div><br><br><br><div>&nbsp;</div><div>&nbsp;</div><br><br></div><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><h2 id="使用" tabindex="-1"> 使用</h2>
<blockquote>
<p>组件以及子组件内无需导入<code>axios</code></p>
</blockquote>
<ol>
<li>使用可以通过<code>this.$http</code>使用，如下代码⬇️</li>
</ol>
<div><pre><code>&lt;script>
export default {
  name: 'Post',
  methods: {
    async postInfo() {
      const { data: res } = await this.$http.post('/api/post', { name: 'zs', age: 20 })
      console.log(res)
    },
  },
}
&lt;/script>
</code></pre><div><br><br><br><br><br><div>&nbsp;</div><br><br><br><br><br></div><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div>]]></content>
    <category term="我的学习笔记" scheme=""/>
    <category term="Vue3" scheme=""/>
    <category term="Axios" scheme=""/>
    <published>2022-08-06T00:00:00.000Z</published>
  </entry>
</feed>